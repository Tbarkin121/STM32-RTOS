
RTOS Playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ca8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006e78  08006e78  00007e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007020  08007020  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  08007020  08007020  00008020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007028  08007028  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007028  08007028  00008028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800702c  0800702c  0000802c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007030  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b64  20000074  080070a4  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004bd8  080070a4  00009bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018997  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af0  00000000  00000000  00021a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c0  00000000  00000000  00025530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010cd  00000000  00000000  00026af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025616  00000000  00000000  00027bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019cef  00000000  00000000  0004d1d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd317  00000000  00000000  00066ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001441d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006208  00000000  00000000  0014421c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0014a424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006e60 	.word	0x08006e60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006e60 	.word	0x08006e60

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueSimpleData */
  QueueSimpleDataHandle = osMessageQueueNew (8, sizeof(uint8_t), &QueueSimpleData_attributes);
 80005a4:	4a14      	ldr	r2, [pc, #80]	@ (80005f8 <MX_FREERTOS_Init+0x58>)
 80005a6:	2101      	movs	r1, #1
 80005a8:	2008      	movs	r0, #8
 80005aa:	f002 fd7a 	bl	80030a2 <osMessageQueueNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a12      	ldr	r2, [pc, #72]	@ (80005fc <MX_FREERTOS_Init+0x5c>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* creation of QueueStructData */
  QueueStructDataHandle = osMessageQueueNew (8, sizeof(Data), &QueueStructData_attributes);
 80005b4:	4a12      	ldr	r2, [pc, #72]	@ (8000600 <MX_FREERTOS_Init+0x60>)
 80005b6:	2104      	movs	r1, #4
 80005b8:	2008      	movs	r0, #8
 80005ba:	f002 fd72 	bl	80030a2 <osMessageQueueNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a10      	ldr	r2, [pc, #64]	@ (8000604 <MX_FREERTOS_Init+0x64>)
 80005c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005c4:	4a10      	ldr	r2, [pc, #64]	@ (8000608 <MX_FREERTOS_Init+0x68>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4810      	ldr	r0, [pc, #64]	@ (800060c <MX_FREERTOS_Init+0x6c>)
 80005ca:	f002 fcbd 	bl	8002f48 <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000610 <MX_FREERTOS_Init+0x70>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* creation of helloTask */
  helloTaskHandle = osThreadNew(StartHelloTask, NULL, &helloTask_attributes);
 80005d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000614 <MX_FREERTOS_Init+0x74>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	480f      	ldr	r0, [pc, #60]	@ (8000618 <MX_FREERTOS_Init+0x78>)
 80005da:	f002 fcb5 	bl	8002f48 <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <MX_FREERTOS_Init+0x7c>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* creation of senderTask */
  senderTaskHandle = osThreadNew(StartSenderTask, NULL, &senderTask_attributes);
 80005e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000620 <MX_FREERTOS_Init+0x80>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	480e      	ldr	r0, [pc, #56]	@ (8000624 <MX_FREERTOS_Init+0x84>)
 80005ea:	f002 fcad 	bl	8002f48 <osThreadNew>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <MX_FREERTOS_Init+0x88>)
 80005f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	08006fa4 	.word	0x08006fa4
 80005fc:	2000009c 	.word	0x2000009c
 8000600:	08006fbc 	.word	0x08006fbc
 8000604:	200000a0 	.word	0x200000a0
 8000608:	08006f38 	.word	0x08006f38
 800060c:	0800062d 	.word	0x0800062d
 8000610:	20000090 	.word	0x20000090
 8000614:	08006f5c 	.word	0x08006f5c
 8000618:	080006e1 	.word	0x080006e1
 800061c:	20000094 	.word	0x20000094
 8000620:	08006f80 	.word	0x08006f80
 8000624:	08000749 	.word	0x08000749
 8000628:	20000098 	.word	0x20000098

0800062c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  uint8_t x=0;
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]
  uint32_t queue_cap = osMessageQueueGetCapacity(QueueSimpleDataHandle);
 8000638:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <StartDefaultTask+0x9c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fe61 	bl	8003304 <osMessageQueueGetCapacity>
 8000642:	61f8      	str	r0, [r7, #28]
  uint32_t num_in_queue, space_in_queue;
  osStatus_t s_state;
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000644:	2120      	movs	r1, #32
 8000646:	4821      	ldr	r0, [pc, #132]	@ (80006cc <StartDefaultTask+0xa0>)
 8000648:	f000 fe99 	bl	800137e <HAL_GPIO_TogglePin>
	num_in_queue = osMessageQueueGetCount(QueueSimpleDataHandle);
 800064c:	4b1e      	ldr	r3, [pc, #120]	@ (80006c8 <StartDefaultTask+0x9c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4618      	mov	r0, r3
 8000652:	f002 fe6d 	bl	8003330 <osMessageQueueGetCount>
 8000656:	61b8      	str	r0, [r7, #24]
	space_in_queue = osMessageQueueGetSpace(QueueSimpleDataHandle);
 8000658:	4b1b      	ldr	r3, [pc, #108]	@ (80006c8 <StartDefaultTask+0x9c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f002 fe87 	bl	8003370 <osMessageQueueGetSpace>
 8000662:	6178      	str	r0, [r7, #20]
	s_state = osMessageQueuePut(QueueSimpleDataHandle, &x, 0, 100);
 8000664:	4b18      	ldr	r3, [pc, #96]	@ (80006c8 <StartDefaultTask+0x9c>)
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	f107 010f 	add.w	r1, r7, #15
 800066c:	2364      	movs	r3, #100	@ 0x64
 800066e:	2200      	movs	r2, #0
 8000670:	f002 fd8a 	bl	8003188 <osMessageQueuePut>
 8000674:	6138      	str	r0, [r7, #16]
	if(s_state == osOK)
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d109      	bne.n	8000690 <StartDefaultTask+0x64>
	{
		if(++x>9)
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	3301      	adds	r3, #1
 8000680:	b2db      	uxtb	r3, r3
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	2b09      	cmp	r3, #9
 8000688:	d905      	bls.n	8000696 <StartDefaultTask+0x6a>
		{
			x=0;
 800068a:	2300      	movs	r3, #0
 800068c:	73fb      	strb	r3, [r7, #15]
 800068e:	e002      	b.n	8000696 <StartDefaultTask+0x6a>
		}
	}
	else
	{
		printf("osMessageQueuePut Timeout\n");
 8000690:	480f      	ldr	r0, [pc, #60]	@ (80006d0 <StartDefaultTask+0xa4>)
 8000692:	f005 fd73 	bl	800617c <puts>
	}
	printf("Queue Stats (%u:%u) Space %u\n", num_in_queue, queue_cap, space_in_queue);
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	69fa      	ldr	r2, [r7, #28]
 800069a:	69b9      	ldr	r1, [r7, #24]
 800069c:	480d      	ldr	r0, [pc, #52]	@ (80006d4 <StartDefaultTask+0xa8>)
 800069e:	f005 fd05 	bl	80060ac <iprintf>

	s_state = osMessageQueuePut(QueueStructDataHandle, &DataToSend1, 0, 100);
 80006a2:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <StartDefaultTask+0xac>)
 80006a4:	6818      	ldr	r0, [r3, #0]
 80006a6:	2364      	movs	r3, #100	@ 0x64
 80006a8:	2200      	movs	r2, #0
 80006aa:	490c      	ldr	r1, [pc, #48]	@ (80006dc <StartDefaultTask+0xb0>)
 80006ac:	f002 fd6c 	bl	8003188 <osMessageQueuePut>
 80006b0:	6138      	str	r0, [r7, #16]
	if(s_state != osOK)
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <StartDefaultTask+0x92>
	{
		printf("osMessageQueuePut Timeout\n");
 80006b8:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <StartDefaultTask+0xa4>)
 80006ba:	f005 fd5f 	bl	800617c <puts>
	}

    osDelay(1000);
 80006be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006c2:	f002 fcd3 	bl	800306c <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006c6:	e7bd      	b.n	8000644 <StartDefaultTask+0x18>
 80006c8:	2000009c 	.word	0x2000009c
 80006cc:	40020000 	.word	0x40020000
 80006d0:	08006ebc 	.word	0x08006ebc
 80006d4:	08006ed8 	.word	0x08006ed8
 80006d8:	200000a0 	.word	0x200000a0
 80006dc:	20000000 	.word	0x20000000

080006e0 <StartHelloTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHelloTask */
void StartHelloTask(void *argument)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  Data retvalue;
  osStatus_t r_state;
  /* Infinite loop */
  for(;;)
  {
	r_state = osMessageQueueGet(QueueSimpleDataHandle, &rec_x, 0, 0);
 80006e8:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <StartHelloTask+0x58>)
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	f107 0113 	add.w	r1, r7, #19
 80006f0:	2300      	movs	r3, #0
 80006f2:	2200      	movs	r2, #0
 80006f4:	f002 fda8 	bl	8003248 <osMessageQueueGet>
 80006f8:	6178      	str	r0, [r7, #20]
	if(r_state == osOK)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d104      	bne.n	800070a <StartHelloTask+0x2a>
	{
		printf("Hello RTOS %d\n",rec_x);
 8000700:	7cfb      	ldrb	r3, [r7, #19]
 8000702:	4619      	mov	r1, r3
 8000704:	480d      	ldr	r0, [pc, #52]	@ (800073c <StartHelloTask+0x5c>)
 8000706:	f005 fcd1 	bl	80060ac <iprintf>
	else
	{
//		printf("osMessageQueueGet Timeout\n");
	}

	r_state = osMessageQueueGet(QueueStructDataHandle, &retvalue, 0, 0);
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <StartHelloTask+0x60>)
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	f107 010c 	add.w	r1, r7, #12
 8000712:	2300      	movs	r3, #0
 8000714:	2200      	movs	r2, #0
 8000716:	f002 fd97 	bl	8003248 <osMessageQueueGet>
 800071a:	6178      	str	r0, [r7, #20]
	if(r_state == osOK)
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d106      	bne.n	8000730 <StartHelloTask+0x50>
	{
		printf("Struct Data: %c, %u\n",retvalue.Value, retvalue.Source);
 8000722:	89bb      	ldrh	r3, [r7, #12]
 8000724:	4619      	mov	r1, r3
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	461a      	mov	r2, r3
 800072a:	4806      	ldr	r0, [pc, #24]	@ (8000744 <StartHelloTask+0x64>)
 800072c:	f005 fcbe 	bl	80060ac <iprintf>
	else
	{
//		printf("osMessageQueueGet Timeout\n");
	}

    osDelay(100);
 8000730:	2064      	movs	r0, #100	@ 0x64
 8000732:	f002 fc9b 	bl	800306c <osDelay>
	r_state = osMessageQueueGet(QueueSimpleDataHandle, &rec_x, 0, 0);
 8000736:	e7d7      	b.n	80006e8 <StartHelloTask+0x8>
 8000738:	2000009c 	.word	0x2000009c
 800073c:	08006ef8 	.word	0x08006ef8
 8000740:	200000a0 	.word	0x200000a0
 8000744:	08006f08 	.word	0x08006f08

08000748 <StartSenderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSenderTask */
void StartSenderTask(void *argument)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSenderTask */
  /* Infinite loop */
  for(;;)
  {
	osMessageQueuePut(QueueStructDataHandle, &DataToSend2, 0, 200);
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <StartSenderTask+0x24>)
 8000752:	6818      	ldr	r0, [r3, #0]
 8000754:	23c8      	movs	r3, #200	@ 0xc8
 8000756:	2200      	movs	r2, #0
 8000758:	4905      	ldr	r1, [pc, #20]	@ (8000770 <StartSenderTask+0x28>)
 800075a:	f002 fd15 	bl	8003188 <osMessageQueuePut>
    osDelay(2000);
 800075e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000762:	f002 fc83 	bl	800306c <osDelay>
	osMessageQueuePut(QueueStructDataHandle, &DataToSend2, 0, 200);
 8000766:	bf00      	nop
 8000768:	e7f2      	b.n	8000750 <StartSenderTask+0x8>
 800076a:	bf00      	nop
 800076c:	200000a0 	.word	0x200000a0
 8000770:	20000004 	.word	0x20000004

08000774 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b31      	ldr	r3, [pc, #196]	@ (8000854 <MX_GPIO_Init+0xe0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a30      	ldr	r2, [pc, #192]	@ (8000854 <MX_GPIO_Init+0xe0>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b2e      	ldr	r3, [pc, #184]	@ (8000854 <MX_GPIO_Init+0xe0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000854 <MX_GPIO_Init+0xe0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a29      	ldr	r2, [pc, #164]	@ (8000854 <MX_GPIO_Init+0xe0>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b27      	ldr	r3, [pc, #156]	@ (8000854 <MX_GPIO_Init+0xe0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b23      	ldr	r3, [pc, #140]	@ (8000854 <MX_GPIO_Init+0xe0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a22      	ldr	r2, [pc, #136]	@ (8000854 <MX_GPIO_Init+0xe0>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <MX_GPIO_Init+0xe0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <MX_GPIO_Init+0xe0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a1b      	ldr	r2, [pc, #108]	@ (8000854 <MX_GPIO_Init+0xe0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <MX_GPIO_Init+0xe0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	4816      	ldr	r0, [pc, #88]	@ (8000858 <MX_GPIO_Init+0xe4>)
 8000800:	f000 fda4 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4810      	ldr	r0, [pc, #64]	@ (800085c <MX_GPIO_Init+0xe8>)
 800081c:	f000 fc02 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000820:	2320      	movs	r3, #32
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4808      	ldr	r0, [pc, #32]	@ (8000858 <MX_GPIO_Init+0xe4>)
 8000838:	f000 fbf4 	bl	8001024 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2105      	movs	r1, #5
 8000840:	2028      	movs	r0, #40	@ 0x28
 8000842:	f000 fbc5 	bl	8000fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000846:	2028      	movs	r0, #40	@ 0x28
 8000848:	f000 fbde 	bl	8001008 <HAL_NVIC_EnableIRQ>

}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	@ 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40020000 	.word	0x40020000
 800085c:	40020800 	.word	0x40020800

08000860 <_write>:
int __io_putchar(int ch) {
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
    return ch;
}

int _write(int file, char *ptr, int len) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	b29a      	uxth	r2, r3
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	4804      	ldr	r0, [pc, #16]	@ (8000888 <_write+0x28>)
 8000878:	f001 ff1c 	bl	80026b4 <HAL_UART_Transmit>
    return len;
 800087c:	687b      	ldr	r3, [r7, #4]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200000f0 	.word	0x200000f0

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f000 faa4 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f80c 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f7ff ff6c 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800089c:	f000 fa02 	bl	8000ca4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008a0:	f002 fb08 	bl	8002eb4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80008a4:	f7ff fe7c 	bl	80005a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008a8:	f002 fb28 	bl	8002efc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <main+0x20>

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	@ 0x50
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2234      	movs	r2, #52	@ 0x34
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f005 fd3c 	bl	800633c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b2c      	ldr	r3, [pc, #176]	@ (800098c <SystemClock_Config+0xdc>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	4a2b      	ldr	r2, [pc, #172]	@ (800098c <SystemClock_Config+0xdc>)
 80008de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e4:	4b29      	ldr	r3, [pc, #164]	@ (800098c <SystemClock_Config+0xdc>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	4b26      	ldr	r3, [pc, #152]	@ (8000990 <SystemClock_Config+0xe0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a25      	ldr	r2, [pc, #148]	@ (8000990 <SystemClock_Config+0xe0>)
 80008fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	4b23      	ldr	r3, [pc, #140]	@ (8000990 <SystemClock_Config+0xe0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090c:	2302      	movs	r3, #2
 800090e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000910:	2301      	movs	r3, #1
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000914:	2310      	movs	r3, #16
 8000916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000918:	2302      	movs	r3, #2
 800091a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800091c:	2300      	movs	r3, #0
 800091e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000920:	2308      	movs	r3, #8
 8000922:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000924:	23b4      	movs	r3, #180	@ 0xb4
 8000926:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000928:	2302      	movs	r3, #2
 800092a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800092c:	2302      	movs	r3, #2
 800092e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000930:	2302      	movs	r3, #2
 8000932:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4618      	mov	r0, r3
 800093a:	f001 f92b 	bl	8001b94 <HAL_RCC_OscConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000944:	f000 f838 	bl	80009b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000948:	f000 fd58 	bl	80013fc <HAL_PWREx_EnableOverDrive>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000952:	f000 f831 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000956:	230f      	movs	r3, #15
 8000958:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095a:	2302      	movs	r3, #2
 800095c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000962:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000966:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000968:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800096c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2105      	movs	r1, #5
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fd91 	bl	800149c <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000980:	f000 f81a 	bl	80009b8 <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	3750      	adds	r7, #80	@ 0x50
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40007000 	.word	0x40007000

08000994 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a04      	ldr	r2, [pc, #16]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009a6:	f000 fa3b 	bl	8000e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40001000 	.word	0x40001000

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <Error_Handler+0x8>

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_MspInit+0x54>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a11      	ldr	r2, [pc, #68]	@ (8000a18 <HAL_MspInit+0x54>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <HAL_MspInit+0x54>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <HAL_MspInit+0x54>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <HAL_MspInit+0x54>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <HAL_MspInit+0x54>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	210f      	movs	r1, #15
 8000a06:	f06f 0001 	mvn.w	r0, #1
 8000a0a:	f000 fae1 	bl	8000fd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800

08000a1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08e      	sub	sp, #56	@ 0x38
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	4b33      	ldr	r3, [pc, #204]	@ (8000b00 <HAL_InitTick+0xe4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a34:	4a32      	ldr	r2, [pc, #200]	@ (8000b00 <HAL_InitTick+0xe4>)
 8000a36:	f043 0310 	orr.w	r3, r3, #16
 8000a3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3c:	4b30      	ldr	r3, [pc, #192]	@ (8000b00 <HAL_InitTick+0xe4>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a40:	f003 0310 	and.w	r3, r3, #16
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a48:	f107 0210 	add.w	r2, r7, #16
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fe3c 	bl	80016d0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d103      	bne.n	8000a6a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a62:	f000 fe0d 	bl	8001680 <HAL_RCC_GetPCLK1Freq>
 8000a66:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a68:	e004      	b.n	8000a74 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a6a:	f000 fe09 	bl	8001680 <HAL_RCC_GetPCLK1Freq>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a76:	4a23      	ldr	r2, [pc, #140]	@ (8000b04 <HAL_InitTick+0xe8>)
 8000a78:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7c:	0c9b      	lsrs	r3, r3, #18
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a82:	4b21      	ldr	r3, [pc, #132]	@ (8000b08 <HAL_InitTick+0xec>)
 8000a84:	4a21      	ldr	r2, [pc, #132]	@ (8000b0c <HAL_InitTick+0xf0>)
 8000a86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	@ (8000b08 <HAL_InitTick+0xec>)
 8000a8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a8e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a90:	4a1d      	ldr	r2, [pc, #116]	@ (8000b08 <HAL_InitTick+0xec>)
 8000a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a94:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	@ (8000b08 <HAL_InitTick+0xec>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b08 <HAL_InitTick+0xec>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <HAL_InitTick+0xec>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000aa8:	4817      	ldr	r0, [pc, #92]	@ (8000b08 <HAL_InitTick+0xec>)
 8000aaa:	f001 fb11 	bl	80020d0 <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ab4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d11b      	bne.n	8000af4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000abc:	4812      	ldr	r0, [pc, #72]	@ (8000b08 <HAL_InitTick+0xec>)
 8000abe:	f001 fb61 	bl	8002184 <HAL_TIM_Base_Start_IT>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d111      	bne.n	8000af4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ad0:	2036      	movs	r0, #54	@ 0x36
 8000ad2:	f000 fa99 	bl	8001008 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d808      	bhi.n	8000aee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	2036      	movs	r0, #54	@ 0x36
 8000ae2:	f000 fa75 	bl	8000fd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <HAL_InitTick+0xf4>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	e002      	b.n	8000af4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000af4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3738      	adds	r7, #56	@ 0x38
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800
 8000b04:	431bde83 	.word	0x431bde83
 8000b08:	200000a4 	.word	0x200000a4
 8000b0c:	40001000 	.word	0x40001000
 8000b10:	2000000c 	.word	0x2000000c

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <NMI_Handler+0x4>

08000b1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b4e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b52:	f000 fc2f 	bl	80013b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <TIM6_DAC_IRQHandler+0x10>)
 8000b62:	f001 fb7f 	bl	8002264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000a4 	.word	0x200000a4

08000b70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e00a      	b.n	8000b98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b82:	f3af 8000 	nop.w
 8000b86:	4601      	mov	r1, r0
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	60ba      	str	r2, [r7, #8]
 8000b8e:	b2ca      	uxtb	r2, r1
 8000b90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbf0      	blt.n	8000b82 <_read+0x12>
  }

  return len;
 8000ba0:	687b      	ldr	r3, [r7, #4]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bd2:	605a      	str	r2, [r3, #4]
  return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <_isatty>:

int _isatty(int file)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	@ (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	@ (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f005 fbc8 	bl	80063d8 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20020000 	.word	0x20020000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	200000ec 	.word	0x200000ec
 8000c7c:	20004bd8 	.word	0x20004bd8

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <MX_USART2_UART_Init+0x50>)
 8000cac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000cb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <MX_USART2_UART_Init+0x4c>)
 8000cdc:	f001 fc9a 	bl	8002614 <HAL_UART_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ce6:	f7ff fe67 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000f0 	.word	0x200000f0
 8000cf4:	40004400 	.word	0x40004400

08000cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a19      	ldr	r2, [pc, #100]	@ (8000d7c <HAL_UART_MspInit+0x84>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d12b      	bne.n	8000d72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <HAL_UART_MspInit+0x88>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	4a17      	ldr	r2, [pc, #92]	@ (8000d80 <HAL_UART_MspInit+0x88>)
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_UART_MspInit+0x88>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <HAL_UART_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a10      	ldr	r2, [pc, #64]	@ (8000d80 <HAL_UART_MspInit+0x88>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <HAL_UART_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d52:	230c      	movs	r3, #12
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d62:	2307      	movs	r3, #7
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <HAL_UART_MspInit+0x8c>)
 8000d6e:	f000 f959 	bl	8001024 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d72:	bf00      	nop
 8000d74:	3728      	adds	r7, #40	@ 0x28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40004400 	.word	0x40004400
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d8c:	f7ff ff78 	bl	8000c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000db6:	f005 fb15 	bl	80063e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fd67 	bl	800088c <main>
  bx  lr    
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dcc:	08007030 	.word	0x08007030
  ldr r2, =_sbss
 8000dd0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dd4:	20004bd8 	.word	0x20004bd8

08000dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	@ (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f8d8 	bl	8000fba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f7ff fe06 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fdd8 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000010 	.word	0x20000010
 8000e44:	20000138 	.word	0x20000138

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000138 	.word	0x20000138

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4907      	ldr	r1, [pc, #28]	@ (8000efc <__NVIC_EnableIRQ+0x38>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	@ (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	@ (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	@ 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	@ 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ff4c 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe2:	f7ff ff61 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8000fe6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	6978      	ldr	r0, [r7, #20]
 8000fee:	f7ff ffb1 	bl	8000f54 <NVIC_EncodePriority>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff80 	bl	8000f00 <__NVIC_SetPriority>
}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff54 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	@ 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	e165      	b.n	800130c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	429a      	cmp	r2, r3
 800105a:	f040 8154 	bne.w	8001306 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b01      	cmp	r3, #1
 8001068:	d005      	beq.n	8001076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001072:	2b02      	cmp	r3, #2
 8001074:	d130      	bne.n	80010d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	f003 0201 	and.w	r2, r3, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d017      	beq.n	8001114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d123      	bne.n	8001168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3208      	adds	r2, #8
 8001128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	69b9      	ldr	r1, [r7, #24]
 8001164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0203 	and.w	r2, r3, #3
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80ae 	beq.w	8001306 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001324 <HAL_GPIO_Init+0x300>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001324 <HAL_GPIO_Init+0x300>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001324 <HAL_GPIO_Init+0x300>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c6:	4a58      	ldr	r2, [pc, #352]	@ (8001328 <HAL_GPIO_Init+0x304>)
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4f      	ldr	r2, [pc, #316]	@ (800132c <HAL_GPIO_Init+0x308>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d025      	beq.n	800123e <HAL_GPIO_Init+0x21a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001330 <HAL_GPIO_Init+0x30c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d01f      	beq.n	800123a <HAL_GPIO_Init+0x216>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001334 <HAL_GPIO_Init+0x310>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d019      	beq.n	8001236 <HAL_GPIO_Init+0x212>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4c      	ldr	r2, [pc, #304]	@ (8001338 <HAL_GPIO_Init+0x314>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d013      	beq.n	8001232 <HAL_GPIO_Init+0x20e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4b      	ldr	r2, [pc, #300]	@ (800133c <HAL_GPIO_Init+0x318>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d00d      	beq.n	800122e <HAL_GPIO_Init+0x20a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4a      	ldr	r2, [pc, #296]	@ (8001340 <HAL_GPIO_Init+0x31c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d007      	beq.n	800122a <HAL_GPIO_Init+0x206>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a49      	ldr	r2, [pc, #292]	@ (8001344 <HAL_GPIO_Init+0x320>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d101      	bne.n	8001226 <HAL_GPIO_Init+0x202>
 8001222:	2306      	movs	r3, #6
 8001224:	e00c      	b.n	8001240 <HAL_GPIO_Init+0x21c>
 8001226:	2307      	movs	r3, #7
 8001228:	e00a      	b.n	8001240 <HAL_GPIO_Init+0x21c>
 800122a:	2305      	movs	r3, #5
 800122c:	e008      	b.n	8001240 <HAL_GPIO_Init+0x21c>
 800122e:	2304      	movs	r3, #4
 8001230:	e006      	b.n	8001240 <HAL_GPIO_Init+0x21c>
 8001232:	2303      	movs	r3, #3
 8001234:	e004      	b.n	8001240 <HAL_GPIO_Init+0x21c>
 8001236:	2302      	movs	r3, #2
 8001238:	e002      	b.n	8001240 <HAL_GPIO_Init+0x21c>
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <HAL_GPIO_Init+0x21c>
 800123e:	2300      	movs	r3, #0
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	f002 0203 	and.w	r2, r2, #3
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	4093      	lsls	r3, r2
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001250:	4935      	ldr	r1, [pc, #212]	@ (8001328 <HAL_GPIO_Init+0x304>)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800125e:	4b3a      	ldr	r3, [pc, #232]	@ (8001348 <HAL_GPIO_Init+0x324>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001282:	4a31      	ldr	r2, [pc, #196]	@ (8001348 <HAL_GPIO_Init+0x324>)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001288:	4b2f      	ldr	r3, [pc, #188]	@ (8001348 <HAL_GPIO_Init+0x324>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ac:	4a26      	ldr	r2, [pc, #152]	@ (8001348 <HAL_GPIO_Init+0x324>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012b2:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <HAL_GPIO_Init+0x324>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001348 <HAL_GPIO_Init+0x324>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <HAL_GPIO_Init+0x324>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001300:	4a11      	ldr	r2, [pc, #68]	@ (8001348 <HAL_GPIO_Init+0x324>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3301      	adds	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	2b0f      	cmp	r3, #15
 8001310:	f67f ae96 	bls.w	8001040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3724      	adds	r7, #36	@ 0x24
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40013800 	.word	0x40013800
 800132c:	40020000 	.word	0x40020000
 8001330:	40020400 	.word	0x40020400
 8001334:	40020800 	.word	0x40020800
 8001338:	40020c00 	.word	0x40020c00
 800133c:	40021000 	.word	0x40021000
 8001340:	40021400 	.word	0x40021400
 8001344:	40021800 	.word	0x40021800
 8001348:	40013c00 	.word	0x40013c00

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 8001358:	4613      	mov	r3, r2
 800135a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001368:	e003      	b.n	8001372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	041a      	lsls	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	619a      	str	r2, [r3, #24]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001390:	887a      	ldrh	r2, [r7, #2]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4013      	ands	r3, r2
 8001396:	041a      	lsls	r2, r3, #16
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43d9      	mvns	r1, r3
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	400b      	ands	r3, r1
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	619a      	str	r2, [r3, #24]
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013c0:	695a      	ldr	r2, [r3, #20]
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d006      	beq.n	80013d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f806 	bl	80013e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40013c00 	.word	0x40013c00

080013e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	4b20      	ldr	r3, [pc, #128]	@ (800148c <HAL_PWREx_EnableOverDrive+0x90>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	4a1f      	ldr	r2, [pc, #124]	@ (800148c <HAL_PWREx_EnableOverDrive+0x90>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001414:	6413      	str	r3, [r2, #64]	@ 0x40
 8001416:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <HAL_PWREx_EnableOverDrive+0x90>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001422:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <HAL_PWREx_EnableOverDrive+0x94>)
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001428:	f7ff fd0e 	bl	8000e48 <HAL_GetTick>
 800142c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800142e:	e009      	b.n	8001444 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001430:	f7ff fd0a 	bl	8000e48 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800143e:	d901      	bls.n	8001444 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e01f      	b.n	8001484 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001444:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <HAL_PWREx_EnableOverDrive+0x98>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001450:	d1ee      	bne.n	8001430 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001458:	f7ff fcf6 	bl	8000e48 <HAL_GetTick>
 800145c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800145e:	e009      	b.n	8001474 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001460:	f7ff fcf2 	bl	8000e48 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800146e:	d901      	bls.n	8001474 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e007      	b.n	8001484 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001474:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <HAL_PWREx_EnableOverDrive+0x98>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001480:	d1ee      	bne.n	8001460 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	420e0040 	.word	0x420e0040
 8001494:	40007000 	.word	0x40007000
 8001498:	420e0044 	.word	0x420e0044

0800149c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e0cc      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b0:	4b68      	ldr	r3, [pc, #416]	@ (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 030f 	and.w	r3, r3, #15
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d90c      	bls.n	80014d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b65      	ldr	r3, [pc, #404]	@ (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c6:	4b63      	ldr	r3, [pc, #396]	@ (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e0b8      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d020      	beq.n	8001526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014f0:	4b59      	ldr	r3, [pc, #356]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	4a58      	ldr	r2, [pc, #352]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80014fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001508:	4b53      	ldr	r3, [pc, #332]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	4a52      	ldr	r2, [pc, #328]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001514:	4b50      	ldr	r3, [pc, #320]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	494d      	ldr	r1, [pc, #308]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	4313      	orrs	r3, r2
 8001524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d044      	beq.n	80015bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	4b47      	ldr	r3, [pc, #284]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d119      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e07f      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d003      	beq.n	800155a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001556:	2b03      	cmp	r3, #3
 8001558:	d107      	bne.n	800156a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	4b3f      	ldr	r3, [pc, #252]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d109      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e06f      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156a:	4b3b      	ldr	r3, [pc, #236]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e067      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157a:	4b37      	ldr	r3, [pc, #220]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f023 0203 	bic.w	r2, r3, #3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4934      	ldr	r1, [pc, #208]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	4313      	orrs	r3, r2
 800158a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800158c:	f7ff fc5c 	bl	8000e48 <HAL_GetTick>
 8001590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001592:	e00a      	b.n	80015aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001594:	f7ff fc58 	bl	8000e48 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e04f      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 020c 	and.w	r2, r3, #12
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d1eb      	bne.n	8001594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015bc:	4b25      	ldr	r3, [pc, #148]	@ (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 030f 	and.w	r3, r3, #15
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d20c      	bcs.n	80015e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ca:	4b22      	ldr	r3, [pc, #136]	@ (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d2:	4b20      	ldr	r3, [pc, #128]	@ (8001654 <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 030f 	and.w	r3, r3, #15
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e032      	b.n	800164a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015f0:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4916      	ldr	r1, [pc, #88]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d009      	beq.n	8001622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800160e:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	490e      	ldr	r1, [pc, #56]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	4313      	orrs	r3, r2
 8001620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001622:	f000 f887 	bl	8001734 <HAL_RCC_GetSysClockFreq>
 8001626:	4602      	mov	r2, r0
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	490a      	ldr	r1, [pc, #40]	@ (800165c <HAL_RCC_ClockConfig+0x1c0>)
 8001634:	5ccb      	ldrb	r3, [r1, r3]
 8001636:	fa22 f303 	lsr.w	r3, r2, r3
 800163a:	4a09      	ldr	r2, [pc, #36]	@ (8001660 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_RCC_ClockConfig+0x1c8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff f9ea 	bl	8000a1c <HAL_InitTick>

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023c00 	.word	0x40023c00
 8001658:	40023800 	.word	0x40023800
 800165c:	08006fd4 	.word	0x08006fd4
 8001660:	20000008 	.word	0x20000008
 8001664:	2000000c 	.word	0x2000000c

08001668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800166c:	4b03      	ldr	r3, [pc, #12]	@ (800167c <HAL_RCC_GetHCLKFreq+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008

08001680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001684:	f7ff fff0 	bl	8001668 <HAL_RCC_GetHCLKFreq>
 8001688:	4602      	mov	r2, r0
 800168a:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	0a9b      	lsrs	r3, r3, #10
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	4903      	ldr	r1, [pc, #12]	@ (80016a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001696:	5ccb      	ldrb	r3, [r1, r3]
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800169c:	4618      	mov	r0, r3
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	08006fe4 	.word	0x08006fe4

080016a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016ac:	f7ff ffdc 	bl	8001668 <HAL_RCC_GetHCLKFreq>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b05      	ldr	r3, [pc, #20]	@ (80016c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	0b5b      	lsrs	r3, r3, #13
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	4903      	ldr	r1, [pc, #12]	@ (80016cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80016be:	5ccb      	ldrb	r3, [r1, r3]
 80016c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	08006fe4 	.word	0x08006fe4

080016d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	220f      	movs	r2, #15
 80016de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_RCC_GetClockConfig+0x5c>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 0203 	and.w	r2, r3, #3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016ec:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <HAL_RCC_GetClockConfig+0x5c>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016f8:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <HAL_RCC_GetClockConfig+0x5c>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <HAL_RCC_GetClockConfig+0x5c>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	08db      	lsrs	r3, r3, #3
 800170a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <HAL_RCC_GetClockConfig+0x60>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 020f 	and.w	r2, r3, #15
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	601a      	str	r2, [r3, #0]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40023c00 	.word	0x40023c00

08001734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001738:	b0ae      	sub	sp, #184	@ 0xb8
 800173a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800175a:	4bcb      	ldr	r3, [pc, #812]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x354>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b0c      	cmp	r3, #12
 8001764:	f200 8206 	bhi.w	8001b74 <HAL_RCC_GetSysClockFreq+0x440>
 8001768:	a201      	add	r2, pc, #4	@ (adr r2, 8001770 <HAL_RCC_GetSysClockFreq+0x3c>)
 800176a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176e:	bf00      	nop
 8001770:	080017a5 	.word	0x080017a5
 8001774:	08001b75 	.word	0x08001b75
 8001778:	08001b75 	.word	0x08001b75
 800177c:	08001b75 	.word	0x08001b75
 8001780:	080017ad 	.word	0x080017ad
 8001784:	08001b75 	.word	0x08001b75
 8001788:	08001b75 	.word	0x08001b75
 800178c:	08001b75 	.word	0x08001b75
 8001790:	080017b5 	.word	0x080017b5
 8001794:	08001b75 	.word	0x08001b75
 8001798:	08001b75 	.word	0x08001b75
 800179c:	08001b75 	.word	0x08001b75
 80017a0:	080019a5 	.word	0x080019a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017a4:	4bb9      	ldr	r3, [pc, #740]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x358>)
 80017a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017aa:	e1e7      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ac:	4bb8      	ldr	r3, [pc, #736]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x35c>)
 80017ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017b2:	e1e3      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017b4:	4bb4      	ldr	r3, [pc, #720]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017c0:	4bb1      	ldr	r3, [pc, #708]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d071      	beq.n	80018b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017cc:	4bae      	ldr	r3, [pc, #696]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	099b      	lsrs	r3, r3, #6
 80017d2:	2200      	movs	r2, #0
 80017d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80017d8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80017dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80017e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017e8:	2300      	movs	r3, #0
 80017ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80017ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80017f2:	4622      	mov	r2, r4
 80017f4:	462b      	mov	r3, r5
 80017f6:	f04f 0000 	mov.w	r0, #0
 80017fa:	f04f 0100 	mov.w	r1, #0
 80017fe:	0159      	lsls	r1, r3, #5
 8001800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001804:	0150      	lsls	r0, r2, #5
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4621      	mov	r1, r4
 800180c:	1a51      	subs	r1, r2, r1
 800180e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001810:	4629      	mov	r1, r5
 8001812:	eb63 0301 	sbc.w	r3, r3, r1
 8001816:	647b      	str	r3, [r7, #68]	@ 0x44
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001824:	4649      	mov	r1, r9
 8001826:	018b      	lsls	r3, r1, #6
 8001828:	4641      	mov	r1, r8
 800182a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800182e:	4641      	mov	r1, r8
 8001830:	018a      	lsls	r2, r1, #6
 8001832:	4641      	mov	r1, r8
 8001834:	1a51      	subs	r1, r2, r1
 8001836:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001838:	4649      	mov	r1, r9
 800183a:	eb63 0301 	sbc.w	r3, r3, r1
 800183e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800184c:	4649      	mov	r1, r9
 800184e:	00cb      	lsls	r3, r1, #3
 8001850:	4641      	mov	r1, r8
 8001852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001856:	4641      	mov	r1, r8
 8001858:	00ca      	lsls	r2, r1, #3
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	4603      	mov	r3, r0
 8001860:	4622      	mov	r2, r4
 8001862:	189b      	adds	r3, r3, r2
 8001864:	633b      	str	r3, [r7, #48]	@ 0x30
 8001866:	462b      	mov	r3, r5
 8001868:	460a      	mov	r2, r1
 800186a:	eb42 0303 	adc.w	r3, r2, r3
 800186e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800187c:	4629      	mov	r1, r5
 800187e:	024b      	lsls	r3, r1, #9
 8001880:	4621      	mov	r1, r4
 8001882:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001886:	4621      	mov	r1, r4
 8001888:	024a      	lsls	r2, r1, #9
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001892:	2200      	movs	r2, #0
 8001894:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001898:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800189c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80018a0:	f7fe fd06 	bl	80002b0 <__aeabi_uldivmod>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4613      	mov	r3, r2
 80018aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018ae:	e067      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b0:	4b75      	ldr	r3, [pc, #468]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	099b      	lsrs	r3, r3, #6
 80018b6:	2200      	movs	r2, #0
 80018b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018bc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80018c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80018ca:	2300      	movs	r3, #0
 80018cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80018d2:	4622      	mov	r2, r4
 80018d4:	462b      	mov	r3, r5
 80018d6:	f04f 0000 	mov.w	r0, #0
 80018da:	f04f 0100 	mov.w	r1, #0
 80018de:	0159      	lsls	r1, r3, #5
 80018e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e4:	0150      	lsls	r0, r2, #5
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4621      	mov	r1, r4
 80018ec:	1a51      	subs	r1, r2, r1
 80018ee:	62b9      	str	r1, [r7, #40]	@ 0x28
 80018f0:	4629      	mov	r1, r5
 80018f2:	eb63 0301 	sbc.w	r3, r3, r1
 80018f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001904:	4649      	mov	r1, r9
 8001906:	018b      	lsls	r3, r1, #6
 8001908:	4641      	mov	r1, r8
 800190a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800190e:	4641      	mov	r1, r8
 8001910:	018a      	lsls	r2, r1, #6
 8001912:	4641      	mov	r1, r8
 8001914:	ebb2 0a01 	subs.w	sl, r2, r1
 8001918:	4649      	mov	r1, r9
 800191a:	eb63 0b01 	sbc.w	fp, r3, r1
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800192a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800192e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001932:	4692      	mov	sl, r2
 8001934:	469b      	mov	fp, r3
 8001936:	4623      	mov	r3, r4
 8001938:	eb1a 0303 	adds.w	r3, sl, r3
 800193c:	623b      	str	r3, [r7, #32]
 800193e:	462b      	mov	r3, r5
 8001940:	eb4b 0303 	adc.w	r3, fp, r3
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001952:	4629      	mov	r1, r5
 8001954:	028b      	lsls	r3, r1, #10
 8001956:	4621      	mov	r1, r4
 8001958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800195c:	4621      	mov	r1, r4
 800195e:	028a      	lsls	r2, r1, #10
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001968:	2200      	movs	r2, #0
 800196a:	673b      	str	r3, [r7, #112]	@ 0x70
 800196c:	677a      	str	r2, [r7, #116]	@ 0x74
 800196e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001972:	f7fe fc9d 	bl	80002b0 <__aeabi_uldivmod>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4613      	mov	r3, r2
 800197c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001980:	4b41      	ldr	r3, [pc, #260]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x354>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	0c1b      	lsrs	r3, r3, #16
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	3301      	adds	r3, #1
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001992:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001996:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019a2:	e0eb      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a4:	4b38      	ldr	r3, [pc, #224]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b0:	4b35      	ldr	r3, [pc, #212]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d06b      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019bc:	4b32      	ldr	r3, [pc, #200]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x354>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	099b      	lsrs	r3, r3, #6
 80019c2:	2200      	movs	r2, #0
 80019c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80019c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80019c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80019d0:	2300      	movs	r3, #0
 80019d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80019d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80019d8:	4622      	mov	r2, r4
 80019da:	462b      	mov	r3, r5
 80019dc:	f04f 0000 	mov.w	r0, #0
 80019e0:	f04f 0100 	mov.w	r1, #0
 80019e4:	0159      	lsls	r1, r3, #5
 80019e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ea:	0150      	lsls	r0, r2, #5
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4621      	mov	r1, r4
 80019f2:	1a51      	subs	r1, r2, r1
 80019f4:	61b9      	str	r1, [r7, #24]
 80019f6:	4629      	mov	r1, r5
 80019f8:	eb63 0301 	sbc.w	r3, r3, r1
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a0a:	4659      	mov	r1, fp
 8001a0c:	018b      	lsls	r3, r1, #6
 8001a0e:	4651      	mov	r1, sl
 8001a10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a14:	4651      	mov	r1, sl
 8001a16:	018a      	lsls	r2, r1, #6
 8001a18:	4651      	mov	r1, sl
 8001a1a:	ebb2 0801 	subs.w	r8, r2, r1
 8001a1e:	4659      	mov	r1, fp
 8001a20:	eb63 0901 	sbc.w	r9, r3, r1
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a38:	4690      	mov	r8, r2
 8001a3a:	4699      	mov	r9, r3
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	eb18 0303 	adds.w	r3, r8, r3
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	462b      	mov	r3, r5
 8001a46:	eb49 0303 	adc.w	r3, r9, r3
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a58:	4629      	mov	r1, r5
 8001a5a:	024b      	lsls	r3, r1, #9
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a62:	4621      	mov	r1, r4
 8001a64:	024a      	lsls	r2, r1, #9
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a6e:	2200      	movs	r2, #0
 8001a70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a72:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001a74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a78:	f7fe fc1a 	bl	80002b0 <__aeabi_uldivmod>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4613      	mov	r3, r2
 8001a82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a86:	e065      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x420>
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	00f42400 	.word	0x00f42400
 8001a90:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a94:	4b3d      	ldr	r3, [pc, #244]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x458>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001aaa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001aae:	4642      	mov	r2, r8
 8001ab0:	464b      	mov	r3, r9
 8001ab2:	f04f 0000 	mov.w	r0, #0
 8001ab6:	f04f 0100 	mov.w	r1, #0
 8001aba:	0159      	lsls	r1, r3, #5
 8001abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac0:	0150      	lsls	r0, r2, #5
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4641      	mov	r1, r8
 8001ac8:	1a51      	subs	r1, r2, r1
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	4649      	mov	r1, r9
 8001ace:	eb63 0301 	sbc.w	r3, r3, r1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ae0:	4659      	mov	r1, fp
 8001ae2:	018b      	lsls	r3, r1, #6
 8001ae4:	4651      	mov	r1, sl
 8001ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aea:	4651      	mov	r1, sl
 8001aec:	018a      	lsls	r2, r1, #6
 8001aee:	4651      	mov	r1, sl
 8001af0:	1a54      	subs	r4, r2, r1
 8001af2:	4659      	mov	r1, fp
 8001af4:	eb63 0501 	sbc.w	r5, r3, r1
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	00eb      	lsls	r3, r5, #3
 8001b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b06:	00e2      	lsls	r2, r4, #3
 8001b08:	4614      	mov	r4, r2
 8001b0a:	461d      	mov	r5, r3
 8001b0c:	4643      	mov	r3, r8
 8001b0e:	18e3      	adds	r3, r4, r3
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	464b      	mov	r3, r9
 8001b14:	eb45 0303 	adc.w	r3, r5, r3
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b26:	4629      	mov	r1, r5
 8001b28:	028b      	lsls	r3, r1, #10
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b30:	4621      	mov	r1, r4
 8001b32:	028a      	lsls	r2, r1, #10
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b40:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b46:	f7fe fbb3 	bl	80002b0 <__aeabi_uldivmod>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4613      	mov	r3, r2
 8001b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b54:	4b0d      	ldr	r3, [pc, #52]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x458>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	0f1b      	lsrs	r3, r3, #28
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b72:	e003      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	37b8      	adds	r7, #184	@ 0xb8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	00f42400 	.word	0x00f42400

08001b94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e28d      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8083 	beq.w	8001cba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bb4:	4b94      	ldr	r3, [pc, #592]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d019      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bc0:	4b91      	ldr	r3, [pc, #580]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
        || \
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bcc:	4b8e      	ldr	r3, [pc, #568]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bd8:	d00c      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bda:	4b8b      	ldr	r3, [pc, #556]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d112      	bne.n	8001c0c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001be6:	4b88      	ldr	r3, [pc, #544]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bf2:	d10b      	bne.n	8001c0c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	4b84      	ldr	r3, [pc, #528]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d05b      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x124>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d157      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e25a      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c14:	d106      	bne.n	8001c24 <HAL_RCC_OscConfig+0x90>
 8001c16:	4b7c      	ldr	r3, [pc, #496]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a7b      	ldr	r2, [pc, #492]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e01d      	b.n	8001c60 <HAL_RCC_OscConfig+0xcc>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c2c:	d10c      	bne.n	8001c48 <HAL_RCC_OscConfig+0xb4>
 8001c2e:	4b76      	ldr	r3, [pc, #472]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a75      	ldr	r2, [pc, #468]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b73      	ldr	r3, [pc, #460]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a72      	ldr	r2, [pc, #456]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e00b      	b.n	8001c60 <HAL_RCC_OscConfig+0xcc>
 8001c48:	4b6f      	ldr	r3, [pc, #444]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a6e      	ldr	r2, [pc, #440]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b6c      	ldr	r3, [pc, #432]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a6b      	ldr	r2, [pc, #428]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d013      	beq.n	8001c90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff f8ee 	bl	8000e48 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff f8ea 	bl	8000e48 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	@ 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e21f      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	4b61      	ldr	r3, [pc, #388]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0xdc>
 8001c8e:	e014      	b.n	8001cba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff f8da 	bl	8000e48 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff f8d6 	bl	8000e48 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	@ 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e20b      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001caa:	4b57      	ldr	r3, [pc, #348]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x104>
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d06f      	beq.n	8001da6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cc6:	4b50      	ldr	r3, [pc, #320]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d017      	beq.n	8001d02 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
        || \
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d105      	bne.n	8001cea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cde:	4b4a      	ldr	r3, [pc, #296]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cea:	4b47      	ldr	r3, [pc, #284]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d11c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf6:	4b44      	ldr	r3, [pc, #272]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d116      	bne.n	8001d30 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d02:	4b41      	ldr	r3, [pc, #260]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_RCC_OscConfig+0x186>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e1d3      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4937      	ldr	r1, [pc, #220]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	e03a      	b.n	8001da6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d020      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d38:	4b34      	ldr	r3, [pc, #208]	@ (8001e0c <HAL_RCC_OscConfig+0x278>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3e:	f7ff f883 	bl	8000e48 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d46:	f7ff f87f 	bl	8000e48 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e1b4      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	4b2b      	ldr	r3, [pc, #172]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d64:	4b28      	ldr	r3, [pc, #160]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4925      	ldr	r1, [pc, #148]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	600b      	str	r3, [r1, #0]
 8001d78:	e015      	b.n	8001da6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7a:	4b24      	ldr	r3, [pc, #144]	@ (8001e0c <HAL_RCC_OscConfig+0x278>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff f862 	bl	8000e48 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff f85e 	bl	8000e48 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e193      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d036      	beq.n	8001e20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d016      	beq.n	8001de8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff f842 	bl	8000e48 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f83e 	bl	8000e48 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e173      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x234>
 8001de6:	e01b      	b.n	8001e20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de8:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_RCC_OscConfig+0x27c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dee:	f7ff f82b 	bl	8000e48 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df4:	e00e      	b.n	8001e14 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df6:	f7ff f827 	bl	8000e48 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d907      	bls.n	8001e14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e15c      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	42470000 	.word	0x42470000
 8001e10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	4b8a      	ldr	r3, [pc, #552]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1ea      	bne.n	8001df6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8097 	beq.w	8001f5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b83      	ldr	r3, [pc, #524]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10f      	bne.n	8001e5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	4b7f      	ldr	r3, [pc, #508]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	4a7e      	ldr	r2, [pc, #504]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4e:	4b7c      	ldr	r3, [pc, #496]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5e:	4b79      	ldr	r3, [pc, #484]	@ (8002044 <HAL_RCC_OscConfig+0x4b0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d118      	bne.n	8001e9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6a:	4b76      	ldr	r3, [pc, #472]	@ (8002044 <HAL_RCC_OscConfig+0x4b0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a75      	ldr	r2, [pc, #468]	@ (8002044 <HAL_RCC_OscConfig+0x4b0>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e76:	f7fe ffe7 	bl	8000e48 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7e:	f7fe ffe3 	bl	8000e48 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e118      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	4b6c      	ldr	r3, [pc, #432]	@ (8002044 <HAL_RCC_OscConfig+0x4b0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x31e>
 8001ea4:	4b66      	ldr	r3, [pc, #408]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea8:	4a65      	ldr	r2, [pc, #404]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb0:	e01c      	b.n	8001eec <HAL_RCC_OscConfig+0x358>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b05      	cmp	r3, #5
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x340>
 8001eba:	4b61      	ldr	r3, [pc, #388]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ebe:	4a60      	ldr	r2, [pc, #384]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec6:	4b5e      	ldr	r3, [pc, #376]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eca:	4a5d      	ldr	r2, [pc, #372]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed2:	e00b      	b.n	8001eec <HAL_RCC_OscConfig+0x358>
 8001ed4:	4b5a      	ldr	r3, [pc, #360]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed8:	4a59      	ldr	r2, [pc, #356]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee0:	4b57      	ldr	r3, [pc, #348]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee4:	4a56      	ldr	r2, [pc, #344]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001ee6:	f023 0304 	bic.w	r3, r3, #4
 8001eea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d015      	beq.n	8001f20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7fe ffa8 	bl	8000e48 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efc:	f7fe ffa4 	bl	8000e48 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e0d7      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f12:	4b4b      	ldr	r3, [pc, #300]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0ee      	beq.n	8001efc <HAL_RCC_OscConfig+0x368>
 8001f1e:	e014      	b.n	8001f4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7fe ff92 	bl	8000e48 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7fe ff8e 	bl	8000e48 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e0c1      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3e:	4b40      	ldr	r3, [pc, #256]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1ee      	bne.n	8001f28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f4a:	7dfb      	ldrb	r3, [r7, #23]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d105      	bne.n	8001f5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f50:	4b3b      	ldr	r3, [pc, #236]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	4a3a      	ldr	r2, [pc, #232]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80ad 	beq.w	80020c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f66:	4b36      	ldr	r3, [pc, #216]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d060      	beq.n	8002034 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d145      	bne.n	8002006 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b33      	ldr	r3, [pc, #204]	@ (8002048 <HAL_RCC_OscConfig+0x4b4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f80:	f7fe ff62 	bl	8000e48 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f88:	f7fe ff5e 	bl	8000e48 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e093      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	4b29      	ldr	r3, [pc, #164]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb4:	019b      	lsls	r3, r3, #6
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbc:	085b      	lsrs	r3, r3, #1
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	041b      	lsls	r3, r3, #16
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	061b      	lsls	r3, r3, #24
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	071b      	lsls	r3, r3, #28
 8001fd2:	491b      	ldr	r1, [pc, #108]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <HAL_RCC_OscConfig+0x4b4>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7fe ff33 	bl	8000e48 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe6:	f7fe ff2f 	bl	8000e48 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e064      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff8:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x452>
 8002004:	e05c      	b.n	80020c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <HAL_RCC_OscConfig+0x4b4>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7fe ff1c 	bl	8000e48 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe ff18 	bl	8000e48 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e04d      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <HAL_RCC_OscConfig+0x4ac>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x480>
 8002032:	e045      	b.n	80020c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d107      	bne.n	800204c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e040      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
 8002040:	40023800 	.word	0x40023800
 8002044:	40007000 	.word	0x40007000
 8002048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800204c:	4b1f      	ldr	r3, [pc, #124]	@ (80020cc <HAL_RCC_OscConfig+0x538>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d030      	beq.n	80020bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d129      	bne.n	80020bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d122      	bne.n	80020bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800207c:	4013      	ands	r3, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002084:	4293      	cmp	r3, r2
 8002086:	d119      	bne.n	80020bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	3b01      	subs	r3, #1
 8002096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d10f      	bne.n	80020bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d107      	bne.n	80020bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800

080020d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e041      	b.n	8002166 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f839 	bl	800216e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3304      	adds	r3, #4
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f000 f9c0 	bl	8002494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d001      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e04e      	b.n	800223a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a23      	ldr	r2, [pc, #140]	@ (8002248 <HAL_TIM_Base_Start_IT+0xc4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d022      	beq.n	8002204 <HAL_TIM_Base_Start_IT+0x80>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c6:	d01d      	beq.n	8002204 <HAL_TIM_Base_Start_IT+0x80>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1f      	ldr	r2, [pc, #124]	@ (800224c <HAL_TIM_Base_Start_IT+0xc8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d018      	beq.n	8002204 <HAL_TIM_Base_Start_IT+0x80>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002250 <HAL_TIM_Base_Start_IT+0xcc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d013      	beq.n	8002204 <HAL_TIM_Base_Start_IT+0x80>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002254 <HAL_TIM_Base_Start_IT+0xd0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00e      	beq.n	8002204 <HAL_TIM_Base_Start_IT+0x80>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002258 <HAL_TIM_Base_Start_IT+0xd4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d009      	beq.n	8002204 <HAL_TIM_Base_Start_IT+0x80>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a19      	ldr	r2, [pc, #100]	@ (800225c <HAL_TIM_Base_Start_IT+0xd8>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d004      	beq.n	8002204 <HAL_TIM_Base_Start_IT+0x80>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a18      	ldr	r2, [pc, #96]	@ (8002260 <HAL_TIM_Base_Start_IT+0xdc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d111      	bne.n	8002228 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b06      	cmp	r3, #6
 8002214:	d010      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 0201 	orr.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002226:	e007      	b.n	8002238 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40010000 	.word	0x40010000
 800224c:	40000400 	.word	0x40000400
 8002250:	40000800 	.word	0x40000800
 8002254:	40000c00 	.word	0x40000c00
 8002258:	40010400 	.word	0x40010400
 800225c:	40014000 	.word	0x40014000
 8002260:	40001800 	.word	0x40001800

08002264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d020      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01b      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0202 	mvn.w	r2, #2
 8002298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f8d2 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f8c4 	bl	8002444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f8d5 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d020      	beq.n	8002314 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01b      	beq.n	8002314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0204 	mvn.w	r2, #4
 80022e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2202      	movs	r2, #2
 80022ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f8ac 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
 8002300:	e005      	b.n	800230e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f89e 	bl	8002444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f8af 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d020      	beq.n	8002360 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01b      	beq.n	8002360 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0208 	mvn.w	r2, #8
 8002330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2204      	movs	r2, #4
 8002336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f886 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
 800234c:	e005      	b.n	800235a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f878 	bl	8002444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f889 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	d020      	beq.n	80023ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	2b00      	cmp	r3, #0
 8002372:	d01b      	beq.n	80023ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0210 	mvn.w	r2, #16
 800237c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2208      	movs	r2, #8
 8002382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f860 	bl	8002458 <HAL_TIM_IC_CaptureCallback>
 8002398:	e005      	b.n	80023a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f852 	bl	8002444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f863 	bl	800246c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00c      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0201 	mvn.w	r2, #1
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7fe fae2 	bl	8000994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00c      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f906 	bl	8002600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f834 	bl	8002480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00c      	beq.n	800243c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0220 	mvn.w	r2, #32
 8002434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f8d8 	bl	80025ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a46      	ldr	r2, [pc, #280]	@ (80025c0 <TIM_Base_SetConfig+0x12c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d013      	beq.n	80024d4 <TIM_Base_SetConfig+0x40>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b2:	d00f      	beq.n	80024d4 <TIM_Base_SetConfig+0x40>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a43      	ldr	r2, [pc, #268]	@ (80025c4 <TIM_Base_SetConfig+0x130>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00b      	beq.n	80024d4 <TIM_Base_SetConfig+0x40>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a42      	ldr	r2, [pc, #264]	@ (80025c8 <TIM_Base_SetConfig+0x134>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d007      	beq.n	80024d4 <TIM_Base_SetConfig+0x40>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a41      	ldr	r2, [pc, #260]	@ (80025cc <TIM_Base_SetConfig+0x138>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d003      	beq.n	80024d4 <TIM_Base_SetConfig+0x40>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a40      	ldr	r2, [pc, #256]	@ (80025d0 <TIM_Base_SetConfig+0x13c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d108      	bne.n	80024e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a35      	ldr	r2, [pc, #212]	@ (80025c0 <TIM_Base_SetConfig+0x12c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d02b      	beq.n	8002546 <TIM_Base_SetConfig+0xb2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024f4:	d027      	beq.n	8002546 <TIM_Base_SetConfig+0xb2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a32      	ldr	r2, [pc, #200]	@ (80025c4 <TIM_Base_SetConfig+0x130>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d023      	beq.n	8002546 <TIM_Base_SetConfig+0xb2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a31      	ldr	r2, [pc, #196]	@ (80025c8 <TIM_Base_SetConfig+0x134>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d01f      	beq.n	8002546 <TIM_Base_SetConfig+0xb2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a30      	ldr	r2, [pc, #192]	@ (80025cc <TIM_Base_SetConfig+0x138>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01b      	beq.n	8002546 <TIM_Base_SetConfig+0xb2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a2f      	ldr	r2, [pc, #188]	@ (80025d0 <TIM_Base_SetConfig+0x13c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d017      	beq.n	8002546 <TIM_Base_SetConfig+0xb2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a2e      	ldr	r2, [pc, #184]	@ (80025d4 <TIM_Base_SetConfig+0x140>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <TIM_Base_SetConfig+0xb2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a2d      	ldr	r2, [pc, #180]	@ (80025d8 <TIM_Base_SetConfig+0x144>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00f      	beq.n	8002546 <TIM_Base_SetConfig+0xb2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a2c      	ldr	r2, [pc, #176]	@ (80025dc <TIM_Base_SetConfig+0x148>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00b      	beq.n	8002546 <TIM_Base_SetConfig+0xb2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a2b      	ldr	r2, [pc, #172]	@ (80025e0 <TIM_Base_SetConfig+0x14c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <TIM_Base_SetConfig+0xb2>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a2a      	ldr	r2, [pc, #168]	@ (80025e4 <TIM_Base_SetConfig+0x150>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d003      	beq.n	8002546 <TIM_Base_SetConfig+0xb2>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a29      	ldr	r2, [pc, #164]	@ (80025e8 <TIM_Base_SetConfig+0x154>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d108      	bne.n	8002558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800254c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a10      	ldr	r2, [pc, #64]	@ (80025c0 <TIM_Base_SetConfig+0x12c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d003      	beq.n	800258c <TIM_Base_SetConfig+0xf8>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a12      	ldr	r2, [pc, #72]	@ (80025d0 <TIM_Base_SetConfig+0x13c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d103      	bne.n	8002594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d105      	bne.n	80025b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f023 0201 	bic.w	r2, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	611a      	str	r2, [r3, #16]
  }
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	40010000 	.word	0x40010000
 80025c4:	40000400 	.word	0x40000400
 80025c8:	40000800 	.word	0x40000800
 80025cc:	40000c00 	.word	0x40000c00
 80025d0:	40010400 	.word	0x40010400
 80025d4:	40014000 	.word	0x40014000
 80025d8:	40014400 	.word	0x40014400
 80025dc:	40014800 	.word	0x40014800
 80025e0:	40001800 	.word	0x40001800
 80025e4:	40001c00 	.word	0x40001c00
 80025e8:	40002000 	.word	0x40002000

080025ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e042      	b.n	80026ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fb5c 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2224      	movs	r2, #36	@ 0x24
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002656:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f973 	bl	8002944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800266c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695a      	ldr	r2, [r3, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800267c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800268c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	@ 0x28
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d175      	bne.n	80027c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_UART_Transmit+0x2c>
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e06e      	b.n	80027c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2221      	movs	r2, #33	@ 0x21
 80026ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026f2:	f7fe fba9 	bl	8000e48 <HAL_GetTick>
 80026f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	88fa      	ldrh	r2, [r7, #6]
 80026fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	88fa      	ldrh	r2, [r7, #6]
 8002702:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800270c:	d108      	bne.n	8002720 <HAL_UART_Transmit+0x6c>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d104      	bne.n	8002720 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	e003      	b.n	8002728 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002728:	e02e      	b.n	8002788 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2200      	movs	r2, #0
 8002732:	2180      	movs	r1, #128	@ 0x80
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f848 	bl	80027ca <UART_WaitOnFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e03a      	b.n	80027c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10b      	bne.n	800276a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002760:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	3302      	adds	r3, #2
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	e007      	b.n	800277a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	3301      	adds	r3, #1
 8002778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1cb      	bne.n	800272a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2200      	movs	r2, #0
 800279a:	2140      	movs	r1, #64	@ 0x40
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f814 	bl	80027ca <UART_WaitOnFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e006      	b.n	80027c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	e000      	b.n	80027c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80027c0:	2302      	movs	r3, #2
  }
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	4613      	mov	r3, r2
 80027d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027da:	e03b      	b.n	8002854 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e2:	d037      	beq.n	8002854 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e4:	f7fe fb30 	bl	8000e48 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	6a3a      	ldr	r2, [r7, #32]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d302      	bcc.n	80027fa <UART_WaitOnFlagUntilTimeout+0x30>
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e03a      	b.n	8002874 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d023      	beq.n	8002854 <UART_WaitOnFlagUntilTimeout+0x8a>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b80      	cmp	r3, #128	@ 0x80
 8002810:	d020      	beq.n	8002854 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b40      	cmp	r3, #64	@ 0x40
 8002816:	d01d      	beq.n	8002854 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b08      	cmp	r3, #8
 8002824:	d116      	bne.n	8002854 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f81d 	bl	800287c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2208      	movs	r2, #8
 8002846:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e00f      	b.n	8002874 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4013      	ands	r3, r2
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	429a      	cmp	r2, r3
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	429a      	cmp	r2, r3
 8002870:	d0b4      	beq.n	80027dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800287c:	b480      	push	{r7}
 800287e:	b095      	sub	sp, #84	@ 0x54
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	330c      	adds	r3, #12
 800288a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800288e:	e853 3f00 	ldrex	r3, [r3]
 8002892:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002896:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800289a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	330c      	adds	r3, #12
 80028a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80028a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028ac:	e841 2300 	strex	r3, r2, [r1]
 80028b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1e5      	bne.n	8002884 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	3314      	adds	r3, #20
 80028be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	e853 3f00 	ldrex	r3, [r3]
 80028c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f023 0301 	bic.w	r3, r3, #1
 80028ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	3314      	adds	r3, #20
 80028d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028e0:	e841 2300 	strex	r3, r2, [r1]
 80028e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e5      	bne.n	80028b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d119      	bne.n	8002928 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	330c      	adds	r3, #12
 80028fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	e853 3f00 	ldrex	r3, [r3]
 8002902:	60bb      	str	r3, [r7, #8]
   return(result);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f023 0310 	bic.w	r3, r3, #16
 800290a:	647b      	str	r3, [r7, #68]	@ 0x44
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	330c      	adds	r3, #12
 8002912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002914:	61ba      	str	r2, [r7, #24]
 8002916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002918:	6979      	ldr	r1, [r7, #20]
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	e841 2300 	strex	r3, r2, [r1]
 8002920:	613b      	str	r3, [r7, #16]
   return(result);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e5      	bne.n	80028f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002936:	bf00      	nop
 8002938:	3754      	adds	r7, #84	@ 0x54
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002948:	b0c0      	sub	sp, #256	@ 0x100
 800294a:	af00      	add	r7, sp, #0
 800294c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002960:	68d9      	ldr	r1, [r3, #12]
 8002962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	ea40 0301 	orr.w	r3, r0, r1
 800296c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800296e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	431a      	orrs	r2, r3
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	431a      	orrs	r2, r3
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800299c:	f021 010c 	bic.w	r1, r1, #12
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029aa:	430b      	orrs	r3, r1
 80029ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80029ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029be:	6999      	ldr	r1, [r3, #24]
 80029c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	ea40 0301 	orr.w	r3, r0, r1
 80029ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4b8f      	ldr	r3, [pc, #572]	@ (8002c10 <UART_SetConfig+0x2cc>)
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d005      	beq.n	80029e4 <UART_SetConfig+0xa0>
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	4b8d      	ldr	r3, [pc, #564]	@ (8002c14 <UART_SetConfig+0x2d0>)
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d104      	bne.n	80029ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029e4:	f7fe fe60 	bl	80016a8 <HAL_RCC_GetPCLK2Freq>
 80029e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029ec:	e003      	b.n	80029f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029ee:	f7fe fe47 	bl	8001680 <HAL_RCC_GetPCLK1Freq>
 80029f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a00:	f040 810c 	bne.w	8002c1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a16:	4622      	mov	r2, r4
 8002a18:	462b      	mov	r3, r5
 8002a1a:	1891      	adds	r1, r2, r2
 8002a1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a1e:	415b      	adcs	r3, r3
 8002a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a26:	4621      	mov	r1, r4
 8002a28:	eb12 0801 	adds.w	r8, r2, r1
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	eb43 0901 	adc.w	r9, r3, r1
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a46:	4690      	mov	r8, r2
 8002a48:	4699      	mov	r9, r3
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	eb18 0303 	adds.w	r3, r8, r3
 8002a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a54:	462b      	mov	r3, r5
 8002a56:	eb49 0303 	adc.w	r3, r9, r3
 8002a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a72:	460b      	mov	r3, r1
 8002a74:	18db      	adds	r3, r3, r3
 8002a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a78:	4613      	mov	r3, r2
 8002a7a:	eb42 0303 	adc.w	r3, r2, r3
 8002a7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a88:	f7fd fc12 	bl	80002b0 <__aeabi_uldivmod>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4b61      	ldr	r3, [pc, #388]	@ (8002c18 <UART_SetConfig+0x2d4>)
 8002a92:	fba3 2302 	umull	r2, r3, r3, r2
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	011c      	lsls	r4, r3, #4
 8002a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002aa4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002aa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002aac:	4642      	mov	r2, r8
 8002aae:	464b      	mov	r3, r9
 8002ab0:	1891      	adds	r1, r2, r2
 8002ab2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ab4:	415b      	adcs	r3, r3
 8002ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002abc:	4641      	mov	r1, r8
 8002abe:	eb12 0a01 	adds.w	sl, r2, r1
 8002ac2:	4649      	mov	r1, r9
 8002ac4:	eb43 0b01 	adc.w	fp, r3, r1
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ad4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002adc:	4692      	mov	sl, r2
 8002ade:	469b      	mov	fp, r3
 8002ae0:	4643      	mov	r3, r8
 8002ae2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002aea:	464b      	mov	r3, r9
 8002aec:	eb4b 0303 	adc.w	r3, fp, r3
 8002af0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	18db      	adds	r3, r3, r3
 8002b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b0e:	4613      	mov	r3, r2
 8002b10:	eb42 0303 	adc.w	r3, r2, r3
 8002b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b1e:	f7fd fbc7 	bl	80002b0 <__aeabi_uldivmod>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4611      	mov	r1, r2
 8002b28:	4b3b      	ldr	r3, [pc, #236]	@ (8002c18 <UART_SetConfig+0x2d4>)
 8002b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2264      	movs	r2, #100	@ 0x64
 8002b32:	fb02 f303 	mul.w	r3, r2, r3
 8002b36:	1acb      	subs	r3, r1, r3
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b3e:	4b36      	ldr	r3, [pc, #216]	@ (8002c18 <UART_SetConfig+0x2d4>)
 8002b40:	fba3 2302 	umull	r2, r3, r3, r2
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b4c:	441c      	add	r4, r3
 8002b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b52:	2200      	movs	r2, #0
 8002b54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b60:	4642      	mov	r2, r8
 8002b62:	464b      	mov	r3, r9
 8002b64:	1891      	adds	r1, r2, r2
 8002b66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b68:	415b      	adcs	r3, r3
 8002b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b70:	4641      	mov	r1, r8
 8002b72:	1851      	adds	r1, r2, r1
 8002b74:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b76:	4649      	mov	r1, r9
 8002b78:	414b      	adcs	r3, r1
 8002b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b88:	4659      	mov	r1, fp
 8002b8a:	00cb      	lsls	r3, r1, #3
 8002b8c:	4651      	mov	r1, sl
 8002b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b92:	4651      	mov	r1, sl
 8002b94:	00ca      	lsls	r2, r1, #3
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4642      	mov	r2, r8
 8002b9e:	189b      	adds	r3, r3, r2
 8002ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ba4:	464b      	mov	r3, r9
 8002ba6:	460a      	mov	r2, r1
 8002ba8:	eb42 0303 	adc.w	r3, r2, r3
 8002bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002bc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	18db      	adds	r3, r3, r3
 8002bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bca:	4613      	mov	r3, r2
 8002bcc:	eb42 0303 	adc.w	r3, r2, r3
 8002bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002bda:	f7fd fb69 	bl	80002b0 <__aeabi_uldivmod>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c18 <UART_SetConfig+0x2d4>)
 8002be4:	fba3 1302 	umull	r1, r3, r3, r2
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	2164      	movs	r1, #100	@ 0x64
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	3332      	adds	r3, #50	@ 0x32
 8002bf6:	4a08      	ldr	r2, [pc, #32]	@ (8002c18 <UART_SetConfig+0x2d4>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	095b      	lsrs	r3, r3, #5
 8002bfe:	f003 0207 	and.w	r2, r3, #7
 8002c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4422      	add	r2, r4
 8002c0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c0c:	e106      	b.n	8002e1c <UART_SetConfig+0x4d8>
 8002c0e:	bf00      	nop
 8002c10:	40011000 	.word	0x40011000
 8002c14:	40011400 	.word	0x40011400
 8002c18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c20:	2200      	movs	r2, #0
 8002c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c2e:	4642      	mov	r2, r8
 8002c30:	464b      	mov	r3, r9
 8002c32:	1891      	adds	r1, r2, r2
 8002c34:	6239      	str	r1, [r7, #32]
 8002c36:	415b      	adcs	r3, r3
 8002c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c3e:	4641      	mov	r1, r8
 8002c40:	1854      	adds	r4, r2, r1
 8002c42:	4649      	mov	r1, r9
 8002c44:	eb43 0501 	adc.w	r5, r3, r1
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	00eb      	lsls	r3, r5, #3
 8002c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c56:	00e2      	lsls	r2, r4, #3
 8002c58:	4614      	mov	r4, r2
 8002c5a:	461d      	mov	r5, r3
 8002c5c:	4643      	mov	r3, r8
 8002c5e:	18e3      	adds	r3, r4, r3
 8002c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c64:	464b      	mov	r3, r9
 8002c66:	eb45 0303 	adc.w	r3, r5, r3
 8002c6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	008b      	lsls	r3, r1, #2
 8002c8e:	4621      	mov	r1, r4
 8002c90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c94:	4621      	mov	r1, r4
 8002c96:	008a      	lsls	r2, r1, #2
 8002c98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c9c:	f7fd fb08 	bl	80002b0 <__aeabi_uldivmod>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4b60      	ldr	r3, [pc, #384]	@ (8002e28 <UART_SetConfig+0x4e4>)
 8002ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	011c      	lsls	r4, r3, #4
 8002cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002cc0:	4642      	mov	r2, r8
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	1891      	adds	r1, r2, r2
 8002cc6:	61b9      	str	r1, [r7, #24]
 8002cc8:	415b      	adcs	r3, r3
 8002cca:	61fb      	str	r3, [r7, #28]
 8002ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd0:	4641      	mov	r1, r8
 8002cd2:	1851      	adds	r1, r2, r1
 8002cd4:	6139      	str	r1, [r7, #16]
 8002cd6:	4649      	mov	r1, r9
 8002cd8:	414b      	adcs	r3, r1
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ce8:	4659      	mov	r1, fp
 8002cea:	00cb      	lsls	r3, r1, #3
 8002cec:	4651      	mov	r1, sl
 8002cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cf2:	4651      	mov	r1, sl
 8002cf4:	00ca      	lsls	r2, r1, #3
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4642      	mov	r2, r8
 8002cfe:	189b      	adds	r3, r3, r2
 8002d00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d04:	464b      	mov	r3, r9
 8002d06:	460a      	mov	r2, r1
 8002d08:	eb42 0303 	adc.w	r3, r2, r3
 8002d0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d28:	4649      	mov	r1, r9
 8002d2a:	008b      	lsls	r3, r1, #2
 8002d2c:	4641      	mov	r1, r8
 8002d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d32:	4641      	mov	r1, r8
 8002d34:	008a      	lsls	r2, r1, #2
 8002d36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d3a:	f7fd fab9 	bl	80002b0 <__aeabi_uldivmod>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4611      	mov	r1, r2
 8002d44:	4b38      	ldr	r3, [pc, #224]	@ (8002e28 <UART_SetConfig+0x4e4>)
 8002d46:	fba3 2301 	umull	r2, r3, r3, r1
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2264      	movs	r2, #100	@ 0x64
 8002d4e:	fb02 f303 	mul.w	r3, r2, r3
 8002d52:	1acb      	subs	r3, r1, r3
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	3332      	adds	r3, #50	@ 0x32
 8002d58:	4a33      	ldr	r2, [pc, #204]	@ (8002e28 <UART_SetConfig+0x4e4>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d64:	441c      	add	r4, r3
 8002d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d74:	4642      	mov	r2, r8
 8002d76:	464b      	mov	r3, r9
 8002d78:	1891      	adds	r1, r2, r2
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	415b      	adcs	r3, r3
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d84:	4641      	mov	r1, r8
 8002d86:	1851      	adds	r1, r2, r1
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	4649      	mov	r1, r9
 8002d8c:	414b      	adcs	r3, r1
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d9c:	4659      	mov	r1, fp
 8002d9e:	00cb      	lsls	r3, r1, #3
 8002da0:	4651      	mov	r1, sl
 8002da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002da6:	4651      	mov	r1, sl
 8002da8:	00ca      	lsls	r2, r1, #3
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	4603      	mov	r3, r0
 8002db0:	4642      	mov	r2, r8
 8002db2:	189b      	adds	r3, r3, r2
 8002db4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002db6:	464b      	mov	r3, r9
 8002db8:	460a      	mov	r2, r1
 8002dba:	eb42 0303 	adc.w	r3, r2, r3
 8002dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dca:	667a      	str	r2, [r7, #100]	@ 0x64
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002dd8:	4649      	mov	r1, r9
 8002dda:	008b      	lsls	r3, r1, #2
 8002ddc:	4641      	mov	r1, r8
 8002dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002de2:	4641      	mov	r1, r8
 8002de4:	008a      	lsls	r2, r1, #2
 8002de6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002dea:	f7fd fa61 	bl	80002b0 <__aeabi_uldivmod>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e28 <UART_SetConfig+0x4e4>)
 8002df4:	fba3 1302 	umull	r1, r3, r3, r2
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	2164      	movs	r1, #100	@ 0x64
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	3332      	adds	r3, #50	@ 0x32
 8002e06:	4a08      	ldr	r2, [pc, #32]	@ (8002e28 <UART_SetConfig+0x4e4>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	095b      	lsrs	r3, r3, #5
 8002e0e:	f003 020f 	and.w	r2, r3, #15
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4422      	add	r2, r4
 8002e1a:	609a      	str	r2, [r3, #8]
}
 8002e1c:	bf00      	nop
 8002e1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e22:	46bd      	mov	sp, r7
 8002e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e28:	51eb851f 	.word	0x51eb851f

08002e2c <__NVIC_SetPriority>:
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	6039      	str	r1, [r7, #0]
 8002e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	db0a      	blt.n	8002e56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	490c      	ldr	r1, [pc, #48]	@ (8002e78 <__NVIC_SetPriority+0x4c>)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	0112      	lsls	r2, r2, #4
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	440b      	add	r3, r1
 8002e50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002e54:	e00a      	b.n	8002e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4908      	ldr	r1, [pc, #32]	@ (8002e7c <__NVIC_SetPriority+0x50>)
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	3b04      	subs	r3, #4
 8002e64:	0112      	lsls	r2, r2, #4
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	440b      	add	r3, r1
 8002e6a:	761a      	strb	r2, [r3, #24]
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000e100 	.word	0xe000e100
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002e84:	4b05      	ldr	r3, [pc, #20]	@ (8002e9c <SysTick_Handler+0x1c>)
 8002e86:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002e88:	f001 ffd4 	bl	8004e34 <xTaskGetSchedulerState>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d001      	beq.n	8002e96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002e92:	f002 fdc9 	bl	8005a28 <xPortSysTickHandler>
  }
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	e000e010 	.word	0xe000e010

08002ea0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	f06f 0004 	mvn.w	r0, #4
 8002eaa:	f7ff ffbf 	bl	8002e2c <__NVIC_SetPriority>
#endif
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eba:	f3ef 8305 	mrs	r3, IPSR
 8002ebe:	603b      	str	r3, [r7, #0]
  return(result);
 8002ec0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002ec6:	f06f 0305 	mvn.w	r3, #5
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	e00c      	b.n	8002ee8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ece:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <osKernelInitialize+0x44>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002ed6:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <osKernelInitialize+0x44>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	607b      	str	r3, [r7, #4]
 8002ee0:	e002      	b.n	8002ee8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ee8:	687b      	ldr	r3, [r7, #4]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	2000013c 	.word	0x2000013c

08002efc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f02:	f3ef 8305 	mrs	r3, IPSR
 8002f06:	603b      	str	r3, [r7, #0]
  return(result);
 8002f08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002f0e:	f06f 0305 	mvn.w	r3, #5
 8002f12:	607b      	str	r3, [r7, #4]
 8002f14:	e010      	b.n	8002f38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f16:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <osKernelStart+0x48>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d109      	bne.n	8002f32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002f1e:	f7ff ffbf 	bl	8002ea0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002f22:	4b08      	ldr	r3, [pc, #32]	@ (8002f44 <osKernelStart+0x48>)
 8002f24:	2202      	movs	r2, #2
 8002f26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002f28:	f001 fb36 	bl	8004598 <vTaskStartScheduler>
      stat = osOK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	607b      	str	r3, [r7, #4]
 8002f30:	e002      	b.n	8002f38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
 8002f36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f38:	687b      	ldr	r3, [r7, #4]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	2000013c 	.word	0x2000013c

08002f48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08e      	sub	sp, #56	@ 0x38
 8002f4c:	af04      	add	r7, sp, #16
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f58:	f3ef 8305 	mrs	r3, IPSR
 8002f5c:	617b      	str	r3, [r7, #20]
  return(result);
 8002f5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d17e      	bne.n	8003062 <osThreadNew+0x11a>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d07b      	beq.n	8003062 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002f6a:	2380      	movs	r3, #128	@ 0x80
 8002f6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002f6e:	2318      	movs	r3, #24
 8002f70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d045      	beq.n	800300e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <osThreadNew+0x48>
        name = attr->name;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <osThreadNew+0x6e>
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	2b38      	cmp	r3, #56	@ 0x38
 8002fa8:	d805      	bhi.n	8002fb6 <osThreadNew+0x6e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <osThreadNew+0x72>
        return (NULL);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e054      	b.n	8003064 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00e      	beq.n	8002ff0 <osThreadNew+0xa8>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b5b      	cmp	r3, #91	@ 0x5b
 8002fd8:	d90a      	bls.n	8002ff0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d006      	beq.n	8002ff0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <osThreadNew+0xa8>
        mem = 1;
 8002fea:	2301      	movs	r3, #1
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	e010      	b.n	8003012 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10c      	bne.n	8003012 <osThreadNew+0xca>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d108      	bne.n	8003012 <osThreadNew+0xca>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d104      	bne.n	8003012 <osThreadNew+0xca>
          mem = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	e001      	b.n	8003012 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d110      	bne.n	800303a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003020:	9202      	str	r2, [sp, #8]
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	6a3a      	ldr	r2, [r7, #32]
 800302c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f001 f8d6 	bl	80041e0 <xTaskCreateStatic>
 8003034:	4603      	mov	r3, r0
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	e013      	b.n	8003062 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d110      	bne.n	8003062 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	b29a      	uxth	r2, r3
 8003044:	f107 0310 	add.w	r3, r7, #16
 8003048:	9301      	str	r3, [sp, #4]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	9300      	str	r3, [sp, #0]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f001 f924 	bl	80042a0 <xTaskCreate>
 8003058:	4603      	mov	r3, r0
 800305a:	2b01      	cmp	r3, #1
 800305c:	d001      	beq.n	8003062 <osThreadNew+0x11a>
            hTask = NULL;
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003062:	693b      	ldr	r3, [r7, #16]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3728      	adds	r7, #40	@ 0x28
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003074:	f3ef 8305 	mrs	r3, IPSR
 8003078:	60bb      	str	r3, [r7, #8]
  return(result);
 800307a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <osDelay+0x1c>
    stat = osErrorISR;
 8003080:	f06f 0305 	mvn.w	r3, #5
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	e007      	b.n	8003098 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f001 fa4a 	bl	800452c <vTaskDelay>
    }
  }

  return (stat);
 8003098:	68fb      	ldr	r3, [r7, #12]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b08a      	sub	sp, #40	@ 0x28
 80030a6:	af02      	add	r7, sp, #8
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030b2:	f3ef 8305 	mrs	r3, IPSR
 80030b6:	613b      	str	r3, [r7, #16]
  return(result);
 80030b8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d15f      	bne.n	800317e <osMessageQueueNew+0xdc>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d05c      	beq.n	800317e <osMessageQueueNew+0xdc>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d059      	beq.n	800317e <osMessageQueueNew+0xdc>
    mem = -1;
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
 80030ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d029      	beq.n	800312a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d012      	beq.n	8003104 <osMessageQueueNew+0x62>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b4f      	cmp	r3, #79	@ 0x4f
 80030e4:	d90e      	bls.n	8003104 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <osMessageQueueNew+0x62>
        mem = 1;
 80030fe:	2301      	movs	r3, #1
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	e014      	b.n	800312e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d110      	bne.n	800312e <osMessageQueueNew+0x8c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10c      	bne.n	800312e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003118:	2b00      	cmp	r3, #0
 800311a:	d108      	bne.n	800312e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d104      	bne.n	800312e <osMessageQueueNew+0x8c>
          mem = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	61bb      	str	r3, [r7, #24]
 8003128:	e001      	b.n	800312e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d10b      	bne.n	800314c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2100      	movs	r1, #0
 800313e:	9100      	str	r1, [sp, #0]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 fa9c 	bl	8003680 <xQueueGenericCreateStatic>
 8003148:	61f8      	str	r0, [r7, #28]
 800314a:	e008      	b.n	800315e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d105      	bne.n	800315e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003152:	2200      	movs	r2, #0
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fb0f 	bl	800377a <xQueueGenericCreate>
 800315c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00c      	beq.n	800317e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <osMessageQueueNew+0xd0>
        name = attr->name;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	e001      	b.n	8003176 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003176:	6979      	ldr	r1, [r7, #20]
 8003178:	69f8      	ldr	r0, [r7, #28]
 800317a:	f000 ffd3 	bl	8004124 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800317e:	69fb      	ldr	r3, [r7, #28]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	4613      	mov	r3, r2
 8003196:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800319c:	2300      	movs	r3, #0
 800319e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031a0:	f3ef 8305 	mrs	r3, IPSR
 80031a4:	617b      	str	r3, [r7, #20]
  return(result);
 80031a6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d028      	beq.n	80031fe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <osMessageQueuePut+0x36>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <osMessageQueuePut+0x36>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80031be:	f06f 0303 	mvn.w	r3, #3
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	e038      	b.n	8003238 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80031ca:	f107 0210 	add.w	r2, r7, #16
 80031ce:	2300      	movs	r3, #0
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	69b8      	ldr	r0, [r7, #24]
 80031d4:	f000 fc32 	bl	8003a3c <xQueueGenericSendFromISR>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d003      	beq.n	80031e6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80031de:	f06f 0302 	mvn.w	r3, #2
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	e028      	b.n	8003238 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d025      	beq.n	8003238 <osMessageQueuePut+0xb0>
 80031ec:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <osMessageQueuePut+0xbc>)
 80031ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	e01c      	b.n	8003238 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <osMessageQueuePut+0x82>
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d103      	bne.n	8003212 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800320a:	f06f 0303 	mvn.w	r3, #3
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	e012      	b.n	8003238 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003212:	2300      	movs	r3, #0
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	69b8      	ldr	r0, [r7, #24]
 800321a:	f000 fb0d 	bl	8003838 <xQueueGenericSend>
 800321e:	4603      	mov	r3, r0
 8003220:	2b01      	cmp	r3, #1
 8003222:	d009      	beq.n	8003238 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800322a:	f06f 0301 	mvn.w	r3, #1
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	e002      	b.n	8003238 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003232:	f06f 0302 	mvn.w	r3, #2
 8003236:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003238:	69fb      	ldr	r3, [r7, #28]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	e000ed04 	.word	0xe000ed04

08003248 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800325e:	f3ef 8305 	mrs	r3, IPSR
 8003262:	617b      	str	r3, [r7, #20]
  return(result);
 8003264:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003266:	2b00      	cmp	r3, #0
 8003268:	d028      	beq.n	80032bc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <osMessageQueueGet+0x34>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <osMessageQueueGet+0x34>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800327c:	f06f 0303 	mvn.w	r3, #3
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	e037      	b.n	80032f4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003284:	2300      	movs	r3, #0
 8003286:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003288:	f107 0310 	add.w	r3, r7, #16
 800328c:	461a      	mov	r2, r3
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	69b8      	ldr	r0, [r7, #24]
 8003292:	f000 fd53 	bl	8003d3c <xQueueReceiveFromISR>
 8003296:	4603      	mov	r3, r0
 8003298:	2b01      	cmp	r3, #1
 800329a:	d003      	beq.n	80032a4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800329c:	f06f 0302 	mvn.w	r3, #2
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	e027      	b.n	80032f4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d024      	beq.n	80032f4 <osMessageQueueGet+0xac>
 80032aa:	4b15      	ldr	r3, [pc, #84]	@ (8003300 <osMessageQueueGet+0xb8>)
 80032ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	e01b      	b.n	80032f4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <osMessageQueueGet+0x80>
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d103      	bne.n	80032d0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80032c8:	f06f 0303 	mvn.w	r3, #3
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	e011      	b.n	80032f4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	69b8      	ldr	r0, [r7, #24]
 80032d6:	f000 fc4f 	bl	8003b78 <xQueueReceive>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d009      	beq.n	80032f4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80032e6:	f06f 0301 	mvn.w	r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	e002      	b.n	80032f4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80032ee:	f06f 0302 	mvn.w	r3, #2
 80032f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80032f4:	69fb      	ldr	r3, [r7, #28]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	e000ed04 	.word	0xe000ed04

08003304 <osMessageQueueGetCapacity>:

uint32_t osMessageQueueGetCapacity (osMessageQueueId_t mq_id) {
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	60bb      	str	r3, [r7, #8]
  uint32_t capacity;

  if (mq == NULL) {
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <osMessageQueueGetCapacity+0x18>
    capacity = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e002      	b.n	8003322 <osMessageQueueGetCapacity+0x1e>
  } else {
    /* capacity = pxQueue->uxLength */
    capacity = mq->uxDummy4[1];
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003320:	60fb      	str	r3, [r7, #12]
  }

  return (capacity);
 8003322:	68fb      	ldr	r3, [r7, #12]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <osMessageQueueGetCount+0x18>
    count = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	e00e      	b.n	8003366 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003348:	f3ef 8305 	mrs	r3, IPSR
 800334c:	60fb      	str	r3, [r7, #12]
  return(result);
 800334e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003350:	2b00      	cmp	r3, #0
 8003352:	d004      	beq.n	800335e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8003354:	6938      	ldr	r0, [r7, #16]
 8003356:	f000 fdb6 	bl	8003ec6 <uxQueueMessagesWaitingFromISR>
 800335a:	6178      	str	r0, [r7, #20]
 800335c:	e003      	b.n	8003366 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800335e:	6938      	ldr	r0, [r7, #16]
 8003360:	f000 fd6e 	bl	8003e40 <uxQueueMessagesWaiting>
 8003364:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8003366:	697b      	ldr	r3, [r7, #20]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <osMessageQueueGetSpace>:

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	@ 0x28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <osMessageQueueGetSpace+0x18>
    space = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24
 8003386:	e023      	b.n	80033d0 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003388:	f3ef 8305 	mrs	r3, IPSR
 800338c:	61bb      	str	r3, [r7, #24]
  return(result);
 800338e:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8003390:	2b00      	cmp	r3, #0
 8003392:	d019      	beq.n	80033c8 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003394:	f3ef 8211 	mrs	r2, BASEPRI
 8003398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	613a      	str	r2, [r7, #16]
 80033aa:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80033ac:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 80033ae:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80033c6:	e003      	b.n	80033d0 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 80033c8:	6a38      	ldr	r0, [r7, #32]
 80033ca:	f000 fd58 	bl	8003e7e <uxQueueSpacesAvailable>
 80033ce:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 80033d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3728      	adds	r7, #40	@ 0x28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a07      	ldr	r2, [pc, #28]	@ (8003408 <vApplicationGetIdleTaskMemory+0x2c>)
 80033ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4a06      	ldr	r2, [pc, #24]	@ (800340c <vApplicationGetIdleTaskMemory+0x30>)
 80033f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2280      	movs	r2, #128	@ 0x80
 80033f8:	601a      	str	r2, [r3, #0]
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	20000140 	.word	0x20000140
 800340c:	2000019c 	.word	0x2000019c

08003410 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a07      	ldr	r2, [pc, #28]	@ (800343c <vApplicationGetTimerTaskMemory+0x2c>)
 8003420:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	4a06      	ldr	r2, [pc, #24]	@ (8003440 <vApplicationGetTimerTaskMemory+0x30>)
 8003426:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800342e:	601a      	str	r2, [r3, #0]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	2000039c 	.word	0x2000039c
 8003440:	200003f8 	.word	0x200003f8

08003444 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f103 0208 	add.w	r2, r3, #8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f04f 32ff 	mov.w	r2, #4294967295
 800345c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f103 0208 	add.w	r2, r3, #8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f103 0208 	add.w	r2, r3, #8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800349e:	b480      	push	{r7}
 80034a0:	b085      	sub	sp, #20
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	601a      	str	r2, [r3, #0]
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034e6:	b480      	push	{r7}
 80034e8:	b085      	sub	sp, #20
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fc:	d103      	bne.n	8003506 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e00c      	b.n	8003520 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3308      	adds	r3, #8
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	e002      	b.n	8003514 <vListInsert+0x2e>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	d2f6      	bcs.n	800350e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	601a      	str	r2, [r3, #0]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6892      	ldr	r2, [r2, #8]
 800356e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6852      	ldr	r2, [r2, #4]
 8003578:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	429a      	cmp	r2, r3
 8003582:	d103      	bne.n	800358c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	1e5a      	subs	r2, r3, #1
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10b      	bne.n	80035d8 <xQueueGenericReset+0x2c>
	__asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	60bb      	str	r3, [r7, #8]
}
 80035d2:	bf00      	nop
 80035d4:	bf00      	nop
 80035d6:	e7fd      	b.n	80035d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035d8:	f002 f996 	bl	8005908 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e4:	68f9      	ldr	r1, [r7, #12]
 80035e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	441a      	add	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003608:	3b01      	subs	r3, #1
 800360a:	68f9      	ldr	r1, [r7, #12]
 800360c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	441a      	add	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	22ff      	movs	r2, #255	@ 0xff
 800361c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	22ff      	movs	r2, #255	@ 0xff
 8003624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d114      	bne.n	8003658 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d01a      	beq.n	800366c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3310      	adds	r3, #16
 800363a:	4618      	mov	r0, r3
 800363c:	f001 fa3a 	bl	8004ab4 <xTaskRemoveFromEventList>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d012      	beq.n	800366c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003646:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <xQueueGenericReset+0xd0>)
 8003648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	e009      	b.n	800366c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	3310      	adds	r3, #16
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fef1 	bl	8003444 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3324      	adds	r3, #36	@ 0x24
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff feec 	bl	8003444 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800366c:	f002 f97e 	bl	800596c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003670:	2301      	movs	r3, #1
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	e000ed04 	.word	0xe000ed04

08003680 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08e      	sub	sp, #56	@ 0x38
 8003684:	af02      	add	r7, sp, #8
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10b      	bne.n	80036ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80036a6:	bf00      	nop
 80036a8:	bf00      	nop
 80036aa:	e7fd      	b.n	80036a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10b      	bne.n	80036ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	e7fd      	b.n	80036c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <xQueueGenericCreateStatic+0x56>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <xQueueGenericCreateStatic+0x5a>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <xQueueGenericCreateStatic+0x5c>
 80036da:	2300      	movs	r3, #0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10b      	bne.n	80036f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	623b      	str	r3, [r7, #32]
}
 80036f2:	bf00      	nop
 80036f4:	bf00      	nop
 80036f6:	e7fd      	b.n	80036f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <xQueueGenericCreateStatic+0x84>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <xQueueGenericCreateStatic+0x88>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <xQueueGenericCreateStatic+0x8a>
 8003708:	2300      	movs	r3, #0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	61fb      	str	r3, [r7, #28]
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	e7fd      	b.n	8003722 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003726:	2350      	movs	r3, #80	@ 0x50
 8003728:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b50      	cmp	r3, #80	@ 0x50
 800372e:	d00b      	beq.n	8003748 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	61bb      	str	r3, [r7, #24]
}
 8003742:	bf00      	nop
 8003744:	bf00      	nop
 8003746:	e7fd      	b.n	8003744 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003748:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800374e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800375c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	4613      	mov	r3, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68b9      	ldr	r1, [r7, #8]
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f840 	bl	80037f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003772:	4618      	mov	r0, r3
 8003774:	3730      	adds	r7, #48	@ 0x30
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800377a:	b580      	push	{r7, lr}
 800377c:	b08a      	sub	sp, #40	@ 0x28
 800377e:	af02      	add	r7, sp, #8
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	4613      	mov	r3, r2
 8003786:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	613b      	str	r3, [r7, #16]
}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	e7fd      	b.n	80037a2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3350      	adds	r3, #80	@ 0x50
 80037b4:	4618      	mov	r0, r3
 80037b6:	f002 f9c9 	bl	8005b4c <pvPortMalloc>
 80037ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d011      	beq.n	80037e6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	3350      	adds	r3, #80	@ 0x50
 80037ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037d4:	79fa      	ldrb	r2, [r7, #7]
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	68b9      	ldr	r1, [r7, #8]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f805 	bl	80037f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037e6:	69bb      	ldr	r3, [r7, #24]
	}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3720      	adds	r7, #32
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d103      	bne.n	800380c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e002      	b.n	8003812 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800381e:	2101      	movs	r1, #1
 8003820:	69b8      	ldr	r0, [r7, #24]
 8003822:	f7ff fec3 	bl	80035ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08e      	sub	sp, #56	@ 0x38
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003846:	2300      	movs	r3, #0
 8003848:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10b      	bne.n	800386c <xQueueGenericSend+0x34>
	__asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	e7fd      	b.n	8003868 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d103      	bne.n	800387a <xQueueGenericSend+0x42>
 8003872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <xQueueGenericSend+0x46>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <xQueueGenericSend+0x48>
 800387e:	2300      	movs	r3, #0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <xQueueGenericSend+0x64>
	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	e7fd      	b.n	8003898 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d103      	bne.n	80038aa <xQueueGenericSend+0x72>
 80038a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <xQueueGenericSend+0x76>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <xQueueGenericSend+0x78>
 80038ae:	2300      	movs	r3, #0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10b      	bne.n	80038cc <xQueueGenericSend+0x94>
	__asm volatile
 80038b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	623b      	str	r3, [r7, #32]
}
 80038c6:	bf00      	nop
 80038c8:	bf00      	nop
 80038ca:	e7fd      	b.n	80038c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038cc:	f001 fab2 	bl	8004e34 <xTaskGetSchedulerState>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <xQueueGenericSend+0xa4>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <xQueueGenericSend+0xa8>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <xQueueGenericSend+0xaa>
 80038e0:	2300      	movs	r3, #0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10b      	bne.n	80038fe <xQueueGenericSend+0xc6>
	__asm volatile
 80038e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	61fb      	str	r3, [r7, #28]
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	e7fd      	b.n	80038fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038fe:	f002 f803 	bl	8005908 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390a:	429a      	cmp	r2, r3
 800390c:	d302      	bcc.n	8003914 <xQueueGenericSend+0xdc>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b02      	cmp	r3, #2
 8003912:	d129      	bne.n	8003968 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800391a:	f000 faf3 	bl	8003f04 <prvCopyDataToQueue>
 800391e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	3324      	adds	r3, #36	@ 0x24
 800392c:	4618      	mov	r0, r3
 800392e:	f001 f8c1 	bl	8004ab4 <xTaskRemoveFromEventList>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d013      	beq.n	8003960 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003938:	4b3f      	ldr	r3, [pc, #252]	@ (8003a38 <xQueueGenericSend+0x200>)
 800393a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	e00a      	b.n	8003960 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800394a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003950:	4b39      	ldr	r3, [pc, #228]	@ (8003a38 <xQueueGenericSend+0x200>)
 8003952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003960:	f002 f804 	bl	800596c <vPortExitCritical>
				return pdPASS;
 8003964:	2301      	movs	r3, #1
 8003966:	e063      	b.n	8003a30 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d103      	bne.n	8003976 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800396e:	f001 fffd 	bl	800596c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003972:	2300      	movs	r3, #0
 8003974:	e05c      	b.n	8003a30 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003978:	2b00      	cmp	r3, #0
 800397a:	d106      	bne.n	800398a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800397c:	f107 0314 	add.w	r3, r7, #20
 8003980:	4618      	mov	r0, r3
 8003982:	f001 f8fb 	bl	8004b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003986:	2301      	movs	r3, #1
 8003988:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800398a:	f001 ffef 	bl	800596c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800398e:	f000 fe6b 	bl	8004668 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003992:	f001 ffb9 	bl	8005908 <vPortEnterCritical>
 8003996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003998:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800399c:	b25b      	sxtb	r3, r3
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a2:	d103      	bne.n	80039ac <xQueueGenericSend+0x174>
 80039a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039b2:	b25b      	sxtb	r3, r3
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d103      	bne.n	80039c2 <xQueueGenericSend+0x18a>
 80039ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039c2:	f001 ffd3 	bl	800596c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039c6:	1d3a      	adds	r2, r7, #4
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	4611      	mov	r1, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 f8ea 	bl	8004ba8 <xTaskCheckForTimeOut>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d124      	bne.n	8003a24 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039dc:	f000 fb8a 	bl	80040f4 <prvIsQueueFull>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d018      	beq.n	8003a18 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e8:	3310      	adds	r3, #16
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	4611      	mov	r1, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 f80e 	bl	8004a10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039f6:	f000 fb15 	bl	8004024 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039fa:	f000 fe43 	bl	8004684 <xTaskResumeAll>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f47f af7c 	bne.w	80038fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003a06:	4b0c      	ldr	r3, [pc, #48]	@ (8003a38 <xQueueGenericSend+0x200>)
 8003a08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	e772      	b.n	80038fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a1a:	f000 fb03 	bl	8004024 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a1e:	f000 fe31 	bl	8004684 <xTaskResumeAll>
 8003a22:	e76c      	b.n	80038fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a26:	f000 fafd 	bl	8004024 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a2a:	f000 fe2b 	bl	8004684 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3738      	adds	r7, #56	@ 0x38
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	e000ed04 	.word	0xe000ed04

08003a3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b090      	sub	sp, #64	@ 0x40
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10b      	bne.n	8003a6c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
 8003a6a:	e7fd      	b.n	8003a68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d103      	bne.n	8003a7a <xQueueGenericSendFromISR+0x3e>
 8003a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <xQueueGenericSendFromISR+0x42>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <xQueueGenericSendFromISR+0x44>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a96:	bf00      	nop
 8003a98:	bf00      	nop
 8003a9a:	e7fd      	b.n	8003a98 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d103      	bne.n	8003aaa <xQueueGenericSendFromISR+0x6e>
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <xQueueGenericSendFromISR+0x72>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <xQueueGenericSendFromISR+0x74>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	623b      	str	r3, [r7, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	bf00      	nop
 8003aca:	e7fd      	b.n	8003ac8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003acc:	f001 fffc 	bl	8005ac8 <vPortValidateInterruptPriority>
	__asm volatile
 8003ad0:	f3ef 8211 	mrs	r2, BASEPRI
 8003ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad8:	f383 8811 	msr	BASEPRI, r3
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	61fa      	str	r2, [r7, #28]
 8003ae6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003aea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d302      	bcc.n	8003afe <xQueueGenericSendFromISR+0xc2>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d12f      	bne.n	8003b5e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003b14:	f000 f9f6 	bl	8003f04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b18:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b20:	d112      	bne.n	8003b48 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d016      	beq.n	8003b58 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2c:	3324      	adds	r3, #36	@ 0x24
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 ffc0 	bl	8004ab4 <xTaskRemoveFromEventList>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00e      	beq.n	8003b58 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e007      	b.n	8003b58 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	b25a      	sxtb	r2, r3
 8003b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003b5c:	e001      	b.n	8003b62 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b64:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f383 8811 	msr	BASEPRI, r3
}
 8003b6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3740      	adds	r7, #64	@ 0x40
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08c      	sub	sp, #48	@ 0x30
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b84:	2300      	movs	r3, #0
 8003b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10b      	bne.n	8003baa <xQueueReceive+0x32>
	__asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	623b      	str	r3, [r7, #32]
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
 8003ba8:	e7fd      	b.n	8003ba6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d103      	bne.n	8003bb8 <xQueueReceive+0x40>
 8003bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <xQueueReceive+0x44>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <xQueueReceive+0x46>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10b      	bne.n	8003bda <xQueueReceive+0x62>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	61fb      	str	r3, [r7, #28]
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	e7fd      	b.n	8003bd6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bda:	f001 f92b 	bl	8004e34 <xTaskGetSchedulerState>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <xQueueReceive+0x72>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <xQueueReceive+0x76>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <xQueueReceive+0x78>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10b      	bne.n	8003c0c <xQueueReceive+0x94>
	__asm volatile
 8003bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	61bb      	str	r3, [r7, #24]
}
 8003c06:	bf00      	nop
 8003c08:	bf00      	nop
 8003c0a:	e7fd      	b.n	8003c08 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c0c:	f001 fe7c 	bl	8005908 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01f      	beq.n	8003c5c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c20:	f000 f9da 	bl	8003fd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c26:	1e5a      	subs	r2, r3, #1
 8003c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00f      	beq.n	8003c54 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c36:	3310      	adds	r3, #16
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 ff3b 	bl	8004ab4 <xTaskRemoveFromEventList>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c44:	4b3c      	ldr	r3, [pc, #240]	@ (8003d38 <xQueueReceive+0x1c0>)
 8003c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c54:	f001 fe8a 	bl	800596c <vPortExitCritical>
				return pdPASS;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e069      	b.n	8003d30 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c62:	f001 fe83 	bl	800596c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e062      	b.n	8003d30 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d106      	bne.n	8003c7e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c70:	f107 0310 	add.w	r3, r7, #16
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 ff81 	bl	8004b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c7e:	f001 fe75 	bl	800596c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c82:	f000 fcf1 	bl	8004668 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c86:	f001 fe3f 	bl	8005908 <vPortEnterCritical>
 8003c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c90:	b25b      	sxtb	r3, r3
 8003c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c96:	d103      	bne.n	8003ca0 <xQueueReceive+0x128>
 8003c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ca6:	b25b      	sxtb	r3, r3
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d103      	bne.n	8003cb6 <xQueueReceive+0x13e>
 8003cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cb6:	f001 fe59 	bl	800596c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cba:	1d3a      	adds	r2, r7, #4
 8003cbc:	f107 0310 	add.w	r3, r7, #16
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 ff70 	bl	8004ba8 <xTaskCheckForTimeOut>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d123      	bne.n	8003d16 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cd0:	f000 f9fa 	bl	80040c8 <prvIsQueueEmpty>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d017      	beq.n	8003d0a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cdc:	3324      	adds	r3, #36	@ 0x24
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fe94 	bl	8004a10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ce8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cea:	f000 f99b 	bl	8004024 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cee:	f000 fcc9 	bl	8004684 <xTaskResumeAll>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d189      	bne.n	8003c0c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d38 <xQueueReceive+0x1c0>)
 8003cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	e780      	b.n	8003c0c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d0c:	f000 f98a 	bl	8004024 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d10:	f000 fcb8 	bl	8004684 <xTaskResumeAll>
 8003d14:	e77a      	b.n	8003c0c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d18:	f000 f984 	bl	8004024 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d1c:	f000 fcb2 	bl	8004684 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d22:	f000 f9d1 	bl	80040c8 <prvIsQueueEmpty>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f43f af6f 	beq.w	8003c0c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d2e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3730      	adds	r7, #48	@ 0x30
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	e000ed04 	.word	0xe000ed04

08003d3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08e      	sub	sp, #56	@ 0x38
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10b      	bne.n	8003d6a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	623b      	str	r3, [r7, #32]
}
 8003d64:	bf00      	nop
 8003d66:	bf00      	nop
 8003d68:	e7fd      	b.n	8003d66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d103      	bne.n	8003d78 <xQueueReceiveFromISR+0x3c>
 8003d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <xQueueReceiveFromISR+0x40>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <xQueueReceiveFromISR+0x42>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10b      	bne.n	8003d9a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	61fb      	str	r3, [r7, #28]
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	e7fd      	b.n	8003d96 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d9a:	f001 fe95 	bl	8005ac8 <vPortValidateInterruptPriority>
	__asm volatile
 8003d9e:	f3ef 8211 	mrs	r2, BASEPRI
 8003da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	61ba      	str	r2, [r7, #24]
 8003db4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003db6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d02f      	beq.n	8003e26 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003dd4:	f000 f900 	bl	8003fd8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dda:	1e5a      	subs	r2, r3, #1
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dde:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003de0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d112      	bne.n	8003e10 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d016      	beq.n	8003e20 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df4:	3310      	adds	r3, #16
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fe5c 	bl	8004ab4 <xTaskRemoveFromEventList>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00e      	beq.n	8003e20 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00b      	beq.n	8003e20 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	e007      	b.n	8003e20 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003e10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e14:	3301      	adds	r3, #1
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	b25a      	sxtb	r2, r3
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003e20:	2301      	movs	r3, #1
 8003e22:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e24:	e001      	b.n	8003e2a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f383 8811 	msr	BASEPRI, r3
}
 8003e34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3738      	adds	r7, #56	@ 0x38
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10b      	bne.n	8003e66 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	60bb      	str	r3, [r7, #8]
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	e7fd      	b.n	8003e62 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8003e66:	f001 fd4f 	bl	8005908 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003e70:	f001 fd7c 	bl	800596c <vPortExitCritical>

	return uxReturn;
 8003e74:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10b      	bne.n	8003ea8 <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	60fb      	str	r3, [r7, #12]
}
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
 8003ea6:	e7fd      	b.n	8003ea4 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8003ea8:	f001 fd2e 	bl	8005908 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8003eb8:	f001 fd58 	bl	800596c <vPortExitCritical>

	return uxReturn;
 8003ebc:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b087      	sub	sp, #28
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10b      	bne.n	8003ef0 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	60fb      	str	r3, [r7, #12]
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	e7fd      	b.n	8003eec <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8003ef6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003ef8:	4618      	mov	r0, r3
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10d      	bne.n	8003f3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d14d      	bne.n	8003fc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 ff9e 	bl	8004e70 <xTaskPriorityDisinherit>
 8003f34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	e043      	b.n	8003fc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d119      	bne.n	8003f78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6858      	ldr	r0, [r3, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	f002 fa6f 	bl	8006432 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5c:	441a      	add	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d32b      	bcc.n	8003fc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	e026      	b.n	8003fc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68d8      	ldr	r0, [r3, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	461a      	mov	r2, r3
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	f002 fa55 	bl	8006432 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	425b      	negs	r3, r3
 8003f92:	441a      	add	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d207      	bcs.n	8003fb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	425b      	negs	r3, r3
 8003fae:	441a      	add	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d105      	bne.n	8003fc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003fce:	697b      	ldr	r3, [r7, #20]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d018      	beq.n	800401c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	441a      	add	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	d303      	bcc.n	800400c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68d9      	ldr	r1, [r3, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	461a      	mov	r2, r3
 8004016:	6838      	ldr	r0, [r7, #0]
 8004018:	f002 fa0b 	bl	8006432 <memcpy>
	}
}
 800401c:	bf00      	nop
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800402c:	f001 fc6c 	bl	8005908 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004036:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004038:	e011      	b.n	800405e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403e:	2b00      	cmp	r3, #0
 8004040:	d012      	beq.n	8004068 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3324      	adds	r3, #36	@ 0x24
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fd34 	bl	8004ab4 <xTaskRemoveFromEventList>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004052:	f000 fe0d 	bl	8004c70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	3b01      	subs	r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800405e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004062:	2b00      	cmp	r3, #0
 8004064:	dce9      	bgt.n	800403a <prvUnlockQueue+0x16>
 8004066:	e000      	b.n	800406a <prvUnlockQueue+0x46>
					break;
 8004068:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	22ff      	movs	r2, #255	@ 0xff
 800406e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004072:	f001 fc7b 	bl	800596c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004076:	f001 fc47 	bl	8005908 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004080:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004082:	e011      	b.n	80040a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d012      	beq.n	80040b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3310      	adds	r3, #16
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fd0f 	bl	8004ab4 <xTaskRemoveFromEventList>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800409c:	f000 fde8 	bl	8004c70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040a0:	7bbb      	ldrb	r3, [r7, #14]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	dce9      	bgt.n	8004084 <prvUnlockQueue+0x60>
 80040b0:	e000      	b.n	80040b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	22ff      	movs	r2, #255	@ 0xff
 80040b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80040bc:	f001 fc56 	bl	800596c <vPortExitCritical>
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040d0:	f001 fc1a 	bl	8005908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d102      	bne.n	80040e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040dc:	2301      	movs	r3, #1
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e001      	b.n	80040e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040e6:	f001 fc41 	bl	800596c <vPortExitCritical>

	return xReturn;
 80040ea:	68fb      	ldr	r3, [r7, #12]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040fc:	f001 fc04 	bl	8005908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004108:	429a      	cmp	r2, r3
 800410a:	d102      	bne.n	8004112 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800410c:	2301      	movs	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	e001      	b.n	8004116 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004116:	f001 fc29 	bl	800596c <vPortExitCritical>

	return xReturn;
 800411a:	68fb      	ldr	r3, [r7, #12]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	e014      	b.n	800415e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004134:	4a0f      	ldr	r2, [pc, #60]	@ (8004174 <vQueueAddToRegistry+0x50>)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10b      	bne.n	8004158 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004140:	490c      	ldr	r1, [pc, #48]	@ (8004174 <vQueueAddToRegistry+0x50>)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800414a:	4a0a      	ldr	r2, [pc, #40]	@ (8004174 <vQueueAddToRegistry+0x50>)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4413      	add	r3, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004156:	e006      	b.n	8004166 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3301      	adds	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b07      	cmp	r3, #7
 8004162:	d9e7      	bls.n	8004134 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004164:	bf00      	nop
 8004166:	bf00      	nop
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	200007f8 	.word	0x200007f8

08004178 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004188:	f001 fbbe 	bl	8005908 <vPortEnterCritical>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004192:	b25b      	sxtb	r3, r3
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d103      	bne.n	80041a2 <vQueueWaitForMessageRestricted+0x2a>
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041a8:	b25b      	sxtb	r3, r3
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ae:	d103      	bne.n	80041b8 <vQueueWaitForMessageRestricted+0x40>
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041b8:	f001 fbd8 	bl	800596c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	3324      	adds	r3, #36	@ 0x24
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fc45 	bl	8004a5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041d2:	6978      	ldr	r0, [r7, #20]
 80041d4:	f7ff ff26 	bl	8004024 <prvUnlockQueue>
	}
 80041d8:	bf00      	nop
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08e      	sub	sp, #56	@ 0x38
 80041e4:	af04      	add	r7, sp, #16
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <xTaskCreateStatic+0x2c>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	623b      	str	r3, [r7, #32]
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800420c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10b      	bne.n	800422a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	61fb      	str	r3, [r7, #28]
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop
 8004228:	e7fd      	b.n	8004226 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800422a:	235c      	movs	r3, #92	@ 0x5c
 800422c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b5c      	cmp	r3, #92	@ 0x5c
 8004232:	d00b      	beq.n	800424c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	61bb      	str	r3, [r7, #24]
}
 8004246:	bf00      	nop
 8004248:	bf00      	nop
 800424a:	e7fd      	b.n	8004248 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800424c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800424e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01e      	beq.n	8004292 <xTaskCreateStatic+0xb2>
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01b      	beq.n	8004292 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800425a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004260:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004262:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	2202      	movs	r2, #2
 8004268:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800426c:	2300      	movs	r3, #0
 800426e:	9303      	str	r3, [sp, #12]
 8004270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004272:	9302      	str	r3, [sp, #8]
 8004274:	f107 0314 	add.w	r3, r7, #20
 8004278:	9301      	str	r3, [sp, #4]
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f850 	bl	800432a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800428a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800428c:	f000 f8de 	bl	800444c <prvAddNewTaskToReadyList>
 8004290:	e001      	b.n	8004296 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004296:	697b      	ldr	r3, [r7, #20]
	}
 8004298:	4618      	mov	r0, r3
 800429a:	3728      	adds	r7, #40	@ 0x28
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08c      	sub	sp, #48	@ 0x30
 80042a4:	af04      	add	r7, sp, #16
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	4613      	mov	r3, r2
 80042ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 fc49 	bl	8005b4c <pvPortMalloc>
 80042ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00e      	beq.n	80042e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042c2:	205c      	movs	r0, #92	@ 0x5c
 80042c4:	f001 fc42 	bl	8005b4c <pvPortMalloc>
 80042c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80042d6:	e005      	b.n	80042e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042d8:	6978      	ldr	r0, [r7, #20]
 80042da:	f001 fd05 	bl	8005ce8 <vPortFree>
 80042de:	e001      	b.n	80042e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d017      	beq.n	800431a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042f2:	88fa      	ldrh	r2, [r7, #6]
 80042f4:	2300      	movs	r3, #0
 80042f6:	9303      	str	r3, [sp, #12]
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	9302      	str	r3, [sp, #8]
 80042fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f80e 	bl	800432a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800430e:	69f8      	ldr	r0, [r7, #28]
 8004310:	f000 f89c 	bl	800444c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004314:	2301      	movs	r3, #1
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	e002      	b.n	8004320 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800431a:	f04f 33ff 	mov.w	r3, #4294967295
 800431e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004320:	69bb      	ldr	r3, [r7, #24]
	}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b088      	sub	sp, #32
 800432e:	af00      	add	r7, sp, #0
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
 8004336:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	461a      	mov	r2, r3
 8004342:	21a5      	movs	r1, #165	@ 0xa5
 8004344:	f001 fffa 	bl	800633c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004352:	3b01      	subs	r3, #1
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	f023 0307 	bic.w	r3, r3, #7
 8004360:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00b      	beq.n	8004384 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	617b      	str	r3, [r7, #20]
}
 800437e:	bf00      	nop
 8004380:	bf00      	nop
 8004382:	e7fd      	b.n	8004380 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01f      	beq.n	80043ca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800438a:	2300      	movs	r3, #0
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	e012      	b.n	80043b6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	7819      	ldrb	r1, [r3, #0]
 8004398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	3334      	adds	r3, #52	@ 0x34
 80043a0:	460a      	mov	r2, r1
 80043a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	4413      	add	r3, r2
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d006      	beq.n	80043be <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	3301      	adds	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	2b0f      	cmp	r3, #15
 80043ba:	d9e9      	bls.n	8004390 <prvInitialiseNewTask+0x66>
 80043bc:	e000      	b.n	80043c0 <prvInitialiseNewTask+0x96>
			{
				break;
 80043be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043c8:	e003      	b.n	80043d2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d4:	2b37      	cmp	r3, #55	@ 0x37
 80043d6:	d901      	bls.n	80043dc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043d8:	2337      	movs	r3, #55	@ 0x37
 80043da:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043e6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	2200      	movs	r2, #0
 80043ec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f0:	3304      	adds	r3, #4
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff f846 	bl	8003484 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fa:	3318      	adds	r3, #24
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff f841 	bl	8003484 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004404:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004406:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004416:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441a:	2200      	movs	r2, #0
 800441c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800441e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	68f9      	ldr	r1, [r7, #12]
 800442a:	69b8      	ldr	r0, [r7, #24]
 800442c:	f001 f93e 	bl	80056ac <pxPortInitialiseStack>
 8004430:	4602      	mov	r2, r0
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800443c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800443e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004442:	bf00      	nop
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004454:	f001 fa58 	bl	8005908 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004458:	4b2d      	ldr	r3, [pc, #180]	@ (8004510 <prvAddNewTaskToReadyList+0xc4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3301      	adds	r3, #1
 800445e:	4a2c      	ldr	r2, [pc, #176]	@ (8004510 <prvAddNewTaskToReadyList+0xc4>)
 8004460:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004462:	4b2c      	ldr	r3, [pc, #176]	@ (8004514 <prvAddNewTaskToReadyList+0xc8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800446a:	4a2a      	ldr	r2, [pc, #168]	@ (8004514 <prvAddNewTaskToReadyList+0xc8>)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004470:	4b27      	ldr	r3, [pc, #156]	@ (8004510 <prvAddNewTaskToReadyList+0xc4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d110      	bne.n	800449a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004478:	f000 fc1e 	bl	8004cb8 <prvInitialiseTaskLists>
 800447c:	e00d      	b.n	800449a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800447e:	4b26      	ldr	r3, [pc, #152]	@ (8004518 <prvAddNewTaskToReadyList+0xcc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d109      	bne.n	800449a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004486:	4b23      	ldr	r3, [pc, #140]	@ (8004514 <prvAddNewTaskToReadyList+0xc8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004490:	429a      	cmp	r2, r3
 8004492:	d802      	bhi.n	800449a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004494:	4a1f      	ldr	r2, [pc, #124]	@ (8004514 <prvAddNewTaskToReadyList+0xc8>)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800449a:	4b20      	ldr	r3, [pc, #128]	@ (800451c <prvAddNewTaskToReadyList+0xd0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3301      	adds	r3, #1
 80044a0:	4a1e      	ldr	r2, [pc, #120]	@ (800451c <prvAddNewTaskToReadyList+0xd0>)
 80044a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044a4:	4b1d      	ldr	r3, [pc, #116]	@ (800451c <prvAddNewTaskToReadyList+0xd0>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004520 <prvAddNewTaskToReadyList+0xd4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d903      	bls.n	80044c0 <prvAddNewTaskToReadyList+0x74>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044bc:	4a18      	ldr	r2, [pc, #96]	@ (8004520 <prvAddNewTaskToReadyList+0xd4>)
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4a15      	ldr	r2, [pc, #84]	@ (8004524 <prvAddNewTaskToReadyList+0xd8>)
 80044ce:	441a      	add	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3304      	adds	r3, #4
 80044d4:	4619      	mov	r1, r3
 80044d6:	4610      	mov	r0, r2
 80044d8:	f7fe ffe1 	bl	800349e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044dc:	f001 fa46 	bl	800596c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <prvAddNewTaskToReadyList+0xcc>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00e      	beq.n	8004506 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004514 <prvAddNewTaskToReadyList+0xc8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d207      	bcs.n	8004506 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004528 <prvAddNewTaskToReadyList+0xdc>)
 80044f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004506:	bf00      	nop
 8004508:	3708      	adds	r7, #8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20000d0c 	.word	0x20000d0c
 8004514:	20000838 	.word	0x20000838
 8004518:	20000d18 	.word	0x20000d18
 800451c:	20000d28 	.word	0x20000d28
 8004520:	20000d14 	.word	0x20000d14
 8004524:	2000083c 	.word	0x2000083c
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d018      	beq.n	8004570 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800453e:	4b14      	ldr	r3, [pc, #80]	@ (8004590 <vTaskDelay+0x64>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00b      	beq.n	800455e <vTaskDelay+0x32>
	__asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	60bb      	str	r3, [r7, #8]
}
 8004558:	bf00      	nop
 800455a:	bf00      	nop
 800455c:	e7fd      	b.n	800455a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800455e:	f000 f883 	bl	8004668 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004562:	2100      	movs	r1, #0
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fcf3 	bl	8004f50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800456a:	f000 f88b 	bl	8004684 <xTaskResumeAll>
 800456e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d107      	bne.n	8004586 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004576:	4b07      	ldr	r3, [pc, #28]	@ (8004594 <vTaskDelay+0x68>)
 8004578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000d34 	.word	0x20000d34
 8004594:	e000ed04 	.word	0xe000ed04

08004598 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08a      	sub	sp, #40	@ 0x28
 800459c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045a6:	463a      	mov	r2, r7
 80045a8:	1d39      	adds	r1, r7, #4
 80045aa:	f107 0308 	add.w	r3, r7, #8
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe ff14 	bl	80033dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045b4:	6839      	ldr	r1, [r7, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	9202      	str	r2, [sp, #8]
 80045bc:	9301      	str	r3, [sp, #4]
 80045be:	2300      	movs	r3, #0
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	2300      	movs	r3, #0
 80045c4:	460a      	mov	r2, r1
 80045c6:	4922      	ldr	r1, [pc, #136]	@ (8004650 <vTaskStartScheduler+0xb8>)
 80045c8:	4822      	ldr	r0, [pc, #136]	@ (8004654 <vTaskStartScheduler+0xbc>)
 80045ca:	f7ff fe09 	bl	80041e0 <xTaskCreateStatic>
 80045ce:	4603      	mov	r3, r0
 80045d0:	4a21      	ldr	r2, [pc, #132]	@ (8004658 <vTaskStartScheduler+0xc0>)
 80045d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045d4:	4b20      	ldr	r3, [pc, #128]	@ (8004658 <vTaskStartScheduler+0xc0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045dc:	2301      	movs	r3, #1
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	e001      	b.n	80045e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d102      	bne.n	80045f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045ec:	f000 fd04 	bl	8004ff8 <xTimerCreateTimerTask>
 80045f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d116      	bne.n	8004626 <vTaskStartScheduler+0x8e>
	__asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	613b      	str	r3, [r7, #16]
}
 800460a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800460c:	4b13      	ldr	r3, [pc, #76]	@ (800465c <vTaskStartScheduler+0xc4>)
 800460e:	f04f 32ff 	mov.w	r2, #4294967295
 8004612:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004614:	4b12      	ldr	r3, [pc, #72]	@ (8004660 <vTaskStartScheduler+0xc8>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800461a:	4b12      	ldr	r3, [pc, #72]	@ (8004664 <vTaskStartScheduler+0xcc>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004620:	f001 f8ce 	bl	80057c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004624:	e00f      	b.n	8004646 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462c:	d10b      	bne.n	8004646 <vTaskStartScheduler+0xae>
	__asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	60fb      	str	r3, [r7, #12]
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	e7fd      	b.n	8004642 <vTaskStartScheduler+0xaa>
}
 8004646:	bf00      	nop
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	08006f20 	.word	0x08006f20
 8004654:	08004c89 	.word	0x08004c89
 8004658:	20000d30 	.word	0x20000d30
 800465c:	20000d2c 	.word	0x20000d2c
 8004660:	20000d18 	.word	0x20000d18
 8004664:	20000d10 	.word	0x20000d10

08004668 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800466c:	4b04      	ldr	r3, [pc, #16]	@ (8004680 <vTaskSuspendAll+0x18>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3301      	adds	r3, #1
 8004672:	4a03      	ldr	r2, [pc, #12]	@ (8004680 <vTaskSuspendAll+0x18>)
 8004674:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004676:	bf00      	nop
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	20000d34 	.word	0x20000d34

08004684 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800468e:	2300      	movs	r3, #0
 8004690:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004692:	4b42      	ldr	r3, [pc, #264]	@ (800479c <xTaskResumeAll+0x118>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10b      	bne.n	80046b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	603b      	str	r3, [r7, #0]
}
 80046ac:	bf00      	nop
 80046ae:	bf00      	nop
 80046b0:	e7fd      	b.n	80046ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046b2:	f001 f929 	bl	8005908 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046b6:	4b39      	ldr	r3, [pc, #228]	@ (800479c <xTaskResumeAll+0x118>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	4a37      	ldr	r2, [pc, #220]	@ (800479c <xTaskResumeAll+0x118>)
 80046be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046c0:	4b36      	ldr	r3, [pc, #216]	@ (800479c <xTaskResumeAll+0x118>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d162      	bne.n	800478e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046c8:	4b35      	ldr	r3, [pc, #212]	@ (80047a0 <xTaskResumeAll+0x11c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d05e      	beq.n	800478e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046d0:	e02f      	b.n	8004732 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d2:	4b34      	ldr	r3, [pc, #208]	@ (80047a4 <xTaskResumeAll+0x120>)
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3318      	adds	r3, #24
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe ff3a 	bl	8003558 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3304      	adds	r3, #4
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe ff35 	bl	8003558 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f2:	4b2d      	ldr	r3, [pc, #180]	@ (80047a8 <xTaskResumeAll+0x124>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d903      	bls.n	8004702 <xTaskResumeAll+0x7e>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fe:	4a2a      	ldr	r2, [pc, #168]	@ (80047a8 <xTaskResumeAll+0x124>)
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4a27      	ldr	r2, [pc, #156]	@ (80047ac <xTaskResumeAll+0x128>)
 8004710:	441a      	add	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	3304      	adds	r3, #4
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f7fe fec0 	bl	800349e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004722:	4b23      	ldr	r3, [pc, #140]	@ (80047b0 <xTaskResumeAll+0x12c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004728:	429a      	cmp	r2, r3
 800472a:	d302      	bcc.n	8004732 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800472c:	4b21      	ldr	r3, [pc, #132]	@ (80047b4 <xTaskResumeAll+0x130>)
 800472e:	2201      	movs	r2, #1
 8004730:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004732:	4b1c      	ldr	r3, [pc, #112]	@ (80047a4 <xTaskResumeAll+0x120>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1cb      	bne.n	80046d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004740:	f000 fb58 	bl	8004df4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004744:	4b1c      	ldr	r3, [pc, #112]	@ (80047b8 <xTaskResumeAll+0x134>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d010      	beq.n	8004772 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004750:	f000 f846 	bl	80047e0 <xTaskIncrementTick>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800475a:	4b16      	ldr	r3, [pc, #88]	@ (80047b4 <xTaskResumeAll+0x130>)
 800475c:	2201      	movs	r2, #1
 800475e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3b01      	subs	r3, #1
 8004764:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1f1      	bne.n	8004750 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800476c:	4b12      	ldr	r3, [pc, #72]	@ (80047b8 <xTaskResumeAll+0x134>)
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004772:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <xTaskResumeAll+0x130>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800477a:	2301      	movs	r3, #1
 800477c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800477e:	4b0f      	ldr	r3, [pc, #60]	@ (80047bc <xTaskResumeAll+0x138>)
 8004780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800478e:	f001 f8ed 	bl	800596c <vPortExitCritical>

	return xAlreadyYielded;
 8004792:	68bb      	ldr	r3, [r7, #8]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000d34 	.word	0x20000d34
 80047a0:	20000d0c 	.word	0x20000d0c
 80047a4:	20000ccc 	.word	0x20000ccc
 80047a8:	20000d14 	.word	0x20000d14
 80047ac:	2000083c 	.word	0x2000083c
 80047b0:	20000838 	.word	0x20000838
 80047b4:	20000d20 	.word	0x20000d20
 80047b8:	20000d1c 	.word	0x20000d1c
 80047bc:	e000ed04 	.word	0xe000ed04

080047c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047c6:	4b05      	ldr	r3, [pc, #20]	@ (80047dc <xTaskGetTickCount+0x1c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80047cc:	687b      	ldr	r3, [r7, #4]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000d10 	.word	0x20000d10

080047e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004928 <xTaskIncrementTick+0x148>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f040 8090 	bne.w	8004914 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047f4:	4b4d      	ldr	r3, [pc, #308]	@ (800492c <xTaskIncrementTick+0x14c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3301      	adds	r3, #1
 80047fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047fc:	4a4b      	ldr	r2, [pc, #300]	@ (800492c <xTaskIncrementTick+0x14c>)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d121      	bne.n	800484c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004808:	4b49      	ldr	r3, [pc, #292]	@ (8004930 <xTaskIncrementTick+0x150>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00b      	beq.n	800482a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	603b      	str	r3, [r7, #0]
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	e7fd      	b.n	8004826 <xTaskIncrementTick+0x46>
 800482a:	4b41      	ldr	r3, [pc, #260]	@ (8004930 <xTaskIncrementTick+0x150>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	4b40      	ldr	r3, [pc, #256]	@ (8004934 <xTaskIncrementTick+0x154>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a3e      	ldr	r2, [pc, #248]	@ (8004930 <xTaskIncrementTick+0x150>)
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	4a3e      	ldr	r2, [pc, #248]	@ (8004934 <xTaskIncrementTick+0x154>)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	4b3e      	ldr	r3, [pc, #248]	@ (8004938 <xTaskIncrementTick+0x158>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3301      	adds	r3, #1
 8004844:	4a3c      	ldr	r2, [pc, #240]	@ (8004938 <xTaskIncrementTick+0x158>)
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	f000 fad4 	bl	8004df4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800484c:	4b3b      	ldr	r3, [pc, #236]	@ (800493c <xTaskIncrementTick+0x15c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	429a      	cmp	r2, r3
 8004854:	d349      	bcc.n	80048ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004856:	4b36      	ldr	r3, [pc, #216]	@ (8004930 <xTaskIncrementTick+0x150>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d104      	bne.n	800486a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004860:	4b36      	ldr	r3, [pc, #216]	@ (800493c <xTaskIncrementTick+0x15c>)
 8004862:	f04f 32ff 	mov.w	r2, #4294967295
 8004866:	601a      	str	r2, [r3, #0]
					break;
 8004868:	e03f      	b.n	80048ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486a:	4b31      	ldr	r3, [pc, #196]	@ (8004930 <xTaskIncrementTick+0x150>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	429a      	cmp	r2, r3
 8004880:	d203      	bcs.n	800488a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004882:	4a2e      	ldr	r2, [pc, #184]	@ (800493c <xTaskIncrementTick+0x15c>)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004888:	e02f      	b.n	80048ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	3304      	adds	r3, #4
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe fe62 	bl	8003558 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	3318      	adds	r3, #24
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe fe59 	bl	8003558 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048aa:	4b25      	ldr	r3, [pc, #148]	@ (8004940 <xTaskIncrementTick+0x160>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d903      	bls.n	80048ba <xTaskIncrementTick+0xda>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b6:	4a22      	ldr	r2, [pc, #136]	@ (8004940 <xTaskIncrementTick+0x160>)
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004944 <xTaskIncrementTick+0x164>)
 80048c8:	441a      	add	r2, r3
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4619      	mov	r1, r3
 80048d0:	4610      	mov	r0, r2
 80048d2:	f7fe fde4 	bl	800349e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048da:	4b1b      	ldr	r3, [pc, #108]	@ (8004948 <xTaskIncrementTick+0x168>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d3b8      	bcc.n	8004856 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80048e4:	2301      	movs	r3, #1
 80048e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048e8:	e7b5      	b.n	8004856 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048ea:	4b17      	ldr	r3, [pc, #92]	@ (8004948 <xTaskIncrementTick+0x168>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f0:	4914      	ldr	r1, [pc, #80]	@ (8004944 <xTaskIncrementTick+0x164>)
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	440b      	add	r3, r1
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d901      	bls.n	8004906 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004902:	2301      	movs	r3, #1
 8004904:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004906:	4b11      	ldr	r3, [pc, #68]	@ (800494c <xTaskIncrementTick+0x16c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d007      	beq.n	800491e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800490e:	2301      	movs	r3, #1
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	e004      	b.n	800491e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004914:	4b0e      	ldr	r3, [pc, #56]	@ (8004950 <xTaskIncrementTick+0x170>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3301      	adds	r3, #1
 800491a:	4a0d      	ldr	r2, [pc, #52]	@ (8004950 <xTaskIncrementTick+0x170>)
 800491c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800491e:	697b      	ldr	r3, [r7, #20]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000d34 	.word	0x20000d34
 800492c:	20000d10 	.word	0x20000d10
 8004930:	20000cc4 	.word	0x20000cc4
 8004934:	20000cc8 	.word	0x20000cc8
 8004938:	20000d24 	.word	0x20000d24
 800493c:	20000d2c 	.word	0x20000d2c
 8004940:	20000d14 	.word	0x20000d14
 8004944:	2000083c 	.word	0x2000083c
 8004948:	20000838 	.word	0x20000838
 800494c:	20000d20 	.word	0x20000d20
 8004950:	20000d1c 	.word	0x20000d1c

08004954 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800495a:	4b28      	ldr	r3, [pc, #160]	@ (80049fc <vTaskSwitchContext+0xa8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004962:	4b27      	ldr	r3, [pc, #156]	@ (8004a00 <vTaskSwitchContext+0xac>)
 8004964:	2201      	movs	r2, #1
 8004966:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004968:	e042      	b.n	80049f0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800496a:	4b25      	ldr	r3, [pc, #148]	@ (8004a00 <vTaskSwitchContext+0xac>)
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004970:	4b24      	ldr	r3, [pc, #144]	@ (8004a04 <vTaskSwitchContext+0xb0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	e011      	b.n	800499c <vTaskSwitchContext+0x48>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10b      	bne.n	8004996 <vTaskSwitchContext+0x42>
	__asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	607b      	str	r3, [r7, #4]
}
 8004990:	bf00      	nop
 8004992:	bf00      	nop
 8004994:	e7fd      	b.n	8004992 <vTaskSwitchContext+0x3e>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3b01      	subs	r3, #1
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	491a      	ldr	r1, [pc, #104]	@ (8004a08 <vTaskSwitchContext+0xb4>)
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0e3      	beq.n	8004978 <vTaskSwitchContext+0x24>
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4a13      	ldr	r2, [pc, #76]	@ (8004a08 <vTaskSwitchContext+0xb4>)
 80049bc:	4413      	add	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	3308      	adds	r3, #8
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d104      	bne.n	80049e0 <vTaskSwitchContext+0x8c>
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	605a      	str	r2, [r3, #4]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	4a09      	ldr	r2, [pc, #36]	@ (8004a0c <vTaskSwitchContext+0xb8>)
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	4a06      	ldr	r2, [pc, #24]	@ (8004a04 <vTaskSwitchContext+0xb0>)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6013      	str	r3, [r2, #0]
}
 80049f0:	bf00      	nop
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	20000d34 	.word	0x20000d34
 8004a00:	20000d20 	.word	0x20000d20
 8004a04:	20000d14 	.word	0x20000d14
 8004a08:	2000083c 	.word	0x2000083c
 8004a0c:	20000838 	.word	0x20000838

08004a10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	60fb      	str	r3, [r7, #12]
}
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a38:	4b07      	ldr	r3, [pc, #28]	@ (8004a58 <vTaskPlaceOnEventList+0x48>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3318      	adds	r3, #24
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7fe fd50 	bl	80034e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a46:	2101      	movs	r1, #1
 8004a48:	6838      	ldr	r0, [r7, #0]
 8004a4a:	f000 fa81 	bl	8004f50 <prvAddCurrentTaskToDelayedList>
}
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000838 	.word	0x20000838

08004a5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10b      	bne.n	8004a86 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	617b      	str	r3, [r7, #20]
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	e7fd      	b.n	8004a82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a86:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3318      	adds	r3, #24
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f7fe fd05 	bl	800349e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a9e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	68b8      	ldr	r0, [r7, #8]
 8004aa4:	f000 fa54 	bl	8004f50 <prvAddCurrentTaskToDelayedList>
	}
 8004aa8:	bf00      	nop
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	20000838 	.word	0x20000838

08004ab4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10b      	bne.n	8004ae2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	60fb      	str	r3, [r7, #12]
}
 8004adc:	bf00      	nop
 8004ade:	bf00      	nop
 8004ae0:	e7fd      	b.n	8004ade <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3318      	adds	r3, #24
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe fd36 	bl	8003558 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aec:	4b1d      	ldr	r3, [pc, #116]	@ (8004b64 <xTaskRemoveFromEventList+0xb0>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d11d      	bne.n	8004b30 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fe fd2d 	bl	8003558 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b02:	4b19      	ldr	r3, [pc, #100]	@ (8004b68 <xTaskRemoveFromEventList+0xb4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d903      	bls.n	8004b12 <xTaskRemoveFromEventList+0x5e>
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0e:	4a16      	ldr	r2, [pc, #88]	@ (8004b68 <xTaskRemoveFromEventList+0xb4>)
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4a13      	ldr	r2, [pc, #76]	@ (8004b6c <xTaskRemoveFromEventList+0xb8>)
 8004b20:	441a      	add	r2, r3
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	3304      	adds	r3, #4
 8004b26:	4619      	mov	r1, r3
 8004b28:	4610      	mov	r0, r2
 8004b2a:	f7fe fcb8 	bl	800349e <vListInsertEnd>
 8004b2e:	e005      	b.n	8004b3c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	3318      	adds	r3, #24
 8004b34:	4619      	mov	r1, r3
 8004b36:	480e      	ldr	r0, [pc, #56]	@ (8004b70 <xTaskRemoveFromEventList+0xbc>)
 8004b38:	f7fe fcb1 	bl	800349e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b40:	4b0c      	ldr	r3, [pc, #48]	@ (8004b74 <xTaskRemoveFromEventList+0xc0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d905      	bls.n	8004b56 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b78 <xTaskRemoveFromEventList+0xc4>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e001      	b.n	8004b5a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b5a:	697b      	ldr	r3, [r7, #20]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000d34 	.word	0x20000d34
 8004b68:	20000d14 	.word	0x20000d14
 8004b6c:	2000083c 	.word	0x2000083c
 8004b70:	20000ccc 	.word	0x20000ccc
 8004b74:	20000838 	.word	0x20000838
 8004b78:	20000d20 	.word	0x20000d20

08004b7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b84:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <vTaskInternalSetTimeOutState+0x24>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ba4 <vTaskInternalSetTimeOutState+0x28>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	605a      	str	r2, [r3, #4]
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	20000d24 	.word	0x20000d24
 8004ba4:	20000d10 	.word	0x20000d10

08004ba8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10b      	bne.n	8004bd0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	613b      	str	r3, [r7, #16]
}
 8004bca:	bf00      	nop
 8004bcc:	bf00      	nop
 8004bce:	e7fd      	b.n	8004bcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10b      	bne.n	8004bee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	60fb      	str	r3, [r7, #12]
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	e7fd      	b.n	8004bea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004bee:	f000 fe8b 	bl	8005908 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8004c68 <xTaskCheckForTimeOut+0xc0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d102      	bne.n	8004c12 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	e023      	b.n	8004c5a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4b15      	ldr	r3, [pc, #84]	@ (8004c6c <xTaskCheckForTimeOut+0xc4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d007      	beq.n	8004c2e <xTaskCheckForTimeOut+0x86>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d302      	bcc.n	8004c2e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	61fb      	str	r3, [r7, #28]
 8004c2c:	e015      	b.n	8004c5a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d20b      	bcs.n	8004c50 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	1ad2      	subs	r2, r2, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff99 	bl	8004b7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	e004      	b.n	8004c5a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c56:	2301      	movs	r3, #1
 8004c58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c5a:	f000 fe87 	bl	800596c <vPortExitCritical>

	return xReturn;
 8004c5e:	69fb      	ldr	r3, [r7, #28]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3720      	adds	r7, #32
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	20000d10 	.word	0x20000d10
 8004c6c:	20000d24 	.word	0x20000d24

08004c70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c74:	4b03      	ldr	r3, [pc, #12]	@ (8004c84 <vTaskMissedYield+0x14>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	20000d20 	.word	0x20000d20

08004c88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c90:	f000 f852 	bl	8004d38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c94:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <prvIdleTask+0x28>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d9f9      	bls.n	8004c90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c9c:	4b05      	ldr	r3, [pc, #20]	@ (8004cb4 <prvIdleTask+0x2c>)
 8004c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cac:	e7f0      	b.n	8004c90 <prvIdleTask+0x8>
 8004cae:	bf00      	nop
 8004cb0:	2000083c 	.word	0x2000083c
 8004cb4:	e000ed04 	.word	0xe000ed04

08004cb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	e00c      	b.n	8004cde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4a12      	ldr	r2, [pc, #72]	@ (8004d18 <prvInitialiseTaskLists+0x60>)
 8004cd0:	4413      	add	r3, r2
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe fbb6 	bl	8003444 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b37      	cmp	r3, #55	@ 0x37
 8004ce2:	d9ef      	bls.n	8004cc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ce4:	480d      	ldr	r0, [pc, #52]	@ (8004d1c <prvInitialiseTaskLists+0x64>)
 8004ce6:	f7fe fbad 	bl	8003444 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cea:	480d      	ldr	r0, [pc, #52]	@ (8004d20 <prvInitialiseTaskLists+0x68>)
 8004cec:	f7fe fbaa 	bl	8003444 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cf0:	480c      	ldr	r0, [pc, #48]	@ (8004d24 <prvInitialiseTaskLists+0x6c>)
 8004cf2:	f7fe fba7 	bl	8003444 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cf6:	480c      	ldr	r0, [pc, #48]	@ (8004d28 <prvInitialiseTaskLists+0x70>)
 8004cf8:	f7fe fba4 	bl	8003444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cfc:	480b      	ldr	r0, [pc, #44]	@ (8004d2c <prvInitialiseTaskLists+0x74>)
 8004cfe:	f7fe fba1 	bl	8003444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d02:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <prvInitialiseTaskLists+0x78>)
 8004d04:	4a05      	ldr	r2, [pc, #20]	@ (8004d1c <prvInitialiseTaskLists+0x64>)
 8004d06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d08:	4b0a      	ldr	r3, [pc, #40]	@ (8004d34 <prvInitialiseTaskLists+0x7c>)
 8004d0a:	4a05      	ldr	r2, [pc, #20]	@ (8004d20 <prvInitialiseTaskLists+0x68>)
 8004d0c:	601a      	str	r2, [r3, #0]
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	2000083c 	.word	0x2000083c
 8004d1c:	20000c9c 	.word	0x20000c9c
 8004d20:	20000cb0 	.word	0x20000cb0
 8004d24:	20000ccc 	.word	0x20000ccc
 8004d28:	20000ce0 	.word	0x20000ce0
 8004d2c:	20000cf8 	.word	0x20000cf8
 8004d30:	20000cc4 	.word	0x20000cc4
 8004d34:	20000cc8 	.word	0x20000cc8

08004d38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d3e:	e019      	b.n	8004d74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d40:	f000 fde2 	bl	8005908 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d44:	4b10      	ldr	r3, [pc, #64]	@ (8004d88 <prvCheckTasksWaitingTermination+0x50>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fe fc01 	bl	8003558 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d56:	4b0d      	ldr	r3, [pc, #52]	@ (8004d8c <prvCheckTasksWaitingTermination+0x54>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d8c <prvCheckTasksWaitingTermination+0x54>)
 8004d5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d60:	4b0b      	ldr	r3, [pc, #44]	@ (8004d90 <prvCheckTasksWaitingTermination+0x58>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	4a0a      	ldr	r2, [pc, #40]	@ (8004d90 <prvCheckTasksWaitingTermination+0x58>)
 8004d68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d6a:	f000 fdff 	bl	800596c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f810 	bl	8004d94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d74:	4b06      	ldr	r3, [pc, #24]	@ (8004d90 <prvCheckTasksWaitingTermination+0x58>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e1      	bne.n	8004d40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000ce0 	.word	0x20000ce0
 8004d8c:	20000d0c 	.word	0x20000d0c
 8004d90:	20000cf4 	.word	0x20000cf4

08004d94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d108      	bne.n	8004db8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 ff9c 	bl	8005ce8 <vPortFree>
				vPortFree( pxTCB );
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 ff99 	bl	8005ce8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004db6:	e019      	b.n	8004dec <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d103      	bne.n	8004dca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 ff90 	bl	8005ce8 <vPortFree>
	}
 8004dc8:	e010      	b.n	8004dec <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d00b      	beq.n	8004dec <prvDeleteTCB+0x58>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	60fb      	str	r3, [r7, #12]
}
 8004de6:	bf00      	nop
 8004de8:	bf00      	nop
 8004dea:	e7fd      	b.n	8004de8 <prvDeleteTCB+0x54>
	}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8004e2c <prvResetNextTaskUnblockTime+0x38>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e04:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <prvResetNextTaskUnblockTime+0x3c>)
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e0c:	e008      	b.n	8004e20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e0e:	4b07      	ldr	r3, [pc, #28]	@ (8004e2c <prvResetNextTaskUnblockTime+0x38>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4a04      	ldr	r2, [pc, #16]	@ (8004e30 <prvResetNextTaskUnblockTime+0x3c>)
 8004e1e:	6013      	str	r3, [r2, #0]
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	20000cc4 	.word	0x20000cc4
 8004e30:	20000d2c 	.word	0x20000d2c

08004e34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <xTaskGetSchedulerState+0x34>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e42:	2301      	movs	r3, #1
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	e008      	b.n	8004e5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e48:	4b08      	ldr	r3, [pc, #32]	@ (8004e6c <xTaskGetSchedulerState+0x38>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d102      	bne.n	8004e56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e50:	2302      	movs	r3, #2
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	e001      	b.n	8004e5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e56:	2300      	movs	r3, #0
 8004e58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e5a:	687b      	ldr	r3, [r7, #4]
	}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	20000d18 	.word	0x20000d18
 8004e6c:	20000d34 	.word	0x20000d34

08004e70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d058      	beq.n	8004f38 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e86:	4b2f      	ldr	r3, [pc, #188]	@ (8004f44 <xTaskPriorityDisinherit+0xd4>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d00b      	beq.n	8004ea8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60fb      	str	r3, [r7, #12]
}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	e7fd      	b.n	8004ea4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10b      	bne.n	8004ec8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	60bb      	str	r3, [r7, #8]
}
 8004ec2:	bf00      	nop
 8004ec4:	bf00      	nop
 8004ec6:	e7fd      	b.n	8004ec4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ecc:	1e5a      	subs	r2, r3, #1
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d02c      	beq.n	8004f38 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d128      	bne.n	8004f38 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe fb34 	bl	8003558 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f08:	4b0f      	ldr	r3, [pc, #60]	@ (8004f48 <xTaskPriorityDisinherit+0xd8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d903      	bls.n	8004f18 <xTaskPriorityDisinherit+0xa8>
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f14:	4a0c      	ldr	r2, [pc, #48]	@ (8004f48 <xTaskPriorityDisinherit+0xd8>)
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4a09      	ldr	r2, [pc, #36]	@ (8004f4c <xTaskPriorityDisinherit+0xdc>)
 8004f26:	441a      	add	r2, r3
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f7fe fab5 	bl	800349e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f34:	2301      	movs	r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f38:	697b      	ldr	r3, [r7, #20]
	}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000838 	.word	0x20000838
 8004f48:	20000d14 	.word	0x20000d14
 8004f4c:	2000083c 	.word	0x2000083c

08004f50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f5a:	4b21      	ldr	r3, [pc, #132]	@ (8004fe0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f60:	4b20      	ldr	r3, [pc, #128]	@ (8004fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fe faf6 	bl	8003558 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d10a      	bne.n	8004f8a <prvAddCurrentTaskToDelayedList+0x3a>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d007      	beq.n	8004f8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4619      	mov	r1, r3
 8004f82:	4819      	ldr	r0, [pc, #100]	@ (8004fe8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f84:	f7fe fa8b 	bl	800349e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f88:	e026      	b.n	8004fd8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4413      	add	r3, r2
 8004f90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f92:	4b14      	ldr	r3, [pc, #80]	@ (8004fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d209      	bcs.n	8004fb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fa2:	4b12      	ldr	r3, [pc, #72]	@ (8004fec <prvAddCurrentTaskToDelayedList+0x9c>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f7fe fa99 	bl	80034e6 <vListInsert>
}
 8004fb4:	e010      	b.n	8004fd8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ff0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f7fe fa8f 	bl	80034e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d202      	bcs.n	8004fd8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004fd2:	4a08      	ldr	r2, [pc, #32]	@ (8004ff4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	6013      	str	r3, [r2, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	20000d10 	.word	0x20000d10
 8004fe4:	20000838 	.word	0x20000838
 8004fe8:	20000cf8 	.word	0x20000cf8
 8004fec:	20000cc8 	.word	0x20000cc8
 8004ff0:	20000cc4 	.word	0x20000cc4
 8004ff4:	20000d2c 	.word	0x20000d2c

08004ff8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08a      	sub	sp, #40	@ 0x28
 8004ffc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005002:	f000 fb13 	bl	800562c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005006:	4b1d      	ldr	r3, [pc, #116]	@ (800507c <xTimerCreateTimerTask+0x84>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d021      	beq.n	8005052 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005016:	1d3a      	adds	r2, r7, #4
 8005018:	f107 0108 	add.w	r1, r7, #8
 800501c:	f107 030c 	add.w	r3, r7, #12
 8005020:	4618      	mov	r0, r3
 8005022:	f7fe f9f5 	bl	8003410 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	9202      	str	r2, [sp, #8]
 800502e:	9301      	str	r3, [sp, #4]
 8005030:	2302      	movs	r3, #2
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	2300      	movs	r3, #0
 8005036:	460a      	mov	r2, r1
 8005038:	4911      	ldr	r1, [pc, #68]	@ (8005080 <xTimerCreateTimerTask+0x88>)
 800503a:	4812      	ldr	r0, [pc, #72]	@ (8005084 <xTimerCreateTimerTask+0x8c>)
 800503c:	f7ff f8d0 	bl	80041e0 <xTaskCreateStatic>
 8005040:	4603      	mov	r3, r0
 8005042:	4a11      	ldr	r2, [pc, #68]	@ (8005088 <xTimerCreateTimerTask+0x90>)
 8005044:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005046:	4b10      	ldr	r3, [pc, #64]	@ (8005088 <xTimerCreateTimerTask+0x90>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800504e:	2301      	movs	r3, #1
 8005050:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10b      	bne.n	8005070 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	613b      	str	r3, [r7, #16]
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	e7fd      	b.n	800506c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005070:	697b      	ldr	r3, [r7, #20]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000d68 	.word	0x20000d68
 8005080:	08006f28 	.word	0x08006f28
 8005084:	080051c5 	.word	0x080051c5
 8005088:	20000d6c 	.word	0x20000d6c

0800508c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	@ 0x28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800509a:	2300      	movs	r3, #0
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10b      	bne.n	80050bc <xTimerGenericCommand+0x30>
	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	623b      	str	r3, [r7, #32]
}
 80050b6:	bf00      	nop
 80050b8:	bf00      	nop
 80050ba:	e7fd      	b.n	80050b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80050bc:	4b19      	ldr	r3, [pc, #100]	@ (8005124 <xTimerGenericCommand+0x98>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d02a      	beq.n	800511a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b05      	cmp	r3, #5
 80050d4:	dc18      	bgt.n	8005108 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050d6:	f7ff fead 	bl	8004e34 <xTaskGetSchedulerState>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d109      	bne.n	80050f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80050e0:	4b10      	ldr	r3, [pc, #64]	@ (8005124 <xTimerGenericCommand+0x98>)
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	f107 0110 	add.w	r1, r7, #16
 80050e8:	2300      	movs	r3, #0
 80050ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ec:	f7fe fba4 	bl	8003838 <xQueueGenericSend>
 80050f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80050f2:	e012      	b.n	800511a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80050f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <xTimerGenericCommand+0x98>)
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	f107 0110 	add.w	r1, r7, #16
 80050fc:	2300      	movs	r3, #0
 80050fe:	2200      	movs	r2, #0
 8005100:	f7fe fb9a 	bl	8003838 <xQueueGenericSend>
 8005104:	6278      	str	r0, [r7, #36]	@ 0x24
 8005106:	e008      	b.n	800511a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005108:	4b06      	ldr	r3, [pc, #24]	@ (8005124 <xTimerGenericCommand+0x98>)
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	f107 0110 	add.w	r1, r7, #16
 8005110:	2300      	movs	r3, #0
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	f7fe fc92 	bl	8003a3c <xQueueGenericSendFromISR>
 8005118:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800511c:	4618      	mov	r0, r3
 800511e:	3728      	adds	r7, #40	@ 0x28
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	20000d68 	.word	0x20000d68

08005128 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b088      	sub	sp, #32
 800512c:	af02      	add	r7, sp, #8
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005132:	4b23      	ldr	r3, [pc, #140]	@ (80051c0 <prvProcessExpiredTimer+0x98>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3304      	adds	r3, #4
 8005140:	4618      	mov	r0, r3
 8005142:	f7fe fa09 	bl	8003558 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d023      	beq.n	800519c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	699a      	ldr	r2, [r3, #24]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	18d1      	adds	r1, r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	6978      	ldr	r0, [r7, #20]
 8005162:	f000 f8d5 	bl	8005310 <prvInsertTimerInActiveList>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d020      	beq.n	80051ae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800516c:	2300      	movs	r3, #0
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	2300      	movs	r3, #0
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	2100      	movs	r1, #0
 8005176:	6978      	ldr	r0, [r7, #20]
 8005178:	f7ff ff88 	bl	800508c <xTimerGenericCommand>
 800517c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d114      	bne.n	80051ae <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	60fb      	str	r3, [r7, #12]
}
 8005196:	bf00      	nop
 8005198:	bf00      	nop
 800519a:	e7fd      	b.n	8005198 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	6978      	ldr	r0, [r7, #20]
 80051b4:	4798      	blx	r3
}
 80051b6:	bf00      	nop
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000d60 	.word	0x20000d60

080051c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051cc:	f107 0308 	add.w	r3, r7, #8
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 f859 	bl	8005288 <prvGetNextExpireTime>
 80051d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4619      	mov	r1, r3
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f805 	bl	80051ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80051e2:	f000 f8d7 	bl	8005394 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051e6:	bf00      	nop
 80051e8:	e7f0      	b.n	80051cc <prvTimerTask+0x8>
	...

080051ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80051f6:	f7ff fa37 	bl	8004668 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051fa:	f107 0308 	add.w	r3, r7, #8
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f866 	bl	80052d0 <prvSampleTimeNow>
 8005204:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d130      	bne.n	800526e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <prvProcessTimerOrBlockTask+0x3c>
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	429a      	cmp	r2, r3
 8005218:	d806      	bhi.n	8005228 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800521a:	f7ff fa33 	bl	8004684 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7ff ff81 	bl	8005128 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005226:	e024      	b.n	8005272 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800522e:	4b13      	ldr	r3, [pc, #76]	@ (800527c <prvProcessTimerOrBlockTask+0x90>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <prvProcessTimerOrBlockTask+0x50>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <prvProcessTimerOrBlockTask+0x52>
 800523c:	2300      	movs	r3, #0
 800523e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005240:	4b0f      	ldr	r3, [pc, #60]	@ (8005280 <prvProcessTimerOrBlockTask+0x94>)
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	4619      	mov	r1, r3
 800524e:	f7fe ff93 	bl	8004178 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005252:	f7ff fa17 	bl	8004684 <xTaskResumeAll>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800525c:	4b09      	ldr	r3, [pc, #36]	@ (8005284 <prvProcessTimerOrBlockTask+0x98>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	f3bf 8f6f 	isb	sy
}
 800526c:	e001      	b.n	8005272 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800526e:	f7ff fa09 	bl	8004684 <xTaskResumeAll>
}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000d64 	.word	0x20000d64
 8005280:	20000d68 	.word	0x20000d68
 8005284:	e000ed04 	.word	0xe000ed04

08005288 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005290:	4b0e      	ldr	r3, [pc, #56]	@ (80052cc <prvGetNextExpireTime+0x44>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <prvGetNextExpireTime+0x16>
 800529a:	2201      	movs	r2, #1
 800529c:	e000      	b.n	80052a0 <prvGetNextExpireTime+0x18>
 800529e:	2200      	movs	r2, #0
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d105      	bne.n	80052b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052ac:	4b07      	ldr	r3, [pc, #28]	@ (80052cc <prvGetNextExpireTime+0x44>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	e001      	b.n	80052bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80052bc:	68fb      	ldr	r3, [r7, #12]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	20000d60 	.word	0x20000d60

080052d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80052d8:	f7ff fa72 	bl	80047c0 <xTaskGetTickCount>
 80052dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80052de:	4b0b      	ldr	r3, [pc, #44]	@ (800530c <prvSampleTimeNow+0x3c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d205      	bcs.n	80052f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80052e8:	f000 f93a 	bl	8005560 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e002      	b.n	80052fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80052fa:	4a04      	ldr	r2, [pc, #16]	@ (800530c <prvSampleTimeNow+0x3c>)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005300:	68fb      	ldr	r3, [r7, #12]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000d70 	.word	0x20000d70

08005310 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d812      	bhi.n	800535c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	1ad2      	subs	r2, r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	429a      	cmp	r2, r3
 8005342:	d302      	bcc.n	800534a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005344:	2301      	movs	r3, #1
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e01b      	b.n	8005382 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800534a:	4b10      	ldr	r3, [pc, #64]	@ (800538c <prvInsertTimerInActiveList+0x7c>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3304      	adds	r3, #4
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f7fe f8c6 	bl	80034e6 <vListInsert>
 800535a:	e012      	b.n	8005382 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d206      	bcs.n	8005372 <prvInsertTimerInActiveList+0x62>
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d302      	bcc.n	8005372 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800536c:	2301      	movs	r3, #1
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	e007      	b.n	8005382 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005372:	4b07      	ldr	r3, [pc, #28]	@ (8005390 <prvInsertTimerInActiveList+0x80>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3304      	adds	r3, #4
 800537a:	4619      	mov	r1, r3
 800537c:	4610      	mov	r0, r2
 800537e:	f7fe f8b2 	bl	80034e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005382:	697b      	ldr	r3, [r7, #20]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000d64 	.word	0x20000d64
 8005390:	20000d60 	.word	0x20000d60

08005394 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08e      	sub	sp, #56	@ 0x38
 8005398:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800539a:	e0ce      	b.n	800553a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	da19      	bge.n	80053d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80053a2:	1d3b      	adds	r3, r7, #4
 80053a4:	3304      	adds	r3, #4
 80053a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80053a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	61fb      	str	r3, [r7, #28]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80053c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053cc:	6850      	ldr	r0, [r2, #4]
 80053ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053d0:	6892      	ldr	r2, [r2, #8]
 80053d2:	4611      	mov	r1, r2
 80053d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f2c0 80ae 	blt.w	800553a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ec:	3304      	adds	r3, #4
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fe f8b2 	bl	8003558 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053f4:	463b      	mov	r3, r7
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff ff6a 	bl	80052d0 <prvSampleTimeNow>
 80053fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b09      	cmp	r3, #9
 8005402:	f200 8097 	bhi.w	8005534 <prvProcessReceivedCommands+0x1a0>
 8005406:	a201      	add	r2, pc, #4	@ (adr r2, 800540c <prvProcessReceivedCommands+0x78>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	08005435 	.word	0x08005435
 8005410:	08005435 	.word	0x08005435
 8005414:	08005435 	.word	0x08005435
 8005418:	080054ab 	.word	0x080054ab
 800541c:	080054bf 	.word	0x080054bf
 8005420:	0800550b 	.word	0x0800550b
 8005424:	08005435 	.word	0x08005435
 8005428:	08005435 	.word	0x08005435
 800542c:	080054ab 	.word	0x080054ab
 8005430:	080054bf 	.word	0x080054bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005436:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	b2da      	uxtb	r2, r3
 8005440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005442:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	18d1      	adds	r1, r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005454:	f7ff ff5c 	bl	8005310 <prvInsertTimerInActiveList>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d06c      	beq.n	8005538 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800545e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005464:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005468:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d061      	beq.n	8005538 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	441a      	add	r2, r3
 800547c:	2300      	movs	r3, #0
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	2300      	movs	r3, #0
 8005482:	2100      	movs	r1, #0
 8005484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005486:	f7ff fe01 	bl	800508c <xTimerGenericCommand>
 800548a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d152      	bne.n	8005538 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	61bb      	str	r3, [r7, #24]
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	e7fd      	b.n	80054a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054b0:	f023 0301 	bic.w	r3, r3, #1
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80054bc:	e03d      	b.n	800553a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10b      	bne.n	80054f6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	617b      	str	r3, [r7, #20]
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	e7fd      	b.n	80054f2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80054f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fc:	18d1      	adds	r1, r2, r3
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005504:	f7ff ff04 	bl	8005310 <prvInsertTimerInActiveList>
					break;
 8005508:	e017      	b.n	800553a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800550a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d103      	bne.n	8005520 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005518:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800551a:	f000 fbe5 	bl	8005ce8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800551e:	e00c      	b.n	800553a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005522:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	b2da      	uxtb	r2, r3
 800552c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005532:	e002      	b.n	800553a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005534:	bf00      	nop
 8005536:	e000      	b.n	800553a <prvProcessReceivedCommands+0x1a6>
					break;
 8005538:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800553a:	4b08      	ldr	r3, [pc, #32]	@ (800555c <prvProcessReceivedCommands+0x1c8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	1d39      	adds	r1, r7, #4
 8005540:	2200      	movs	r2, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f7fe fb18 	bl	8003b78 <xQueueReceive>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	f47f af26 	bne.w	800539c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	3730      	adds	r7, #48	@ 0x30
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000d68 	.word	0x20000d68

08005560 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005566:	e049      	b.n	80055fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005568:	4b2e      	ldr	r3, [pc, #184]	@ (8005624 <prvSwitchTimerLists+0xc4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005572:	4b2c      	ldr	r3, [pc, #176]	@ (8005624 <prvSwitchTimerLists+0xc4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3304      	adds	r3, #4
 8005580:	4618      	mov	r0, r3
 8005582:	f7fd ffe9 	bl	8003558 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d02f      	beq.n	80055fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4413      	add	r3, r2
 80055a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d90e      	bls.n	80055cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005624 <prvSwitchTimerLists+0xc4>)
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3304      	adds	r3, #4
 80055c2:	4619      	mov	r1, r3
 80055c4:	4610      	mov	r0, r2
 80055c6:	f7fd ff8e 	bl	80034e6 <vListInsert>
 80055ca:	e017      	b.n	80055fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055cc:	2300      	movs	r3, #0
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	2300      	movs	r3, #0
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	2100      	movs	r1, #0
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f7ff fd58 	bl	800508c <xTimerGenericCommand>
 80055dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10b      	bne.n	80055fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	603b      	str	r3, [r7, #0]
}
 80055f6:	bf00      	nop
 80055f8:	bf00      	nop
 80055fa:	e7fd      	b.n	80055f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055fc:	4b09      	ldr	r3, [pc, #36]	@ (8005624 <prvSwitchTimerLists+0xc4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1b0      	bne.n	8005568 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005606:	4b07      	ldr	r3, [pc, #28]	@ (8005624 <prvSwitchTimerLists+0xc4>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800560c:	4b06      	ldr	r3, [pc, #24]	@ (8005628 <prvSwitchTimerLists+0xc8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a04      	ldr	r2, [pc, #16]	@ (8005624 <prvSwitchTimerLists+0xc4>)
 8005612:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005614:	4a04      	ldr	r2, [pc, #16]	@ (8005628 <prvSwitchTimerLists+0xc8>)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	6013      	str	r3, [r2, #0]
}
 800561a:	bf00      	nop
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000d60 	.word	0x20000d60
 8005628:	20000d64 	.word	0x20000d64

0800562c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005632:	f000 f969 	bl	8005908 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005636:	4b15      	ldr	r3, [pc, #84]	@ (800568c <prvCheckForValidListAndQueue+0x60>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d120      	bne.n	8005680 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800563e:	4814      	ldr	r0, [pc, #80]	@ (8005690 <prvCheckForValidListAndQueue+0x64>)
 8005640:	f7fd ff00 	bl	8003444 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005644:	4813      	ldr	r0, [pc, #76]	@ (8005694 <prvCheckForValidListAndQueue+0x68>)
 8005646:	f7fd fefd 	bl	8003444 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800564a:	4b13      	ldr	r3, [pc, #76]	@ (8005698 <prvCheckForValidListAndQueue+0x6c>)
 800564c:	4a10      	ldr	r2, [pc, #64]	@ (8005690 <prvCheckForValidListAndQueue+0x64>)
 800564e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005650:	4b12      	ldr	r3, [pc, #72]	@ (800569c <prvCheckForValidListAndQueue+0x70>)
 8005652:	4a10      	ldr	r2, [pc, #64]	@ (8005694 <prvCheckForValidListAndQueue+0x68>)
 8005654:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005656:	2300      	movs	r3, #0
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	4b11      	ldr	r3, [pc, #68]	@ (80056a0 <prvCheckForValidListAndQueue+0x74>)
 800565c:	4a11      	ldr	r2, [pc, #68]	@ (80056a4 <prvCheckForValidListAndQueue+0x78>)
 800565e:	2110      	movs	r1, #16
 8005660:	200a      	movs	r0, #10
 8005662:	f7fe f80d 	bl	8003680 <xQueueGenericCreateStatic>
 8005666:	4603      	mov	r3, r0
 8005668:	4a08      	ldr	r2, [pc, #32]	@ (800568c <prvCheckForValidListAndQueue+0x60>)
 800566a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800566c:	4b07      	ldr	r3, [pc, #28]	@ (800568c <prvCheckForValidListAndQueue+0x60>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005674:	4b05      	ldr	r3, [pc, #20]	@ (800568c <prvCheckForValidListAndQueue+0x60>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	490b      	ldr	r1, [pc, #44]	@ (80056a8 <prvCheckForValidListAndQueue+0x7c>)
 800567a:	4618      	mov	r0, r3
 800567c:	f7fe fd52 	bl	8004124 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005680:	f000 f974 	bl	800596c <vPortExitCritical>
}
 8005684:	bf00      	nop
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000d68 	.word	0x20000d68
 8005690:	20000d38 	.word	0x20000d38
 8005694:	20000d4c 	.word	0x20000d4c
 8005698:	20000d60 	.word	0x20000d60
 800569c:	20000d64 	.word	0x20000d64
 80056a0:	20000e14 	.word	0x20000e14
 80056a4:	20000d74 	.word	0x20000d74
 80056a8:	08006f30 	.word	0x08006f30

080056ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3b04      	subs	r3, #4
 80056bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80056c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	3b04      	subs	r3, #4
 80056ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f023 0201 	bic.w	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3b04      	subs	r3, #4
 80056da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056dc:	4a0c      	ldr	r2, [pc, #48]	@ (8005710 <pxPortInitialiseStack+0x64>)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3b14      	subs	r3, #20
 80056e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3b04      	subs	r3, #4
 80056f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f06f 0202 	mvn.w	r2, #2
 80056fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3b20      	subs	r3, #32
 8005700:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005702:	68fb      	ldr	r3, [r7, #12]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	08005715 	.word	0x08005715

08005714 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800571e:	4b13      	ldr	r3, [pc, #76]	@ (800576c <prvTaskExitError+0x58>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005726:	d00b      	beq.n	8005740 <prvTaskExitError+0x2c>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	60fb      	str	r3, [r7, #12]
}
 800573a:	bf00      	nop
 800573c:	bf00      	nop
 800573e:	e7fd      	b.n	800573c <prvTaskExitError+0x28>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	60bb      	str	r3, [r7, #8]
}
 8005752:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005754:	bf00      	nop
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0fc      	beq.n	8005756 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800575c:	bf00      	nop
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000014 	.word	0x20000014

08005770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005770:	4b07      	ldr	r3, [pc, #28]	@ (8005790 <pxCurrentTCBConst2>)
 8005772:	6819      	ldr	r1, [r3, #0]
 8005774:	6808      	ldr	r0, [r1, #0]
 8005776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577a:	f380 8809 	msr	PSP, r0
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f04f 0000 	mov.w	r0, #0
 8005786:	f380 8811 	msr	BASEPRI, r0
 800578a:	4770      	bx	lr
 800578c:	f3af 8000 	nop.w

08005790 <pxCurrentTCBConst2>:
 8005790:	20000838 	.word	0x20000838
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop

08005798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005798:	4808      	ldr	r0, [pc, #32]	@ (80057bc <prvPortStartFirstTask+0x24>)
 800579a:	6800      	ldr	r0, [r0, #0]
 800579c:	6800      	ldr	r0, [r0, #0]
 800579e:	f380 8808 	msr	MSP, r0
 80057a2:	f04f 0000 	mov.w	r0, #0
 80057a6:	f380 8814 	msr	CONTROL, r0
 80057aa:	b662      	cpsie	i
 80057ac:	b661      	cpsie	f
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	df00      	svc	0
 80057b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057ba:	bf00      	nop
 80057bc:	e000ed08 	.word	0xe000ed08

080057c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057c6:	4b47      	ldr	r3, [pc, #284]	@ (80058e4 <xPortStartScheduler+0x124>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a47      	ldr	r2, [pc, #284]	@ (80058e8 <xPortStartScheduler+0x128>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d10b      	bne.n	80057e8 <xPortStartScheduler+0x28>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	613b      	str	r3, [r7, #16]
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	e7fd      	b.n	80057e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057e8:	4b3e      	ldr	r3, [pc, #248]	@ (80058e4 <xPortStartScheduler+0x124>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a3f      	ldr	r2, [pc, #252]	@ (80058ec <xPortStartScheduler+0x12c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d10b      	bne.n	800580a <xPortStartScheduler+0x4a>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	60fb      	str	r3, [r7, #12]
}
 8005804:	bf00      	nop
 8005806:	bf00      	nop
 8005808:	e7fd      	b.n	8005806 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800580a:	4b39      	ldr	r3, [pc, #228]	@ (80058f0 <xPortStartScheduler+0x130>)
 800580c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	22ff      	movs	r2, #255	@ 0xff
 800581a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800582c:	b2da      	uxtb	r2, r3
 800582e:	4b31      	ldr	r3, [pc, #196]	@ (80058f4 <xPortStartScheduler+0x134>)
 8005830:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005832:	4b31      	ldr	r3, [pc, #196]	@ (80058f8 <xPortStartScheduler+0x138>)
 8005834:	2207      	movs	r2, #7
 8005836:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005838:	e009      	b.n	800584e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800583a:	4b2f      	ldr	r3, [pc, #188]	@ (80058f8 <xPortStartScheduler+0x138>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3b01      	subs	r3, #1
 8005840:	4a2d      	ldr	r2, [pc, #180]	@ (80058f8 <xPortStartScheduler+0x138>)
 8005842:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	b2db      	uxtb	r3, r3
 800584c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005856:	2b80      	cmp	r3, #128	@ 0x80
 8005858:	d0ef      	beq.n	800583a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800585a:	4b27      	ldr	r3, [pc, #156]	@ (80058f8 <xPortStartScheduler+0x138>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f1c3 0307 	rsb	r3, r3, #7
 8005862:	2b04      	cmp	r3, #4
 8005864:	d00b      	beq.n	800587e <xPortStartScheduler+0xbe>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	60bb      	str	r3, [r7, #8]
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	e7fd      	b.n	800587a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800587e:	4b1e      	ldr	r3, [pc, #120]	@ (80058f8 <xPortStartScheduler+0x138>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	4a1c      	ldr	r2, [pc, #112]	@ (80058f8 <xPortStartScheduler+0x138>)
 8005886:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005888:	4b1b      	ldr	r3, [pc, #108]	@ (80058f8 <xPortStartScheduler+0x138>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005890:	4a19      	ldr	r2, [pc, #100]	@ (80058f8 <xPortStartScheduler+0x138>)
 8005892:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800589c:	4b17      	ldr	r3, [pc, #92]	@ (80058fc <xPortStartScheduler+0x13c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a16      	ldr	r2, [pc, #88]	@ (80058fc <xPortStartScheduler+0x13c>)
 80058a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80058a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058a8:	4b14      	ldr	r3, [pc, #80]	@ (80058fc <xPortStartScheduler+0x13c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a13      	ldr	r2, [pc, #76]	@ (80058fc <xPortStartScheduler+0x13c>)
 80058ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80058b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058b4:	f000 f8da 	bl	8005a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058b8:	4b11      	ldr	r3, [pc, #68]	@ (8005900 <xPortStartScheduler+0x140>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058be:	f000 f8f9 	bl	8005ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058c2:	4b10      	ldr	r3, [pc, #64]	@ (8005904 <xPortStartScheduler+0x144>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005904 <xPortStartScheduler+0x144>)
 80058c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80058cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058ce:	f7ff ff63 	bl	8005798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058d2:	f7ff f83f 	bl	8004954 <vTaskSwitchContext>
	prvTaskExitError();
 80058d6:	f7ff ff1d 	bl	8005714 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	e000ed00 	.word	0xe000ed00
 80058e8:	410fc271 	.word	0x410fc271
 80058ec:	410fc270 	.word	0x410fc270
 80058f0:	e000e400 	.word	0xe000e400
 80058f4:	20000e64 	.word	0x20000e64
 80058f8:	20000e68 	.word	0x20000e68
 80058fc:	e000ed20 	.word	0xe000ed20
 8005900:	20000014 	.word	0x20000014
 8005904:	e000ef34 	.word	0xe000ef34

08005908 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	607b      	str	r3, [r7, #4]
}
 8005920:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005922:	4b10      	ldr	r3, [pc, #64]	@ (8005964 <vPortEnterCritical+0x5c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3301      	adds	r3, #1
 8005928:	4a0e      	ldr	r2, [pc, #56]	@ (8005964 <vPortEnterCritical+0x5c>)
 800592a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800592c:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <vPortEnterCritical+0x5c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d110      	bne.n	8005956 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005934:	4b0c      	ldr	r3, [pc, #48]	@ (8005968 <vPortEnterCritical+0x60>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00b      	beq.n	8005956 <vPortEnterCritical+0x4e>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	603b      	str	r3, [r7, #0]
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	e7fd      	b.n	8005952 <vPortEnterCritical+0x4a>
	}
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	20000014 	.word	0x20000014
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005972:	4b12      	ldr	r3, [pc, #72]	@ (80059bc <vPortExitCritical+0x50>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10b      	bne.n	8005992 <vPortExitCritical+0x26>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	607b      	str	r3, [r7, #4]
}
 800598c:	bf00      	nop
 800598e:	bf00      	nop
 8005990:	e7fd      	b.n	800598e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005992:	4b0a      	ldr	r3, [pc, #40]	@ (80059bc <vPortExitCritical+0x50>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3b01      	subs	r3, #1
 8005998:	4a08      	ldr	r2, [pc, #32]	@ (80059bc <vPortExitCritical+0x50>)
 800599a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800599c:	4b07      	ldr	r3, [pc, #28]	@ (80059bc <vPortExitCritical+0x50>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d105      	bne.n	80059b0 <vPortExitCritical+0x44>
 80059a4:	2300      	movs	r3, #0
 80059a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	f383 8811 	msr	BASEPRI, r3
}
 80059ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	20000014 	.word	0x20000014

080059c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059c0:	f3ef 8009 	mrs	r0, PSP
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	4b15      	ldr	r3, [pc, #84]	@ (8005a20 <pxCurrentTCBConst>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	f01e 0f10 	tst.w	lr, #16
 80059d0:	bf08      	it	eq
 80059d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059da:	6010      	str	r0, [r2, #0]
 80059dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80059e4:	f380 8811 	msr	BASEPRI, r0
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f7fe ffb0 	bl	8004954 <vTaskSwitchContext>
 80059f4:	f04f 0000 	mov.w	r0, #0
 80059f8:	f380 8811 	msr	BASEPRI, r0
 80059fc:	bc09      	pop	{r0, r3}
 80059fe:	6819      	ldr	r1, [r3, #0]
 8005a00:	6808      	ldr	r0, [r1, #0]
 8005a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a06:	f01e 0f10 	tst.w	lr, #16
 8005a0a:	bf08      	it	eq
 8005a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a10:	f380 8809 	msr	PSP, r0
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	f3af 8000 	nop.w

08005a20 <pxCurrentTCBConst>:
 8005a20:	20000838 	.word	0x20000838
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop

08005a28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	607b      	str	r3, [r7, #4]
}
 8005a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a42:	f7fe fecd 	bl	80047e0 <xTaskIncrementTick>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a4c:	4b06      	ldr	r3, [pc, #24]	@ (8005a68 <xPortSysTickHandler+0x40>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	2300      	movs	r3, #0
 8005a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	f383 8811 	msr	BASEPRI, r3
}
 8005a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a70:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa0 <vPortSetupTimerInterrupt+0x34>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a76:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa4 <vPortSetupTimerInterrupt+0x38>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa8 <vPortSetupTimerInterrupt+0x3c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a0a      	ldr	r2, [pc, #40]	@ (8005aac <vPortSetupTimerInterrupt+0x40>)
 8005a82:	fba2 2303 	umull	r2, r3, r2, r3
 8005a86:	099b      	lsrs	r3, r3, #6
 8005a88:	4a09      	ldr	r2, [pc, #36]	@ (8005ab0 <vPortSetupTimerInterrupt+0x44>)
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a8e:	4b04      	ldr	r3, [pc, #16]	@ (8005aa0 <vPortSetupTimerInterrupt+0x34>)
 8005a90:	2207      	movs	r2, #7
 8005a92:	601a      	str	r2, [r3, #0]
}
 8005a94:	bf00      	nop
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	e000e010 	.word	0xe000e010
 8005aa4:	e000e018 	.word	0xe000e018
 8005aa8:	20000008 	.word	0x20000008
 8005aac:	10624dd3 	.word	0x10624dd3
 8005ab0:	e000e014 	.word	0xe000e014

08005ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005ac4 <vPortEnableVFP+0x10>
 8005ab8:	6801      	ldr	r1, [r0, #0]
 8005aba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005abe:	6001      	str	r1, [r0, #0]
 8005ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ac2:	bf00      	nop
 8005ac4:	e000ed88 	.word	0xe000ed88

08005ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ace:	f3ef 8305 	mrs	r3, IPSR
 8005ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b0f      	cmp	r3, #15
 8005ad8:	d915      	bls.n	8005b06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ada:	4a18      	ldr	r2, [pc, #96]	@ (8005b3c <vPortValidateInterruptPriority+0x74>)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ae4:	4b16      	ldr	r3, [pc, #88]	@ (8005b40 <vPortValidateInterruptPriority+0x78>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	7afa      	ldrb	r2, [r7, #11]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d20b      	bcs.n	8005b06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	607b      	str	r3, [r7, #4]
}
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
 8005b04:	e7fd      	b.n	8005b02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b06:	4b0f      	ldr	r3, [pc, #60]	@ (8005b44 <vPortValidateInterruptPriority+0x7c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b48 <vPortValidateInterruptPriority+0x80>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d90b      	bls.n	8005b2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	603b      	str	r3, [r7, #0]
}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop
 8005b2c:	e7fd      	b.n	8005b2a <vPortValidateInterruptPriority+0x62>
	}
 8005b2e:	bf00      	nop
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	e000e3f0 	.word	0xe000e3f0
 8005b40:	20000e64 	.word	0x20000e64
 8005b44:	e000ed0c 	.word	0xe000ed0c
 8005b48:	20000e68 	.word	0x20000e68

08005b4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08a      	sub	sp, #40	@ 0x28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b58:	f7fe fd86 	bl	8004668 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8005cd0 <pvPortMalloc+0x184>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b64:	f000 f924 	bl	8005db0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b68:	4b5a      	ldr	r3, [pc, #360]	@ (8005cd4 <pvPortMalloc+0x188>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f040 8095 	bne.w	8005ca0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d01e      	beq.n	8005bba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4413      	add	r3, r2
 8005b82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d015      	beq.n	8005bba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f023 0307 	bic.w	r3, r3, #7
 8005b94:	3308      	adds	r3, #8
 8005b96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00b      	beq.n	8005bba <pvPortMalloc+0x6e>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	617b      	str	r3, [r7, #20]
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop
 8005bb8:	e7fd      	b.n	8005bb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d06f      	beq.n	8005ca0 <pvPortMalloc+0x154>
 8005bc0:	4b45      	ldr	r3, [pc, #276]	@ (8005cd8 <pvPortMalloc+0x18c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d86a      	bhi.n	8005ca0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bca:	4b44      	ldr	r3, [pc, #272]	@ (8005cdc <pvPortMalloc+0x190>)
 8005bcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bce:	4b43      	ldr	r3, [pc, #268]	@ (8005cdc <pvPortMalloc+0x190>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bd4:	e004      	b.n	8005be0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d903      	bls.n	8005bf2 <pvPortMalloc+0xa6>
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f1      	bne.n	8005bd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bf2:	4b37      	ldr	r3, [pc, #220]	@ (8005cd0 <pvPortMalloc+0x184>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d051      	beq.n	8005ca0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2208      	movs	r2, #8
 8005c02:	4413      	add	r3, r2
 8005c04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	1ad2      	subs	r2, r2, r3
 8005c16:	2308      	movs	r3, #8
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d920      	bls.n	8005c60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <pvPortMalloc+0xfc>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	613b      	str	r3, [r7, #16]
}
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	e7fd      	b.n	8005c44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c5a:	69b8      	ldr	r0, [r7, #24]
 8005c5c:	f000 f90a 	bl	8005e74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c60:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd8 <pvPortMalloc+0x18c>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005cd8 <pvPortMalloc+0x18c>)
 8005c6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005cd8 <pvPortMalloc+0x18c>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce0 <pvPortMalloc+0x194>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d203      	bcs.n	8005c82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c7a:	4b17      	ldr	r3, [pc, #92]	@ (8005cd8 <pvPortMalloc+0x18c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a18      	ldr	r2, [pc, #96]	@ (8005ce0 <pvPortMalloc+0x194>)
 8005c80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	4b13      	ldr	r3, [pc, #76]	@ (8005cd4 <pvPortMalloc+0x188>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c96:	4b13      	ldr	r3, [pc, #76]	@ (8005ce4 <pvPortMalloc+0x198>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	4a11      	ldr	r2, [pc, #68]	@ (8005ce4 <pvPortMalloc+0x198>)
 8005c9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ca0:	f7fe fcf0 	bl	8004684 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00b      	beq.n	8005cc6 <pvPortMalloc+0x17a>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	60fb      	str	r3, [r7, #12]
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	e7fd      	b.n	8005cc2 <pvPortMalloc+0x176>
	return pvReturn;
 8005cc6:	69fb      	ldr	r3, [r7, #28]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3728      	adds	r7, #40	@ 0x28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20004a74 	.word	0x20004a74
 8005cd4:	20004a88 	.word	0x20004a88
 8005cd8:	20004a78 	.word	0x20004a78
 8005cdc:	20004a6c 	.word	0x20004a6c
 8005ce0:	20004a7c 	.word	0x20004a7c
 8005ce4:	20004a80 	.word	0x20004a80

08005ce8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d04f      	beq.n	8005d9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cfa:	2308      	movs	r3, #8
 8005cfc:	425b      	negs	r3, r3
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4413      	add	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	4b25      	ldr	r3, [pc, #148]	@ (8005da4 <vPortFree+0xbc>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10b      	bne.n	8005d2e <vPortFree+0x46>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	60fb      	str	r3, [r7, #12]
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	e7fd      	b.n	8005d2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00b      	beq.n	8005d4e <vPortFree+0x66>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	60bb      	str	r3, [r7, #8]
}
 8005d48:	bf00      	nop
 8005d4a:	bf00      	nop
 8005d4c:	e7fd      	b.n	8005d4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	4b14      	ldr	r3, [pc, #80]	@ (8005da4 <vPortFree+0xbc>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4013      	ands	r3, r2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01e      	beq.n	8005d9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d11a      	bne.n	8005d9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	4b0e      	ldr	r3, [pc, #56]	@ (8005da4 <vPortFree+0xbc>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	43db      	mvns	r3, r3
 8005d6e:	401a      	ands	r2, r3
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d74:	f7fe fc78 	bl	8004668 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005da8 <vPortFree+0xc0>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4413      	add	r3, r2
 8005d82:	4a09      	ldr	r2, [pc, #36]	@ (8005da8 <vPortFree+0xc0>)
 8005d84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d86:	6938      	ldr	r0, [r7, #16]
 8005d88:	f000 f874 	bl	8005e74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d8c:	4b07      	ldr	r3, [pc, #28]	@ (8005dac <vPortFree+0xc4>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3301      	adds	r3, #1
 8005d92:	4a06      	ldr	r2, [pc, #24]	@ (8005dac <vPortFree+0xc4>)
 8005d94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d96:	f7fe fc75 	bl	8004684 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d9a:	bf00      	nop
 8005d9c:	3718      	adds	r7, #24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20004a88 	.word	0x20004a88
 8005da8:	20004a78 	.word	0x20004a78
 8005dac:	20004a84 	.word	0x20004a84

08005db0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005db6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005dba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005dbc:	4b27      	ldr	r3, [pc, #156]	@ (8005e5c <prvHeapInit+0xac>)
 8005dbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00c      	beq.n	8005de4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	3307      	adds	r3, #7
 8005dce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0307 	bic.w	r3, r3, #7
 8005dd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005dd8:	68ba      	ldr	r2, [r7, #8]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	4a1f      	ldr	r2, [pc, #124]	@ (8005e5c <prvHeapInit+0xac>)
 8005de0:	4413      	add	r3, r2
 8005de2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005de8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e60 <prvHeapInit+0xb0>)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005dee:	4b1c      	ldr	r3, [pc, #112]	@ (8005e60 <prvHeapInit+0xb0>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	4413      	add	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005dfc:	2208      	movs	r2, #8
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	1a9b      	subs	r3, r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0307 	bic.w	r3, r3, #7
 8005e0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4a15      	ldr	r2, [pc, #84]	@ (8005e64 <prvHeapInit+0xb4>)
 8005e10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e12:	4b14      	ldr	r3, [pc, #80]	@ (8005e64 <prvHeapInit+0xb4>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2200      	movs	r2, #0
 8005e18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e1a:	4b12      	ldr	r3, [pc, #72]	@ (8005e64 <prvHeapInit+0xb4>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	1ad2      	subs	r2, r2, r3
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e30:	4b0c      	ldr	r3, [pc, #48]	@ (8005e64 <prvHeapInit+0xb4>)
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8005e68 <prvHeapInit+0xb8>)
 8005e3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	4a09      	ldr	r2, [pc, #36]	@ (8005e6c <prvHeapInit+0xbc>)
 8005e46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e48:	4b09      	ldr	r3, [pc, #36]	@ (8005e70 <prvHeapInit+0xc0>)
 8005e4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e4e:	601a      	str	r2, [r3, #0]
}
 8005e50:	bf00      	nop
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	20000e6c 	.word	0x20000e6c
 8005e60:	20004a6c 	.word	0x20004a6c
 8005e64:	20004a74 	.word	0x20004a74
 8005e68:	20004a7c 	.word	0x20004a7c
 8005e6c:	20004a78 	.word	0x20004a78
 8005e70:	20004a88 	.word	0x20004a88

08005e74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e7c:	4b28      	ldr	r3, [pc, #160]	@ (8005f20 <prvInsertBlockIntoFreeList+0xac>)
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e002      	b.n	8005e88 <prvInsertBlockIntoFreeList+0x14>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d8f7      	bhi.n	8005e82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d108      	bne.n	8005eb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	441a      	add	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	441a      	add	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d118      	bne.n	8005efc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4b15      	ldr	r3, [pc, #84]	@ (8005f24 <prvInsertBlockIntoFreeList+0xb0>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d00d      	beq.n	8005ef2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	441a      	add	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	e008      	b.n	8005f04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8005f24 <prvInsertBlockIntoFreeList+0xb0>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	e003      	b.n	8005f04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d002      	beq.n	8005f12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f12:	bf00      	nop
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20004a6c 	.word	0x20004a6c
 8005f24:	20004a74 	.word	0x20004a74

08005f28 <std>:
 8005f28:	2300      	movs	r3, #0
 8005f2a:	b510      	push	{r4, lr}
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f36:	6083      	str	r3, [r0, #8]
 8005f38:	8181      	strh	r1, [r0, #12]
 8005f3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f3c:	81c2      	strh	r2, [r0, #14]
 8005f3e:	6183      	str	r3, [r0, #24]
 8005f40:	4619      	mov	r1, r3
 8005f42:	2208      	movs	r2, #8
 8005f44:	305c      	adds	r0, #92	@ 0x5c
 8005f46:	f000 f9f9 	bl	800633c <memset>
 8005f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f80 <std+0x58>)
 8005f4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f84 <std+0x5c>)
 8005f50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f52:	4b0d      	ldr	r3, [pc, #52]	@ (8005f88 <std+0x60>)
 8005f54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f56:	4b0d      	ldr	r3, [pc, #52]	@ (8005f8c <std+0x64>)
 8005f58:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f90 <std+0x68>)
 8005f5c:	6224      	str	r4, [r4, #32]
 8005f5e:	429c      	cmp	r4, r3
 8005f60:	d006      	beq.n	8005f70 <std+0x48>
 8005f62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f66:	4294      	cmp	r4, r2
 8005f68:	d002      	beq.n	8005f70 <std+0x48>
 8005f6a:	33d0      	adds	r3, #208	@ 0xd0
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	d105      	bne.n	8005f7c <std+0x54>
 8005f70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f78:	f000 ba58 	b.w	800642c <__retarget_lock_init_recursive>
 8005f7c:	bd10      	pop	{r4, pc}
 8005f7e:	bf00      	nop
 8005f80:	0800618d 	.word	0x0800618d
 8005f84:	080061af 	.word	0x080061af
 8005f88:	080061e7 	.word	0x080061e7
 8005f8c:	0800620b 	.word	0x0800620b
 8005f90:	20004a8c 	.word	0x20004a8c

08005f94 <stdio_exit_handler>:
 8005f94:	4a02      	ldr	r2, [pc, #8]	@ (8005fa0 <stdio_exit_handler+0xc>)
 8005f96:	4903      	ldr	r1, [pc, #12]	@ (8005fa4 <stdio_exit_handler+0x10>)
 8005f98:	4803      	ldr	r0, [pc, #12]	@ (8005fa8 <stdio_exit_handler+0x14>)
 8005f9a:	f000 b869 	b.w	8006070 <_fwalk_sglue>
 8005f9e:	bf00      	nop
 8005fa0:	20000018 	.word	0x20000018
 8005fa4:	08006ce9 	.word	0x08006ce9
 8005fa8:	20000028 	.word	0x20000028

08005fac <cleanup_stdio>:
 8005fac:	6841      	ldr	r1, [r0, #4]
 8005fae:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe0 <cleanup_stdio+0x34>)
 8005fb0:	4299      	cmp	r1, r3
 8005fb2:	b510      	push	{r4, lr}
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	d001      	beq.n	8005fbc <cleanup_stdio+0x10>
 8005fb8:	f000 fe96 	bl	8006ce8 <_fflush_r>
 8005fbc:	68a1      	ldr	r1, [r4, #8]
 8005fbe:	4b09      	ldr	r3, [pc, #36]	@ (8005fe4 <cleanup_stdio+0x38>)
 8005fc0:	4299      	cmp	r1, r3
 8005fc2:	d002      	beq.n	8005fca <cleanup_stdio+0x1e>
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f000 fe8f 	bl	8006ce8 <_fflush_r>
 8005fca:	68e1      	ldr	r1, [r4, #12]
 8005fcc:	4b06      	ldr	r3, [pc, #24]	@ (8005fe8 <cleanup_stdio+0x3c>)
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	d004      	beq.n	8005fdc <cleanup_stdio+0x30>
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fd8:	f000 be86 	b.w	8006ce8 <_fflush_r>
 8005fdc:	bd10      	pop	{r4, pc}
 8005fde:	bf00      	nop
 8005fe0:	20004a8c 	.word	0x20004a8c
 8005fe4:	20004af4 	.word	0x20004af4
 8005fe8:	20004b5c 	.word	0x20004b5c

08005fec <global_stdio_init.part.0>:
 8005fec:	b510      	push	{r4, lr}
 8005fee:	4b0b      	ldr	r3, [pc, #44]	@ (800601c <global_stdio_init.part.0+0x30>)
 8005ff0:	4c0b      	ldr	r4, [pc, #44]	@ (8006020 <global_stdio_init.part.0+0x34>)
 8005ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8006024 <global_stdio_init.part.0+0x38>)
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2104      	movs	r1, #4
 8005ffc:	f7ff ff94 	bl	8005f28 <std>
 8006000:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006004:	2201      	movs	r2, #1
 8006006:	2109      	movs	r1, #9
 8006008:	f7ff ff8e 	bl	8005f28 <std>
 800600c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006010:	2202      	movs	r2, #2
 8006012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006016:	2112      	movs	r1, #18
 8006018:	f7ff bf86 	b.w	8005f28 <std>
 800601c:	20004bc4 	.word	0x20004bc4
 8006020:	20004a8c 	.word	0x20004a8c
 8006024:	08005f95 	.word	0x08005f95

08006028 <__sfp_lock_acquire>:
 8006028:	4801      	ldr	r0, [pc, #4]	@ (8006030 <__sfp_lock_acquire+0x8>)
 800602a:	f000 ba00 	b.w	800642e <__retarget_lock_acquire_recursive>
 800602e:	bf00      	nop
 8006030:	20004bcd 	.word	0x20004bcd

08006034 <__sfp_lock_release>:
 8006034:	4801      	ldr	r0, [pc, #4]	@ (800603c <__sfp_lock_release+0x8>)
 8006036:	f000 b9fb 	b.w	8006430 <__retarget_lock_release_recursive>
 800603a:	bf00      	nop
 800603c:	20004bcd 	.word	0x20004bcd

08006040 <__sinit>:
 8006040:	b510      	push	{r4, lr}
 8006042:	4604      	mov	r4, r0
 8006044:	f7ff fff0 	bl	8006028 <__sfp_lock_acquire>
 8006048:	6a23      	ldr	r3, [r4, #32]
 800604a:	b11b      	cbz	r3, 8006054 <__sinit+0x14>
 800604c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006050:	f7ff bff0 	b.w	8006034 <__sfp_lock_release>
 8006054:	4b04      	ldr	r3, [pc, #16]	@ (8006068 <__sinit+0x28>)
 8006056:	6223      	str	r3, [r4, #32]
 8006058:	4b04      	ldr	r3, [pc, #16]	@ (800606c <__sinit+0x2c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1f5      	bne.n	800604c <__sinit+0xc>
 8006060:	f7ff ffc4 	bl	8005fec <global_stdio_init.part.0>
 8006064:	e7f2      	b.n	800604c <__sinit+0xc>
 8006066:	bf00      	nop
 8006068:	08005fad 	.word	0x08005fad
 800606c:	20004bc4 	.word	0x20004bc4

08006070 <_fwalk_sglue>:
 8006070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006074:	4607      	mov	r7, r0
 8006076:	4688      	mov	r8, r1
 8006078:	4614      	mov	r4, r2
 800607a:	2600      	movs	r6, #0
 800607c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006080:	f1b9 0901 	subs.w	r9, r9, #1
 8006084:	d505      	bpl.n	8006092 <_fwalk_sglue+0x22>
 8006086:	6824      	ldr	r4, [r4, #0]
 8006088:	2c00      	cmp	r4, #0
 800608a:	d1f7      	bne.n	800607c <_fwalk_sglue+0xc>
 800608c:	4630      	mov	r0, r6
 800608e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006092:	89ab      	ldrh	r3, [r5, #12]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d907      	bls.n	80060a8 <_fwalk_sglue+0x38>
 8006098:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800609c:	3301      	adds	r3, #1
 800609e:	d003      	beq.n	80060a8 <_fwalk_sglue+0x38>
 80060a0:	4629      	mov	r1, r5
 80060a2:	4638      	mov	r0, r7
 80060a4:	47c0      	blx	r8
 80060a6:	4306      	orrs	r6, r0
 80060a8:	3568      	adds	r5, #104	@ 0x68
 80060aa:	e7e9      	b.n	8006080 <_fwalk_sglue+0x10>

080060ac <iprintf>:
 80060ac:	b40f      	push	{r0, r1, r2, r3}
 80060ae:	b507      	push	{r0, r1, r2, lr}
 80060b0:	4906      	ldr	r1, [pc, #24]	@ (80060cc <iprintf+0x20>)
 80060b2:	ab04      	add	r3, sp, #16
 80060b4:	6808      	ldr	r0, [r1, #0]
 80060b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ba:	6881      	ldr	r1, [r0, #8]
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	f000 fae9 	bl	8006694 <_vfiprintf_r>
 80060c2:	b003      	add	sp, #12
 80060c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060c8:	b004      	add	sp, #16
 80060ca:	4770      	bx	lr
 80060cc:	20000024 	.word	0x20000024

080060d0 <_puts_r>:
 80060d0:	6a03      	ldr	r3, [r0, #32]
 80060d2:	b570      	push	{r4, r5, r6, lr}
 80060d4:	6884      	ldr	r4, [r0, #8]
 80060d6:	4605      	mov	r5, r0
 80060d8:	460e      	mov	r6, r1
 80060da:	b90b      	cbnz	r3, 80060e0 <_puts_r+0x10>
 80060dc:	f7ff ffb0 	bl	8006040 <__sinit>
 80060e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060e2:	07db      	lsls	r3, r3, #31
 80060e4:	d405      	bmi.n	80060f2 <_puts_r+0x22>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	0598      	lsls	r0, r3, #22
 80060ea:	d402      	bmi.n	80060f2 <_puts_r+0x22>
 80060ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ee:	f000 f99e 	bl	800642e <__retarget_lock_acquire_recursive>
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	0719      	lsls	r1, r3, #28
 80060f6:	d502      	bpl.n	80060fe <_puts_r+0x2e>
 80060f8:	6923      	ldr	r3, [r4, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d135      	bne.n	800616a <_puts_r+0x9a>
 80060fe:	4621      	mov	r1, r4
 8006100:	4628      	mov	r0, r5
 8006102:	f000 f8c5 	bl	8006290 <__swsetup_r>
 8006106:	b380      	cbz	r0, 800616a <_puts_r+0x9a>
 8006108:	f04f 35ff 	mov.w	r5, #4294967295
 800610c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800610e:	07da      	lsls	r2, r3, #31
 8006110:	d405      	bmi.n	800611e <_puts_r+0x4e>
 8006112:	89a3      	ldrh	r3, [r4, #12]
 8006114:	059b      	lsls	r3, r3, #22
 8006116:	d402      	bmi.n	800611e <_puts_r+0x4e>
 8006118:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800611a:	f000 f989 	bl	8006430 <__retarget_lock_release_recursive>
 800611e:	4628      	mov	r0, r5
 8006120:	bd70      	pop	{r4, r5, r6, pc}
 8006122:	2b00      	cmp	r3, #0
 8006124:	da04      	bge.n	8006130 <_puts_r+0x60>
 8006126:	69a2      	ldr	r2, [r4, #24]
 8006128:	429a      	cmp	r2, r3
 800612a:	dc17      	bgt.n	800615c <_puts_r+0x8c>
 800612c:	290a      	cmp	r1, #10
 800612e:	d015      	beq.n	800615c <_puts_r+0x8c>
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	6022      	str	r2, [r4, #0]
 8006136:	7019      	strb	r1, [r3, #0]
 8006138:	68a3      	ldr	r3, [r4, #8]
 800613a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800613e:	3b01      	subs	r3, #1
 8006140:	60a3      	str	r3, [r4, #8]
 8006142:	2900      	cmp	r1, #0
 8006144:	d1ed      	bne.n	8006122 <_puts_r+0x52>
 8006146:	2b00      	cmp	r3, #0
 8006148:	da11      	bge.n	800616e <_puts_r+0x9e>
 800614a:	4622      	mov	r2, r4
 800614c:	210a      	movs	r1, #10
 800614e:	4628      	mov	r0, r5
 8006150:	f000 f85f 	bl	8006212 <__swbuf_r>
 8006154:	3001      	adds	r0, #1
 8006156:	d0d7      	beq.n	8006108 <_puts_r+0x38>
 8006158:	250a      	movs	r5, #10
 800615a:	e7d7      	b.n	800610c <_puts_r+0x3c>
 800615c:	4622      	mov	r2, r4
 800615e:	4628      	mov	r0, r5
 8006160:	f000 f857 	bl	8006212 <__swbuf_r>
 8006164:	3001      	adds	r0, #1
 8006166:	d1e7      	bne.n	8006138 <_puts_r+0x68>
 8006168:	e7ce      	b.n	8006108 <_puts_r+0x38>
 800616a:	3e01      	subs	r6, #1
 800616c:	e7e4      	b.n	8006138 <_puts_r+0x68>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	6022      	str	r2, [r4, #0]
 8006174:	220a      	movs	r2, #10
 8006176:	701a      	strb	r2, [r3, #0]
 8006178:	e7ee      	b.n	8006158 <_puts_r+0x88>
	...

0800617c <puts>:
 800617c:	4b02      	ldr	r3, [pc, #8]	@ (8006188 <puts+0xc>)
 800617e:	4601      	mov	r1, r0
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	f7ff bfa5 	b.w	80060d0 <_puts_r>
 8006186:	bf00      	nop
 8006188:	20000024 	.word	0x20000024

0800618c <__sread>:
 800618c:	b510      	push	{r4, lr}
 800618e:	460c      	mov	r4, r1
 8006190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006194:	f000 f8fc 	bl	8006390 <_read_r>
 8006198:	2800      	cmp	r0, #0
 800619a:	bfab      	itete	ge
 800619c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800619e:	89a3      	ldrhlt	r3, [r4, #12]
 80061a0:	181b      	addge	r3, r3, r0
 80061a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061a6:	bfac      	ite	ge
 80061a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061aa:	81a3      	strhlt	r3, [r4, #12]
 80061ac:	bd10      	pop	{r4, pc}

080061ae <__swrite>:
 80061ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b2:	461f      	mov	r7, r3
 80061b4:	898b      	ldrh	r3, [r1, #12]
 80061b6:	05db      	lsls	r3, r3, #23
 80061b8:	4605      	mov	r5, r0
 80061ba:	460c      	mov	r4, r1
 80061bc:	4616      	mov	r6, r2
 80061be:	d505      	bpl.n	80061cc <__swrite+0x1e>
 80061c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c4:	2302      	movs	r3, #2
 80061c6:	2200      	movs	r2, #0
 80061c8:	f000 f8d0 	bl	800636c <_lseek_r>
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061d6:	81a3      	strh	r3, [r4, #12]
 80061d8:	4632      	mov	r2, r6
 80061da:	463b      	mov	r3, r7
 80061dc:	4628      	mov	r0, r5
 80061de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061e2:	f000 b8e7 	b.w	80063b4 <_write_r>

080061e6 <__sseek>:
 80061e6:	b510      	push	{r4, lr}
 80061e8:	460c      	mov	r4, r1
 80061ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ee:	f000 f8bd 	bl	800636c <_lseek_r>
 80061f2:	1c43      	adds	r3, r0, #1
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	bf15      	itete	ne
 80061f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006202:	81a3      	strheq	r3, [r4, #12]
 8006204:	bf18      	it	ne
 8006206:	81a3      	strhne	r3, [r4, #12]
 8006208:	bd10      	pop	{r4, pc}

0800620a <__sclose>:
 800620a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620e:	f000 b89d 	b.w	800634c <_close_r>

08006212 <__swbuf_r>:
 8006212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006214:	460e      	mov	r6, r1
 8006216:	4614      	mov	r4, r2
 8006218:	4605      	mov	r5, r0
 800621a:	b118      	cbz	r0, 8006224 <__swbuf_r+0x12>
 800621c:	6a03      	ldr	r3, [r0, #32]
 800621e:	b90b      	cbnz	r3, 8006224 <__swbuf_r+0x12>
 8006220:	f7ff ff0e 	bl	8006040 <__sinit>
 8006224:	69a3      	ldr	r3, [r4, #24]
 8006226:	60a3      	str	r3, [r4, #8]
 8006228:	89a3      	ldrh	r3, [r4, #12]
 800622a:	071a      	lsls	r2, r3, #28
 800622c:	d501      	bpl.n	8006232 <__swbuf_r+0x20>
 800622e:	6923      	ldr	r3, [r4, #16]
 8006230:	b943      	cbnz	r3, 8006244 <__swbuf_r+0x32>
 8006232:	4621      	mov	r1, r4
 8006234:	4628      	mov	r0, r5
 8006236:	f000 f82b 	bl	8006290 <__swsetup_r>
 800623a:	b118      	cbz	r0, 8006244 <__swbuf_r+0x32>
 800623c:	f04f 37ff 	mov.w	r7, #4294967295
 8006240:	4638      	mov	r0, r7
 8006242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	6922      	ldr	r2, [r4, #16]
 8006248:	1a98      	subs	r0, r3, r2
 800624a:	6963      	ldr	r3, [r4, #20]
 800624c:	b2f6      	uxtb	r6, r6
 800624e:	4283      	cmp	r3, r0
 8006250:	4637      	mov	r7, r6
 8006252:	dc05      	bgt.n	8006260 <__swbuf_r+0x4e>
 8006254:	4621      	mov	r1, r4
 8006256:	4628      	mov	r0, r5
 8006258:	f000 fd46 	bl	8006ce8 <_fflush_r>
 800625c:	2800      	cmp	r0, #0
 800625e:	d1ed      	bne.n	800623c <__swbuf_r+0x2a>
 8006260:	68a3      	ldr	r3, [r4, #8]
 8006262:	3b01      	subs	r3, #1
 8006264:	60a3      	str	r3, [r4, #8]
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	6022      	str	r2, [r4, #0]
 800626c:	701e      	strb	r6, [r3, #0]
 800626e:	6962      	ldr	r2, [r4, #20]
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	429a      	cmp	r2, r3
 8006274:	d004      	beq.n	8006280 <__swbuf_r+0x6e>
 8006276:	89a3      	ldrh	r3, [r4, #12]
 8006278:	07db      	lsls	r3, r3, #31
 800627a:	d5e1      	bpl.n	8006240 <__swbuf_r+0x2e>
 800627c:	2e0a      	cmp	r6, #10
 800627e:	d1df      	bne.n	8006240 <__swbuf_r+0x2e>
 8006280:	4621      	mov	r1, r4
 8006282:	4628      	mov	r0, r5
 8006284:	f000 fd30 	bl	8006ce8 <_fflush_r>
 8006288:	2800      	cmp	r0, #0
 800628a:	d0d9      	beq.n	8006240 <__swbuf_r+0x2e>
 800628c:	e7d6      	b.n	800623c <__swbuf_r+0x2a>
	...

08006290 <__swsetup_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4b29      	ldr	r3, [pc, #164]	@ (8006338 <__swsetup_r+0xa8>)
 8006294:	4605      	mov	r5, r0
 8006296:	6818      	ldr	r0, [r3, #0]
 8006298:	460c      	mov	r4, r1
 800629a:	b118      	cbz	r0, 80062a4 <__swsetup_r+0x14>
 800629c:	6a03      	ldr	r3, [r0, #32]
 800629e:	b90b      	cbnz	r3, 80062a4 <__swsetup_r+0x14>
 80062a0:	f7ff fece 	bl	8006040 <__sinit>
 80062a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062a8:	0719      	lsls	r1, r3, #28
 80062aa:	d422      	bmi.n	80062f2 <__swsetup_r+0x62>
 80062ac:	06da      	lsls	r2, r3, #27
 80062ae:	d407      	bmi.n	80062c0 <__swsetup_r+0x30>
 80062b0:	2209      	movs	r2, #9
 80062b2:	602a      	str	r2, [r5, #0]
 80062b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062b8:	81a3      	strh	r3, [r4, #12]
 80062ba:	f04f 30ff 	mov.w	r0, #4294967295
 80062be:	e033      	b.n	8006328 <__swsetup_r+0x98>
 80062c0:	0758      	lsls	r0, r3, #29
 80062c2:	d512      	bpl.n	80062ea <__swsetup_r+0x5a>
 80062c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062c6:	b141      	cbz	r1, 80062da <__swsetup_r+0x4a>
 80062c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062cc:	4299      	cmp	r1, r3
 80062ce:	d002      	beq.n	80062d6 <__swsetup_r+0x46>
 80062d0:	4628      	mov	r0, r5
 80062d2:	f000 f8bd 	bl	8006450 <_free_r>
 80062d6:	2300      	movs	r3, #0
 80062d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80062da:	89a3      	ldrh	r3, [r4, #12]
 80062dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80062e0:	81a3      	strh	r3, [r4, #12]
 80062e2:	2300      	movs	r3, #0
 80062e4:	6063      	str	r3, [r4, #4]
 80062e6:	6923      	ldr	r3, [r4, #16]
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	89a3      	ldrh	r3, [r4, #12]
 80062ec:	f043 0308 	orr.w	r3, r3, #8
 80062f0:	81a3      	strh	r3, [r4, #12]
 80062f2:	6923      	ldr	r3, [r4, #16]
 80062f4:	b94b      	cbnz	r3, 800630a <__swsetup_r+0x7a>
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80062fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006300:	d003      	beq.n	800630a <__swsetup_r+0x7a>
 8006302:	4621      	mov	r1, r4
 8006304:	4628      	mov	r0, r5
 8006306:	f000 fd3d 	bl	8006d84 <__smakebuf_r>
 800630a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800630e:	f013 0201 	ands.w	r2, r3, #1
 8006312:	d00a      	beq.n	800632a <__swsetup_r+0x9a>
 8006314:	2200      	movs	r2, #0
 8006316:	60a2      	str	r2, [r4, #8]
 8006318:	6962      	ldr	r2, [r4, #20]
 800631a:	4252      	negs	r2, r2
 800631c:	61a2      	str	r2, [r4, #24]
 800631e:	6922      	ldr	r2, [r4, #16]
 8006320:	b942      	cbnz	r2, 8006334 <__swsetup_r+0xa4>
 8006322:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006326:	d1c5      	bne.n	80062b4 <__swsetup_r+0x24>
 8006328:	bd38      	pop	{r3, r4, r5, pc}
 800632a:	0799      	lsls	r1, r3, #30
 800632c:	bf58      	it	pl
 800632e:	6962      	ldrpl	r2, [r4, #20]
 8006330:	60a2      	str	r2, [r4, #8]
 8006332:	e7f4      	b.n	800631e <__swsetup_r+0x8e>
 8006334:	2000      	movs	r0, #0
 8006336:	e7f7      	b.n	8006328 <__swsetup_r+0x98>
 8006338:	20000024 	.word	0x20000024

0800633c <memset>:
 800633c:	4402      	add	r2, r0
 800633e:	4603      	mov	r3, r0
 8006340:	4293      	cmp	r3, r2
 8006342:	d100      	bne.n	8006346 <memset+0xa>
 8006344:	4770      	bx	lr
 8006346:	f803 1b01 	strb.w	r1, [r3], #1
 800634a:	e7f9      	b.n	8006340 <memset+0x4>

0800634c <_close_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4d06      	ldr	r5, [pc, #24]	@ (8006368 <_close_r+0x1c>)
 8006350:	2300      	movs	r3, #0
 8006352:	4604      	mov	r4, r0
 8006354:	4608      	mov	r0, r1
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	f7fa fc27 	bl	8000baa <_close>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d102      	bne.n	8006366 <_close_r+0x1a>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	b103      	cbz	r3, 8006366 <_close_r+0x1a>
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	20004bc8 	.word	0x20004bc8

0800636c <_lseek_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4d07      	ldr	r5, [pc, #28]	@ (800638c <_lseek_r+0x20>)
 8006370:	4604      	mov	r4, r0
 8006372:	4608      	mov	r0, r1
 8006374:	4611      	mov	r1, r2
 8006376:	2200      	movs	r2, #0
 8006378:	602a      	str	r2, [r5, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	f7fa fc3c 	bl	8000bf8 <_lseek>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_lseek_r+0x1e>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b103      	cbz	r3, 800638a <_lseek_r+0x1e>
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	20004bc8 	.word	0x20004bc8

08006390 <_read_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d07      	ldr	r5, [pc, #28]	@ (80063b0 <_read_r+0x20>)
 8006394:	4604      	mov	r4, r0
 8006396:	4608      	mov	r0, r1
 8006398:	4611      	mov	r1, r2
 800639a:	2200      	movs	r2, #0
 800639c:	602a      	str	r2, [r5, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	f7fa fbe6 	bl	8000b70 <_read>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d102      	bne.n	80063ae <_read_r+0x1e>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	b103      	cbz	r3, 80063ae <_read_r+0x1e>
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	20004bc8 	.word	0x20004bc8

080063b4 <_write_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4d07      	ldr	r5, [pc, #28]	@ (80063d4 <_write_r+0x20>)
 80063b8:	4604      	mov	r4, r0
 80063ba:	4608      	mov	r0, r1
 80063bc:	4611      	mov	r1, r2
 80063be:	2200      	movs	r2, #0
 80063c0:	602a      	str	r2, [r5, #0]
 80063c2:	461a      	mov	r2, r3
 80063c4:	f7fa fa4c 	bl	8000860 <_write>
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d102      	bne.n	80063d2 <_write_r+0x1e>
 80063cc:	682b      	ldr	r3, [r5, #0]
 80063ce:	b103      	cbz	r3, 80063d2 <_write_r+0x1e>
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	20004bc8 	.word	0x20004bc8

080063d8 <__errno>:
 80063d8:	4b01      	ldr	r3, [pc, #4]	@ (80063e0 <__errno+0x8>)
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20000024 	.word	0x20000024

080063e4 <__libc_init_array>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	4d0d      	ldr	r5, [pc, #52]	@ (800641c <__libc_init_array+0x38>)
 80063e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006420 <__libc_init_array+0x3c>)
 80063ea:	1b64      	subs	r4, r4, r5
 80063ec:	10a4      	asrs	r4, r4, #2
 80063ee:	2600      	movs	r6, #0
 80063f0:	42a6      	cmp	r6, r4
 80063f2:	d109      	bne.n	8006408 <__libc_init_array+0x24>
 80063f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006424 <__libc_init_array+0x40>)
 80063f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006428 <__libc_init_array+0x44>)
 80063f8:	f000 fd32 	bl	8006e60 <_init>
 80063fc:	1b64      	subs	r4, r4, r5
 80063fe:	10a4      	asrs	r4, r4, #2
 8006400:	2600      	movs	r6, #0
 8006402:	42a6      	cmp	r6, r4
 8006404:	d105      	bne.n	8006412 <__libc_init_array+0x2e>
 8006406:	bd70      	pop	{r4, r5, r6, pc}
 8006408:	f855 3b04 	ldr.w	r3, [r5], #4
 800640c:	4798      	blx	r3
 800640e:	3601      	adds	r6, #1
 8006410:	e7ee      	b.n	80063f0 <__libc_init_array+0xc>
 8006412:	f855 3b04 	ldr.w	r3, [r5], #4
 8006416:	4798      	blx	r3
 8006418:	3601      	adds	r6, #1
 800641a:	e7f2      	b.n	8006402 <__libc_init_array+0x1e>
 800641c:	08007028 	.word	0x08007028
 8006420:	08007028 	.word	0x08007028
 8006424:	08007028 	.word	0x08007028
 8006428:	0800702c 	.word	0x0800702c

0800642c <__retarget_lock_init_recursive>:
 800642c:	4770      	bx	lr

0800642e <__retarget_lock_acquire_recursive>:
 800642e:	4770      	bx	lr

08006430 <__retarget_lock_release_recursive>:
 8006430:	4770      	bx	lr

08006432 <memcpy>:
 8006432:	440a      	add	r2, r1
 8006434:	4291      	cmp	r1, r2
 8006436:	f100 33ff 	add.w	r3, r0, #4294967295
 800643a:	d100      	bne.n	800643e <memcpy+0xc>
 800643c:	4770      	bx	lr
 800643e:	b510      	push	{r4, lr}
 8006440:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006444:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006448:	4291      	cmp	r1, r2
 800644a:	d1f9      	bne.n	8006440 <memcpy+0xe>
 800644c:	bd10      	pop	{r4, pc}
	...

08006450 <_free_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	4605      	mov	r5, r0
 8006454:	2900      	cmp	r1, #0
 8006456:	d041      	beq.n	80064dc <_free_r+0x8c>
 8006458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800645c:	1f0c      	subs	r4, r1, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	bfb8      	it	lt
 8006462:	18e4      	addlt	r4, r4, r3
 8006464:	f000 f8e0 	bl	8006628 <__malloc_lock>
 8006468:	4a1d      	ldr	r2, [pc, #116]	@ (80064e0 <_free_r+0x90>)
 800646a:	6813      	ldr	r3, [r2, #0]
 800646c:	b933      	cbnz	r3, 800647c <_free_r+0x2c>
 800646e:	6063      	str	r3, [r4, #4]
 8006470:	6014      	str	r4, [r2, #0]
 8006472:	4628      	mov	r0, r5
 8006474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006478:	f000 b8dc 	b.w	8006634 <__malloc_unlock>
 800647c:	42a3      	cmp	r3, r4
 800647e:	d908      	bls.n	8006492 <_free_r+0x42>
 8006480:	6820      	ldr	r0, [r4, #0]
 8006482:	1821      	adds	r1, r4, r0
 8006484:	428b      	cmp	r3, r1
 8006486:	bf01      	itttt	eq
 8006488:	6819      	ldreq	r1, [r3, #0]
 800648a:	685b      	ldreq	r3, [r3, #4]
 800648c:	1809      	addeq	r1, r1, r0
 800648e:	6021      	streq	r1, [r4, #0]
 8006490:	e7ed      	b.n	800646e <_free_r+0x1e>
 8006492:	461a      	mov	r2, r3
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	b10b      	cbz	r3, 800649c <_free_r+0x4c>
 8006498:	42a3      	cmp	r3, r4
 800649a:	d9fa      	bls.n	8006492 <_free_r+0x42>
 800649c:	6811      	ldr	r1, [r2, #0]
 800649e:	1850      	adds	r0, r2, r1
 80064a0:	42a0      	cmp	r0, r4
 80064a2:	d10b      	bne.n	80064bc <_free_r+0x6c>
 80064a4:	6820      	ldr	r0, [r4, #0]
 80064a6:	4401      	add	r1, r0
 80064a8:	1850      	adds	r0, r2, r1
 80064aa:	4283      	cmp	r3, r0
 80064ac:	6011      	str	r1, [r2, #0]
 80064ae:	d1e0      	bne.n	8006472 <_free_r+0x22>
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	6053      	str	r3, [r2, #4]
 80064b6:	4408      	add	r0, r1
 80064b8:	6010      	str	r0, [r2, #0]
 80064ba:	e7da      	b.n	8006472 <_free_r+0x22>
 80064bc:	d902      	bls.n	80064c4 <_free_r+0x74>
 80064be:	230c      	movs	r3, #12
 80064c0:	602b      	str	r3, [r5, #0]
 80064c2:	e7d6      	b.n	8006472 <_free_r+0x22>
 80064c4:	6820      	ldr	r0, [r4, #0]
 80064c6:	1821      	adds	r1, r4, r0
 80064c8:	428b      	cmp	r3, r1
 80064ca:	bf04      	itt	eq
 80064cc:	6819      	ldreq	r1, [r3, #0]
 80064ce:	685b      	ldreq	r3, [r3, #4]
 80064d0:	6063      	str	r3, [r4, #4]
 80064d2:	bf04      	itt	eq
 80064d4:	1809      	addeq	r1, r1, r0
 80064d6:	6021      	streq	r1, [r4, #0]
 80064d8:	6054      	str	r4, [r2, #4]
 80064da:	e7ca      	b.n	8006472 <_free_r+0x22>
 80064dc:	bd38      	pop	{r3, r4, r5, pc}
 80064de:	bf00      	nop
 80064e0:	20004bd4 	.word	0x20004bd4

080064e4 <sbrk_aligned>:
 80064e4:	b570      	push	{r4, r5, r6, lr}
 80064e6:	4e0f      	ldr	r6, [pc, #60]	@ (8006524 <sbrk_aligned+0x40>)
 80064e8:	460c      	mov	r4, r1
 80064ea:	6831      	ldr	r1, [r6, #0]
 80064ec:	4605      	mov	r5, r0
 80064ee:	b911      	cbnz	r1, 80064f6 <sbrk_aligned+0x12>
 80064f0:	f000 fca6 	bl	8006e40 <_sbrk_r>
 80064f4:	6030      	str	r0, [r6, #0]
 80064f6:	4621      	mov	r1, r4
 80064f8:	4628      	mov	r0, r5
 80064fa:	f000 fca1 	bl	8006e40 <_sbrk_r>
 80064fe:	1c43      	adds	r3, r0, #1
 8006500:	d103      	bne.n	800650a <sbrk_aligned+0x26>
 8006502:	f04f 34ff 	mov.w	r4, #4294967295
 8006506:	4620      	mov	r0, r4
 8006508:	bd70      	pop	{r4, r5, r6, pc}
 800650a:	1cc4      	adds	r4, r0, #3
 800650c:	f024 0403 	bic.w	r4, r4, #3
 8006510:	42a0      	cmp	r0, r4
 8006512:	d0f8      	beq.n	8006506 <sbrk_aligned+0x22>
 8006514:	1a21      	subs	r1, r4, r0
 8006516:	4628      	mov	r0, r5
 8006518:	f000 fc92 	bl	8006e40 <_sbrk_r>
 800651c:	3001      	adds	r0, #1
 800651e:	d1f2      	bne.n	8006506 <sbrk_aligned+0x22>
 8006520:	e7ef      	b.n	8006502 <sbrk_aligned+0x1e>
 8006522:	bf00      	nop
 8006524:	20004bd0 	.word	0x20004bd0

08006528 <_malloc_r>:
 8006528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800652c:	1ccd      	adds	r5, r1, #3
 800652e:	f025 0503 	bic.w	r5, r5, #3
 8006532:	3508      	adds	r5, #8
 8006534:	2d0c      	cmp	r5, #12
 8006536:	bf38      	it	cc
 8006538:	250c      	movcc	r5, #12
 800653a:	2d00      	cmp	r5, #0
 800653c:	4606      	mov	r6, r0
 800653e:	db01      	blt.n	8006544 <_malloc_r+0x1c>
 8006540:	42a9      	cmp	r1, r5
 8006542:	d904      	bls.n	800654e <_malloc_r+0x26>
 8006544:	230c      	movs	r3, #12
 8006546:	6033      	str	r3, [r6, #0]
 8006548:	2000      	movs	r0, #0
 800654a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800654e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006624 <_malloc_r+0xfc>
 8006552:	f000 f869 	bl	8006628 <__malloc_lock>
 8006556:	f8d8 3000 	ldr.w	r3, [r8]
 800655a:	461c      	mov	r4, r3
 800655c:	bb44      	cbnz	r4, 80065b0 <_malloc_r+0x88>
 800655e:	4629      	mov	r1, r5
 8006560:	4630      	mov	r0, r6
 8006562:	f7ff ffbf 	bl	80064e4 <sbrk_aligned>
 8006566:	1c43      	adds	r3, r0, #1
 8006568:	4604      	mov	r4, r0
 800656a:	d158      	bne.n	800661e <_malloc_r+0xf6>
 800656c:	f8d8 4000 	ldr.w	r4, [r8]
 8006570:	4627      	mov	r7, r4
 8006572:	2f00      	cmp	r7, #0
 8006574:	d143      	bne.n	80065fe <_malloc_r+0xd6>
 8006576:	2c00      	cmp	r4, #0
 8006578:	d04b      	beq.n	8006612 <_malloc_r+0xea>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	4639      	mov	r1, r7
 800657e:	4630      	mov	r0, r6
 8006580:	eb04 0903 	add.w	r9, r4, r3
 8006584:	f000 fc5c 	bl	8006e40 <_sbrk_r>
 8006588:	4581      	cmp	r9, r0
 800658a:	d142      	bne.n	8006612 <_malloc_r+0xea>
 800658c:	6821      	ldr	r1, [r4, #0]
 800658e:	1a6d      	subs	r5, r5, r1
 8006590:	4629      	mov	r1, r5
 8006592:	4630      	mov	r0, r6
 8006594:	f7ff ffa6 	bl	80064e4 <sbrk_aligned>
 8006598:	3001      	adds	r0, #1
 800659a:	d03a      	beq.n	8006612 <_malloc_r+0xea>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	442b      	add	r3, r5
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	f8d8 3000 	ldr.w	r3, [r8]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	bb62      	cbnz	r2, 8006604 <_malloc_r+0xdc>
 80065aa:	f8c8 7000 	str.w	r7, [r8]
 80065ae:	e00f      	b.n	80065d0 <_malloc_r+0xa8>
 80065b0:	6822      	ldr	r2, [r4, #0]
 80065b2:	1b52      	subs	r2, r2, r5
 80065b4:	d420      	bmi.n	80065f8 <_malloc_r+0xd0>
 80065b6:	2a0b      	cmp	r2, #11
 80065b8:	d917      	bls.n	80065ea <_malloc_r+0xc2>
 80065ba:	1961      	adds	r1, r4, r5
 80065bc:	42a3      	cmp	r3, r4
 80065be:	6025      	str	r5, [r4, #0]
 80065c0:	bf18      	it	ne
 80065c2:	6059      	strne	r1, [r3, #4]
 80065c4:	6863      	ldr	r3, [r4, #4]
 80065c6:	bf08      	it	eq
 80065c8:	f8c8 1000 	streq.w	r1, [r8]
 80065cc:	5162      	str	r2, [r4, r5]
 80065ce:	604b      	str	r3, [r1, #4]
 80065d0:	4630      	mov	r0, r6
 80065d2:	f000 f82f 	bl	8006634 <__malloc_unlock>
 80065d6:	f104 000b 	add.w	r0, r4, #11
 80065da:	1d23      	adds	r3, r4, #4
 80065dc:	f020 0007 	bic.w	r0, r0, #7
 80065e0:	1ac2      	subs	r2, r0, r3
 80065e2:	bf1c      	itt	ne
 80065e4:	1a1b      	subne	r3, r3, r0
 80065e6:	50a3      	strne	r3, [r4, r2]
 80065e8:	e7af      	b.n	800654a <_malloc_r+0x22>
 80065ea:	6862      	ldr	r2, [r4, #4]
 80065ec:	42a3      	cmp	r3, r4
 80065ee:	bf0c      	ite	eq
 80065f0:	f8c8 2000 	streq.w	r2, [r8]
 80065f4:	605a      	strne	r2, [r3, #4]
 80065f6:	e7eb      	b.n	80065d0 <_malloc_r+0xa8>
 80065f8:	4623      	mov	r3, r4
 80065fa:	6864      	ldr	r4, [r4, #4]
 80065fc:	e7ae      	b.n	800655c <_malloc_r+0x34>
 80065fe:	463c      	mov	r4, r7
 8006600:	687f      	ldr	r7, [r7, #4]
 8006602:	e7b6      	b.n	8006572 <_malloc_r+0x4a>
 8006604:	461a      	mov	r2, r3
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	42a3      	cmp	r3, r4
 800660a:	d1fb      	bne.n	8006604 <_malloc_r+0xdc>
 800660c:	2300      	movs	r3, #0
 800660e:	6053      	str	r3, [r2, #4]
 8006610:	e7de      	b.n	80065d0 <_malloc_r+0xa8>
 8006612:	230c      	movs	r3, #12
 8006614:	6033      	str	r3, [r6, #0]
 8006616:	4630      	mov	r0, r6
 8006618:	f000 f80c 	bl	8006634 <__malloc_unlock>
 800661c:	e794      	b.n	8006548 <_malloc_r+0x20>
 800661e:	6005      	str	r5, [r0, #0]
 8006620:	e7d6      	b.n	80065d0 <_malloc_r+0xa8>
 8006622:	bf00      	nop
 8006624:	20004bd4 	.word	0x20004bd4

08006628 <__malloc_lock>:
 8006628:	4801      	ldr	r0, [pc, #4]	@ (8006630 <__malloc_lock+0x8>)
 800662a:	f7ff bf00 	b.w	800642e <__retarget_lock_acquire_recursive>
 800662e:	bf00      	nop
 8006630:	20004bcc 	.word	0x20004bcc

08006634 <__malloc_unlock>:
 8006634:	4801      	ldr	r0, [pc, #4]	@ (800663c <__malloc_unlock+0x8>)
 8006636:	f7ff befb 	b.w	8006430 <__retarget_lock_release_recursive>
 800663a:	bf00      	nop
 800663c:	20004bcc 	.word	0x20004bcc

08006640 <__sfputc_r>:
 8006640:	6893      	ldr	r3, [r2, #8]
 8006642:	3b01      	subs	r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	b410      	push	{r4}
 8006648:	6093      	str	r3, [r2, #8]
 800664a:	da08      	bge.n	800665e <__sfputc_r+0x1e>
 800664c:	6994      	ldr	r4, [r2, #24]
 800664e:	42a3      	cmp	r3, r4
 8006650:	db01      	blt.n	8006656 <__sfputc_r+0x16>
 8006652:	290a      	cmp	r1, #10
 8006654:	d103      	bne.n	800665e <__sfputc_r+0x1e>
 8006656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800665a:	f7ff bdda 	b.w	8006212 <__swbuf_r>
 800665e:	6813      	ldr	r3, [r2, #0]
 8006660:	1c58      	adds	r0, r3, #1
 8006662:	6010      	str	r0, [r2, #0]
 8006664:	7019      	strb	r1, [r3, #0]
 8006666:	4608      	mov	r0, r1
 8006668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800666c:	4770      	bx	lr

0800666e <__sfputs_r>:
 800666e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006670:	4606      	mov	r6, r0
 8006672:	460f      	mov	r7, r1
 8006674:	4614      	mov	r4, r2
 8006676:	18d5      	adds	r5, r2, r3
 8006678:	42ac      	cmp	r4, r5
 800667a:	d101      	bne.n	8006680 <__sfputs_r+0x12>
 800667c:	2000      	movs	r0, #0
 800667e:	e007      	b.n	8006690 <__sfputs_r+0x22>
 8006680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006684:	463a      	mov	r2, r7
 8006686:	4630      	mov	r0, r6
 8006688:	f7ff ffda 	bl	8006640 <__sfputc_r>
 800668c:	1c43      	adds	r3, r0, #1
 800668e:	d1f3      	bne.n	8006678 <__sfputs_r+0xa>
 8006690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006694 <_vfiprintf_r>:
 8006694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006698:	460d      	mov	r5, r1
 800669a:	b09d      	sub	sp, #116	@ 0x74
 800669c:	4614      	mov	r4, r2
 800669e:	4698      	mov	r8, r3
 80066a0:	4606      	mov	r6, r0
 80066a2:	b118      	cbz	r0, 80066ac <_vfiprintf_r+0x18>
 80066a4:	6a03      	ldr	r3, [r0, #32]
 80066a6:	b90b      	cbnz	r3, 80066ac <_vfiprintf_r+0x18>
 80066a8:	f7ff fcca 	bl	8006040 <__sinit>
 80066ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066ae:	07d9      	lsls	r1, r3, #31
 80066b0:	d405      	bmi.n	80066be <_vfiprintf_r+0x2a>
 80066b2:	89ab      	ldrh	r3, [r5, #12]
 80066b4:	059a      	lsls	r2, r3, #22
 80066b6:	d402      	bmi.n	80066be <_vfiprintf_r+0x2a>
 80066b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066ba:	f7ff feb8 	bl	800642e <__retarget_lock_acquire_recursive>
 80066be:	89ab      	ldrh	r3, [r5, #12]
 80066c0:	071b      	lsls	r3, r3, #28
 80066c2:	d501      	bpl.n	80066c8 <_vfiprintf_r+0x34>
 80066c4:	692b      	ldr	r3, [r5, #16]
 80066c6:	b99b      	cbnz	r3, 80066f0 <_vfiprintf_r+0x5c>
 80066c8:	4629      	mov	r1, r5
 80066ca:	4630      	mov	r0, r6
 80066cc:	f7ff fde0 	bl	8006290 <__swsetup_r>
 80066d0:	b170      	cbz	r0, 80066f0 <_vfiprintf_r+0x5c>
 80066d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066d4:	07dc      	lsls	r4, r3, #31
 80066d6:	d504      	bpl.n	80066e2 <_vfiprintf_r+0x4e>
 80066d8:	f04f 30ff 	mov.w	r0, #4294967295
 80066dc:	b01d      	add	sp, #116	@ 0x74
 80066de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e2:	89ab      	ldrh	r3, [r5, #12]
 80066e4:	0598      	lsls	r0, r3, #22
 80066e6:	d4f7      	bmi.n	80066d8 <_vfiprintf_r+0x44>
 80066e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066ea:	f7ff fea1 	bl	8006430 <__retarget_lock_release_recursive>
 80066ee:	e7f3      	b.n	80066d8 <_vfiprintf_r+0x44>
 80066f0:	2300      	movs	r3, #0
 80066f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80066f4:	2320      	movs	r3, #32
 80066f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80066fe:	2330      	movs	r3, #48	@ 0x30
 8006700:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80068b0 <_vfiprintf_r+0x21c>
 8006704:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006708:	f04f 0901 	mov.w	r9, #1
 800670c:	4623      	mov	r3, r4
 800670e:	469a      	mov	sl, r3
 8006710:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006714:	b10a      	cbz	r2, 800671a <_vfiprintf_r+0x86>
 8006716:	2a25      	cmp	r2, #37	@ 0x25
 8006718:	d1f9      	bne.n	800670e <_vfiprintf_r+0x7a>
 800671a:	ebba 0b04 	subs.w	fp, sl, r4
 800671e:	d00b      	beq.n	8006738 <_vfiprintf_r+0xa4>
 8006720:	465b      	mov	r3, fp
 8006722:	4622      	mov	r2, r4
 8006724:	4629      	mov	r1, r5
 8006726:	4630      	mov	r0, r6
 8006728:	f7ff ffa1 	bl	800666e <__sfputs_r>
 800672c:	3001      	adds	r0, #1
 800672e:	f000 80a7 	beq.w	8006880 <_vfiprintf_r+0x1ec>
 8006732:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006734:	445a      	add	r2, fp
 8006736:	9209      	str	r2, [sp, #36]	@ 0x24
 8006738:	f89a 3000 	ldrb.w	r3, [sl]
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 809f 	beq.w	8006880 <_vfiprintf_r+0x1ec>
 8006742:	2300      	movs	r3, #0
 8006744:	f04f 32ff 	mov.w	r2, #4294967295
 8006748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800674c:	f10a 0a01 	add.w	sl, sl, #1
 8006750:	9304      	str	r3, [sp, #16]
 8006752:	9307      	str	r3, [sp, #28]
 8006754:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006758:	931a      	str	r3, [sp, #104]	@ 0x68
 800675a:	4654      	mov	r4, sl
 800675c:	2205      	movs	r2, #5
 800675e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006762:	4853      	ldr	r0, [pc, #332]	@ (80068b0 <_vfiprintf_r+0x21c>)
 8006764:	f7f9 fd54 	bl	8000210 <memchr>
 8006768:	9a04      	ldr	r2, [sp, #16]
 800676a:	b9d8      	cbnz	r0, 80067a4 <_vfiprintf_r+0x110>
 800676c:	06d1      	lsls	r1, r2, #27
 800676e:	bf44      	itt	mi
 8006770:	2320      	movmi	r3, #32
 8006772:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006776:	0713      	lsls	r3, r2, #28
 8006778:	bf44      	itt	mi
 800677a:	232b      	movmi	r3, #43	@ 0x2b
 800677c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006780:	f89a 3000 	ldrb.w	r3, [sl]
 8006784:	2b2a      	cmp	r3, #42	@ 0x2a
 8006786:	d015      	beq.n	80067b4 <_vfiprintf_r+0x120>
 8006788:	9a07      	ldr	r2, [sp, #28]
 800678a:	4654      	mov	r4, sl
 800678c:	2000      	movs	r0, #0
 800678e:	f04f 0c0a 	mov.w	ip, #10
 8006792:	4621      	mov	r1, r4
 8006794:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006798:	3b30      	subs	r3, #48	@ 0x30
 800679a:	2b09      	cmp	r3, #9
 800679c:	d94b      	bls.n	8006836 <_vfiprintf_r+0x1a2>
 800679e:	b1b0      	cbz	r0, 80067ce <_vfiprintf_r+0x13a>
 80067a0:	9207      	str	r2, [sp, #28]
 80067a2:	e014      	b.n	80067ce <_vfiprintf_r+0x13a>
 80067a4:	eba0 0308 	sub.w	r3, r0, r8
 80067a8:	fa09 f303 	lsl.w	r3, r9, r3
 80067ac:	4313      	orrs	r3, r2
 80067ae:	9304      	str	r3, [sp, #16]
 80067b0:	46a2      	mov	sl, r4
 80067b2:	e7d2      	b.n	800675a <_vfiprintf_r+0xc6>
 80067b4:	9b03      	ldr	r3, [sp, #12]
 80067b6:	1d19      	adds	r1, r3, #4
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	9103      	str	r1, [sp, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	bfbb      	ittet	lt
 80067c0:	425b      	neglt	r3, r3
 80067c2:	f042 0202 	orrlt.w	r2, r2, #2
 80067c6:	9307      	strge	r3, [sp, #28]
 80067c8:	9307      	strlt	r3, [sp, #28]
 80067ca:	bfb8      	it	lt
 80067cc:	9204      	strlt	r2, [sp, #16]
 80067ce:	7823      	ldrb	r3, [r4, #0]
 80067d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80067d2:	d10a      	bne.n	80067ea <_vfiprintf_r+0x156>
 80067d4:	7863      	ldrb	r3, [r4, #1]
 80067d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80067d8:	d132      	bne.n	8006840 <_vfiprintf_r+0x1ac>
 80067da:	9b03      	ldr	r3, [sp, #12]
 80067dc:	1d1a      	adds	r2, r3, #4
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	9203      	str	r2, [sp, #12]
 80067e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067e6:	3402      	adds	r4, #2
 80067e8:	9305      	str	r3, [sp, #20]
 80067ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80068c0 <_vfiprintf_r+0x22c>
 80067ee:	7821      	ldrb	r1, [r4, #0]
 80067f0:	2203      	movs	r2, #3
 80067f2:	4650      	mov	r0, sl
 80067f4:	f7f9 fd0c 	bl	8000210 <memchr>
 80067f8:	b138      	cbz	r0, 800680a <_vfiprintf_r+0x176>
 80067fa:	9b04      	ldr	r3, [sp, #16]
 80067fc:	eba0 000a 	sub.w	r0, r0, sl
 8006800:	2240      	movs	r2, #64	@ 0x40
 8006802:	4082      	lsls	r2, r0
 8006804:	4313      	orrs	r3, r2
 8006806:	3401      	adds	r4, #1
 8006808:	9304      	str	r3, [sp, #16]
 800680a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800680e:	4829      	ldr	r0, [pc, #164]	@ (80068b4 <_vfiprintf_r+0x220>)
 8006810:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006814:	2206      	movs	r2, #6
 8006816:	f7f9 fcfb 	bl	8000210 <memchr>
 800681a:	2800      	cmp	r0, #0
 800681c:	d03f      	beq.n	800689e <_vfiprintf_r+0x20a>
 800681e:	4b26      	ldr	r3, [pc, #152]	@ (80068b8 <_vfiprintf_r+0x224>)
 8006820:	bb1b      	cbnz	r3, 800686a <_vfiprintf_r+0x1d6>
 8006822:	9b03      	ldr	r3, [sp, #12]
 8006824:	3307      	adds	r3, #7
 8006826:	f023 0307 	bic.w	r3, r3, #7
 800682a:	3308      	adds	r3, #8
 800682c:	9303      	str	r3, [sp, #12]
 800682e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006830:	443b      	add	r3, r7
 8006832:	9309      	str	r3, [sp, #36]	@ 0x24
 8006834:	e76a      	b.n	800670c <_vfiprintf_r+0x78>
 8006836:	fb0c 3202 	mla	r2, ip, r2, r3
 800683a:	460c      	mov	r4, r1
 800683c:	2001      	movs	r0, #1
 800683e:	e7a8      	b.n	8006792 <_vfiprintf_r+0xfe>
 8006840:	2300      	movs	r3, #0
 8006842:	3401      	adds	r4, #1
 8006844:	9305      	str	r3, [sp, #20]
 8006846:	4619      	mov	r1, r3
 8006848:	f04f 0c0a 	mov.w	ip, #10
 800684c:	4620      	mov	r0, r4
 800684e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006852:	3a30      	subs	r2, #48	@ 0x30
 8006854:	2a09      	cmp	r2, #9
 8006856:	d903      	bls.n	8006860 <_vfiprintf_r+0x1cc>
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0c6      	beq.n	80067ea <_vfiprintf_r+0x156>
 800685c:	9105      	str	r1, [sp, #20]
 800685e:	e7c4      	b.n	80067ea <_vfiprintf_r+0x156>
 8006860:	fb0c 2101 	mla	r1, ip, r1, r2
 8006864:	4604      	mov	r4, r0
 8006866:	2301      	movs	r3, #1
 8006868:	e7f0      	b.n	800684c <_vfiprintf_r+0x1b8>
 800686a:	ab03      	add	r3, sp, #12
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	462a      	mov	r2, r5
 8006870:	4b12      	ldr	r3, [pc, #72]	@ (80068bc <_vfiprintf_r+0x228>)
 8006872:	a904      	add	r1, sp, #16
 8006874:	4630      	mov	r0, r6
 8006876:	f3af 8000 	nop.w
 800687a:	4607      	mov	r7, r0
 800687c:	1c78      	adds	r0, r7, #1
 800687e:	d1d6      	bne.n	800682e <_vfiprintf_r+0x19a>
 8006880:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006882:	07d9      	lsls	r1, r3, #31
 8006884:	d405      	bmi.n	8006892 <_vfiprintf_r+0x1fe>
 8006886:	89ab      	ldrh	r3, [r5, #12]
 8006888:	059a      	lsls	r2, r3, #22
 800688a:	d402      	bmi.n	8006892 <_vfiprintf_r+0x1fe>
 800688c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800688e:	f7ff fdcf 	bl	8006430 <__retarget_lock_release_recursive>
 8006892:	89ab      	ldrh	r3, [r5, #12]
 8006894:	065b      	lsls	r3, r3, #25
 8006896:	f53f af1f 	bmi.w	80066d8 <_vfiprintf_r+0x44>
 800689a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800689c:	e71e      	b.n	80066dc <_vfiprintf_r+0x48>
 800689e:	ab03      	add	r3, sp, #12
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	462a      	mov	r2, r5
 80068a4:	4b05      	ldr	r3, [pc, #20]	@ (80068bc <_vfiprintf_r+0x228>)
 80068a6:	a904      	add	r1, sp, #16
 80068a8:	4630      	mov	r0, r6
 80068aa:	f000 f879 	bl	80069a0 <_printf_i>
 80068ae:	e7e4      	b.n	800687a <_vfiprintf_r+0x1e6>
 80068b0:	08006fec 	.word	0x08006fec
 80068b4:	08006ff6 	.word	0x08006ff6
 80068b8:	00000000 	.word	0x00000000
 80068bc:	0800666f 	.word	0x0800666f
 80068c0:	08006ff2 	.word	0x08006ff2

080068c4 <_printf_common>:
 80068c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c8:	4616      	mov	r6, r2
 80068ca:	4698      	mov	r8, r3
 80068cc:	688a      	ldr	r2, [r1, #8]
 80068ce:	690b      	ldr	r3, [r1, #16]
 80068d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068d4:	4293      	cmp	r3, r2
 80068d6:	bfb8      	it	lt
 80068d8:	4613      	movlt	r3, r2
 80068da:	6033      	str	r3, [r6, #0]
 80068dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068e0:	4607      	mov	r7, r0
 80068e2:	460c      	mov	r4, r1
 80068e4:	b10a      	cbz	r2, 80068ea <_printf_common+0x26>
 80068e6:	3301      	adds	r3, #1
 80068e8:	6033      	str	r3, [r6, #0]
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	0699      	lsls	r1, r3, #26
 80068ee:	bf42      	ittt	mi
 80068f0:	6833      	ldrmi	r3, [r6, #0]
 80068f2:	3302      	addmi	r3, #2
 80068f4:	6033      	strmi	r3, [r6, #0]
 80068f6:	6825      	ldr	r5, [r4, #0]
 80068f8:	f015 0506 	ands.w	r5, r5, #6
 80068fc:	d106      	bne.n	800690c <_printf_common+0x48>
 80068fe:	f104 0a19 	add.w	sl, r4, #25
 8006902:	68e3      	ldr	r3, [r4, #12]
 8006904:	6832      	ldr	r2, [r6, #0]
 8006906:	1a9b      	subs	r3, r3, r2
 8006908:	42ab      	cmp	r3, r5
 800690a:	dc26      	bgt.n	800695a <_printf_common+0x96>
 800690c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006910:	6822      	ldr	r2, [r4, #0]
 8006912:	3b00      	subs	r3, #0
 8006914:	bf18      	it	ne
 8006916:	2301      	movne	r3, #1
 8006918:	0692      	lsls	r2, r2, #26
 800691a:	d42b      	bmi.n	8006974 <_printf_common+0xb0>
 800691c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006920:	4641      	mov	r1, r8
 8006922:	4638      	mov	r0, r7
 8006924:	47c8      	blx	r9
 8006926:	3001      	adds	r0, #1
 8006928:	d01e      	beq.n	8006968 <_printf_common+0xa4>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	6922      	ldr	r2, [r4, #16]
 800692e:	f003 0306 	and.w	r3, r3, #6
 8006932:	2b04      	cmp	r3, #4
 8006934:	bf02      	ittt	eq
 8006936:	68e5      	ldreq	r5, [r4, #12]
 8006938:	6833      	ldreq	r3, [r6, #0]
 800693a:	1aed      	subeq	r5, r5, r3
 800693c:	68a3      	ldr	r3, [r4, #8]
 800693e:	bf0c      	ite	eq
 8006940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006944:	2500      	movne	r5, #0
 8006946:	4293      	cmp	r3, r2
 8006948:	bfc4      	itt	gt
 800694a:	1a9b      	subgt	r3, r3, r2
 800694c:	18ed      	addgt	r5, r5, r3
 800694e:	2600      	movs	r6, #0
 8006950:	341a      	adds	r4, #26
 8006952:	42b5      	cmp	r5, r6
 8006954:	d11a      	bne.n	800698c <_printf_common+0xc8>
 8006956:	2000      	movs	r0, #0
 8006958:	e008      	b.n	800696c <_printf_common+0xa8>
 800695a:	2301      	movs	r3, #1
 800695c:	4652      	mov	r2, sl
 800695e:	4641      	mov	r1, r8
 8006960:	4638      	mov	r0, r7
 8006962:	47c8      	blx	r9
 8006964:	3001      	adds	r0, #1
 8006966:	d103      	bne.n	8006970 <_printf_common+0xac>
 8006968:	f04f 30ff 	mov.w	r0, #4294967295
 800696c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006970:	3501      	adds	r5, #1
 8006972:	e7c6      	b.n	8006902 <_printf_common+0x3e>
 8006974:	18e1      	adds	r1, r4, r3
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	2030      	movs	r0, #48	@ 0x30
 800697a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800697e:	4422      	add	r2, r4
 8006980:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006984:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006988:	3302      	adds	r3, #2
 800698a:	e7c7      	b.n	800691c <_printf_common+0x58>
 800698c:	2301      	movs	r3, #1
 800698e:	4622      	mov	r2, r4
 8006990:	4641      	mov	r1, r8
 8006992:	4638      	mov	r0, r7
 8006994:	47c8      	blx	r9
 8006996:	3001      	adds	r0, #1
 8006998:	d0e6      	beq.n	8006968 <_printf_common+0xa4>
 800699a:	3601      	adds	r6, #1
 800699c:	e7d9      	b.n	8006952 <_printf_common+0x8e>
	...

080069a0 <_printf_i>:
 80069a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069a4:	7e0f      	ldrb	r7, [r1, #24]
 80069a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069a8:	2f78      	cmp	r7, #120	@ 0x78
 80069aa:	4691      	mov	r9, r2
 80069ac:	4680      	mov	r8, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	469a      	mov	sl, r3
 80069b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069b6:	d807      	bhi.n	80069c8 <_printf_i+0x28>
 80069b8:	2f62      	cmp	r7, #98	@ 0x62
 80069ba:	d80a      	bhi.n	80069d2 <_printf_i+0x32>
 80069bc:	2f00      	cmp	r7, #0
 80069be:	f000 80d2 	beq.w	8006b66 <_printf_i+0x1c6>
 80069c2:	2f58      	cmp	r7, #88	@ 0x58
 80069c4:	f000 80b9 	beq.w	8006b3a <_printf_i+0x19a>
 80069c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069d0:	e03a      	b.n	8006a48 <_printf_i+0xa8>
 80069d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069d6:	2b15      	cmp	r3, #21
 80069d8:	d8f6      	bhi.n	80069c8 <_printf_i+0x28>
 80069da:	a101      	add	r1, pc, #4	@ (adr r1, 80069e0 <_printf_i+0x40>)
 80069dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069e0:	08006a39 	.word	0x08006a39
 80069e4:	08006a4d 	.word	0x08006a4d
 80069e8:	080069c9 	.word	0x080069c9
 80069ec:	080069c9 	.word	0x080069c9
 80069f0:	080069c9 	.word	0x080069c9
 80069f4:	080069c9 	.word	0x080069c9
 80069f8:	08006a4d 	.word	0x08006a4d
 80069fc:	080069c9 	.word	0x080069c9
 8006a00:	080069c9 	.word	0x080069c9
 8006a04:	080069c9 	.word	0x080069c9
 8006a08:	080069c9 	.word	0x080069c9
 8006a0c:	08006b4d 	.word	0x08006b4d
 8006a10:	08006a77 	.word	0x08006a77
 8006a14:	08006b07 	.word	0x08006b07
 8006a18:	080069c9 	.word	0x080069c9
 8006a1c:	080069c9 	.word	0x080069c9
 8006a20:	08006b6f 	.word	0x08006b6f
 8006a24:	080069c9 	.word	0x080069c9
 8006a28:	08006a77 	.word	0x08006a77
 8006a2c:	080069c9 	.word	0x080069c9
 8006a30:	080069c9 	.word	0x080069c9
 8006a34:	08006b0f 	.word	0x08006b0f
 8006a38:	6833      	ldr	r3, [r6, #0]
 8006a3a:	1d1a      	adds	r2, r3, #4
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6032      	str	r2, [r6, #0]
 8006a40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e09d      	b.n	8006b88 <_printf_i+0x1e8>
 8006a4c:	6833      	ldr	r3, [r6, #0]
 8006a4e:	6820      	ldr	r0, [r4, #0]
 8006a50:	1d19      	adds	r1, r3, #4
 8006a52:	6031      	str	r1, [r6, #0]
 8006a54:	0606      	lsls	r6, r0, #24
 8006a56:	d501      	bpl.n	8006a5c <_printf_i+0xbc>
 8006a58:	681d      	ldr	r5, [r3, #0]
 8006a5a:	e003      	b.n	8006a64 <_printf_i+0xc4>
 8006a5c:	0645      	lsls	r5, r0, #25
 8006a5e:	d5fb      	bpl.n	8006a58 <_printf_i+0xb8>
 8006a60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a64:	2d00      	cmp	r5, #0
 8006a66:	da03      	bge.n	8006a70 <_printf_i+0xd0>
 8006a68:	232d      	movs	r3, #45	@ 0x2d
 8006a6a:	426d      	negs	r5, r5
 8006a6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a70:	4859      	ldr	r0, [pc, #356]	@ (8006bd8 <_printf_i+0x238>)
 8006a72:	230a      	movs	r3, #10
 8006a74:	e011      	b.n	8006a9a <_printf_i+0xfa>
 8006a76:	6821      	ldr	r1, [r4, #0]
 8006a78:	6833      	ldr	r3, [r6, #0]
 8006a7a:	0608      	lsls	r0, r1, #24
 8006a7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a80:	d402      	bmi.n	8006a88 <_printf_i+0xe8>
 8006a82:	0649      	lsls	r1, r1, #25
 8006a84:	bf48      	it	mi
 8006a86:	b2ad      	uxthmi	r5, r5
 8006a88:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a8a:	4853      	ldr	r0, [pc, #332]	@ (8006bd8 <_printf_i+0x238>)
 8006a8c:	6033      	str	r3, [r6, #0]
 8006a8e:	bf14      	ite	ne
 8006a90:	230a      	movne	r3, #10
 8006a92:	2308      	moveq	r3, #8
 8006a94:	2100      	movs	r1, #0
 8006a96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a9a:	6866      	ldr	r6, [r4, #4]
 8006a9c:	60a6      	str	r6, [r4, #8]
 8006a9e:	2e00      	cmp	r6, #0
 8006aa0:	bfa2      	ittt	ge
 8006aa2:	6821      	ldrge	r1, [r4, #0]
 8006aa4:	f021 0104 	bicge.w	r1, r1, #4
 8006aa8:	6021      	strge	r1, [r4, #0]
 8006aaa:	b90d      	cbnz	r5, 8006ab0 <_printf_i+0x110>
 8006aac:	2e00      	cmp	r6, #0
 8006aae:	d04b      	beq.n	8006b48 <_printf_i+0x1a8>
 8006ab0:	4616      	mov	r6, r2
 8006ab2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ab6:	fb03 5711 	mls	r7, r3, r1, r5
 8006aba:	5dc7      	ldrb	r7, [r0, r7]
 8006abc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ac0:	462f      	mov	r7, r5
 8006ac2:	42bb      	cmp	r3, r7
 8006ac4:	460d      	mov	r5, r1
 8006ac6:	d9f4      	bls.n	8006ab2 <_printf_i+0x112>
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d10b      	bne.n	8006ae4 <_printf_i+0x144>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	07df      	lsls	r7, r3, #31
 8006ad0:	d508      	bpl.n	8006ae4 <_printf_i+0x144>
 8006ad2:	6923      	ldr	r3, [r4, #16]
 8006ad4:	6861      	ldr	r1, [r4, #4]
 8006ad6:	4299      	cmp	r1, r3
 8006ad8:	bfde      	ittt	le
 8006ada:	2330      	movle	r3, #48	@ 0x30
 8006adc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ae0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ae4:	1b92      	subs	r2, r2, r6
 8006ae6:	6122      	str	r2, [r4, #16]
 8006ae8:	f8cd a000 	str.w	sl, [sp]
 8006aec:	464b      	mov	r3, r9
 8006aee:	aa03      	add	r2, sp, #12
 8006af0:	4621      	mov	r1, r4
 8006af2:	4640      	mov	r0, r8
 8006af4:	f7ff fee6 	bl	80068c4 <_printf_common>
 8006af8:	3001      	adds	r0, #1
 8006afa:	d14a      	bne.n	8006b92 <_printf_i+0x1f2>
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	b004      	add	sp, #16
 8006b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	f043 0320 	orr.w	r3, r3, #32
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	4833      	ldr	r0, [pc, #204]	@ (8006bdc <_printf_i+0x23c>)
 8006b10:	2778      	movs	r7, #120	@ 0x78
 8006b12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	6831      	ldr	r1, [r6, #0]
 8006b1a:	061f      	lsls	r7, r3, #24
 8006b1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b20:	d402      	bmi.n	8006b28 <_printf_i+0x188>
 8006b22:	065f      	lsls	r7, r3, #25
 8006b24:	bf48      	it	mi
 8006b26:	b2ad      	uxthmi	r5, r5
 8006b28:	6031      	str	r1, [r6, #0]
 8006b2a:	07d9      	lsls	r1, r3, #31
 8006b2c:	bf44      	itt	mi
 8006b2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b32:	6023      	strmi	r3, [r4, #0]
 8006b34:	b11d      	cbz	r5, 8006b3e <_printf_i+0x19e>
 8006b36:	2310      	movs	r3, #16
 8006b38:	e7ac      	b.n	8006a94 <_printf_i+0xf4>
 8006b3a:	4827      	ldr	r0, [pc, #156]	@ (8006bd8 <_printf_i+0x238>)
 8006b3c:	e7e9      	b.n	8006b12 <_printf_i+0x172>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	f023 0320 	bic.w	r3, r3, #32
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	e7f6      	b.n	8006b36 <_printf_i+0x196>
 8006b48:	4616      	mov	r6, r2
 8006b4a:	e7bd      	b.n	8006ac8 <_printf_i+0x128>
 8006b4c:	6833      	ldr	r3, [r6, #0]
 8006b4e:	6825      	ldr	r5, [r4, #0]
 8006b50:	6961      	ldr	r1, [r4, #20]
 8006b52:	1d18      	adds	r0, r3, #4
 8006b54:	6030      	str	r0, [r6, #0]
 8006b56:	062e      	lsls	r6, r5, #24
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	d501      	bpl.n	8006b60 <_printf_i+0x1c0>
 8006b5c:	6019      	str	r1, [r3, #0]
 8006b5e:	e002      	b.n	8006b66 <_printf_i+0x1c6>
 8006b60:	0668      	lsls	r0, r5, #25
 8006b62:	d5fb      	bpl.n	8006b5c <_printf_i+0x1bc>
 8006b64:	8019      	strh	r1, [r3, #0]
 8006b66:	2300      	movs	r3, #0
 8006b68:	6123      	str	r3, [r4, #16]
 8006b6a:	4616      	mov	r6, r2
 8006b6c:	e7bc      	b.n	8006ae8 <_printf_i+0x148>
 8006b6e:	6833      	ldr	r3, [r6, #0]
 8006b70:	1d1a      	adds	r2, r3, #4
 8006b72:	6032      	str	r2, [r6, #0]
 8006b74:	681e      	ldr	r6, [r3, #0]
 8006b76:	6862      	ldr	r2, [r4, #4]
 8006b78:	2100      	movs	r1, #0
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f7f9 fb48 	bl	8000210 <memchr>
 8006b80:	b108      	cbz	r0, 8006b86 <_printf_i+0x1e6>
 8006b82:	1b80      	subs	r0, r0, r6
 8006b84:	6060      	str	r0, [r4, #4]
 8006b86:	6863      	ldr	r3, [r4, #4]
 8006b88:	6123      	str	r3, [r4, #16]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b90:	e7aa      	b.n	8006ae8 <_printf_i+0x148>
 8006b92:	6923      	ldr	r3, [r4, #16]
 8006b94:	4632      	mov	r2, r6
 8006b96:	4649      	mov	r1, r9
 8006b98:	4640      	mov	r0, r8
 8006b9a:	47d0      	blx	sl
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d0ad      	beq.n	8006afc <_printf_i+0x15c>
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	079b      	lsls	r3, r3, #30
 8006ba4:	d413      	bmi.n	8006bce <_printf_i+0x22e>
 8006ba6:	68e0      	ldr	r0, [r4, #12]
 8006ba8:	9b03      	ldr	r3, [sp, #12]
 8006baa:	4298      	cmp	r0, r3
 8006bac:	bfb8      	it	lt
 8006bae:	4618      	movlt	r0, r3
 8006bb0:	e7a6      	b.n	8006b00 <_printf_i+0x160>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	4632      	mov	r2, r6
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	4640      	mov	r0, r8
 8006bba:	47d0      	blx	sl
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d09d      	beq.n	8006afc <_printf_i+0x15c>
 8006bc0:	3501      	adds	r5, #1
 8006bc2:	68e3      	ldr	r3, [r4, #12]
 8006bc4:	9903      	ldr	r1, [sp, #12]
 8006bc6:	1a5b      	subs	r3, r3, r1
 8006bc8:	42ab      	cmp	r3, r5
 8006bca:	dcf2      	bgt.n	8006bb2 <_printf_i+0x212>
 8006bcc:	e7eb      	b.n	8006ba6 <_printf_i+0x206>
 8006bce:	2500      	movs	r5, #0
 8006bd0:	f104 0619 	add.w	r6, r4, #25
 8006bd4:	e7f5      	b.n	8006bc2 <_printf_i+0x222>
 8006bd6:	bf00      	nop
 8006bd8:	08006ffd 	.word	0x08006ffd
 8006bdc:	0800700e 	.word	0x0800700e

08006be0 <__sflush_r>:
 8006be0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be8:	0716      	lsls	r6, r2, #28
 8006bea:	4605      	mov	r5, r0
 8006bec:	460c      	mov	r4, r1
 8006bee:	d454      	bmi.n	8006c9a <__sflush_r+0xba>
 8006bf0:	684b      	ldr	r3, [r1, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	dc02      	bgt.n	8006bfc <__sflush_r+0x1c>
 8006bf6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	dd48      	ble.n	8006c8e <__sflush_r+0xae>
 8006bfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bfe:	2e00      	cmp	r6, #0
 8006c00:	d045      	beq.n	8006c8e <__sflush_r+0xae>
 8006c02:	2300      	movs	r3, #0
 8006c04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c08:	682f      	ldr	r7, [r5, #0]
 8006c0a:	6a21      	ldr	r1, [r4, #32]
 8006c0c:	602b      	str	r3, [r5, #0]
 8006c0e:	d030      	beq.n	8006c72 <__sflush_r+0x92>
 8006c10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	0759      	lsls	r1, r3, #29
 8006c16:	d505      	bpl.n	8006c24 <__sflush_r+0x44>
 8006c18:	6863      	ldr	r3, [r4, #4]
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c1e:	b10b      	cbz	r3, 8006c24 <__sflush_r+0x44>
 8006c20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c22:	1ad2      	subs	r2, r2, r3
 8006c24:	2300      	movs	r3, #0
 8006c26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c28:	6a21      	ldr	r1, [r4, #32]
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	47b0      	blx	r6
 8006c2e:	1c43      	adds	r3, r0, #1
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	d106      	bne.n	8006c42 <__sflush_r+0x62>
 8006c34:	6829      	ldr	r1, [r5, #0]
 8006c36:	291d      	cmp	r1, #29
 8006c38:	d82b      	bhi.n	8006c92 <__sflush_r+0xb2>
 8006c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8006ce4 <__sflush_r+0x104>)
 8006c3c:	410a      	asrs	r2, r1
 8006c3e:	07d6      	lsls	r6, r2, #31
 8006c40:	d427      	bmi.n	8006c92 <__sflush_r+0xb2>
 8006c42:	2200      	movs	r2, #0
 8006c44:	6062      	str	r2, [r4, #4]
 8006c46:	04d9      	lsls	r1, r3, #19
 8006c48:	6922      	ldr	r2, [r4, #16]
 8006c4a:	6022      	str	r2, [r4, #0]
 8006c4c:	d504      	bpl.n	8006c58 <__sflush_r+0x78>
 8006c4e:	1c42      	adds	r2, r0, #1
 8006c50:	d101      	bne.n	8006c56 <__sflush_r+0x76>
 8006c52:	682b      	ldr	r3, [r5, #0]
 8006c54:	b903      	cbnz	r3, 8006c58 <__sflush_r+0x78>
 8006c56:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c5a:	602f      	str	r7, [r5, #0]
 8006c5c:	b1b9      	cbz	r1, 8006c8e <__sflush_r+0xae>
 8006c5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c62:	4299      	cmp	r1, r3
 8006c64:	d002      	beq.n	8006c6c <__sflush_r+0x8c>
 8006c66:	4628      	mov	r0, r5
 8006c68:	f7ff fbf2 	bl	8006450 <_free_r>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c70:	e00d      	b.n	8006c8e <__sflush_r+0xae>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4628      	mov	r0, r5
 8006c76:	47b0      	blx	r6
 8006c78:	4602      	mov	r2, r0
 8006c7a:	1c50      	adds	r0, r2, #1
 8006c7c:	d1c9      	bne.n	8006c12 <__sflush_r+0x32>
 8006c7e:	682b      	ldr	r3, [r5, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0c6      	beq.n	8006c12 <__sflush_r+0x32>
 8006c84:	2b1d      	cmp	r3, #29
 8006c86:	d001      	beq.n	8006c8c <__sflush_r+0xac>
 8006c88:	2b16      	cmp	r3, #22
 8006c8a:	d11e      	bne.n	8006cca <__sflush_r+0xea>
 8006c8c:	602f      	str	r7, [r5, #0]
 8006c8e:	2000      	movs	r0, #0
 8006c90:	e022      	b.n	8006cd8 <__sflush_r+0xf8>
 8006c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c96:	b21b      	sxth	r3, r3
 8006c98:	e01b      	b.n	8006cd2 <__sflush_r+0xf2>
 8006c9a:	690f      	ldr	r7, [r1, #16]
 8006c9c:	2f00      	cmp	r7, #0
 8006c9e:	d0f6      	beq.n	8006c8e <__sflush_r+0xae>
 8006ca0:	0793      	lsls	r3, r2, #30
 8006ca2:	680e      	ldr	r6, [r1, #0]
 8006ca4:	bf08      	it	eq
 8006ca6:	694b      	ldreq	r3, [r1, #20]
 8006ca8:	600f      	str	r7, [r1, #0]
 8006caa:	bf18      	it	ne
 8006cac:	2300      	movne	r3, #0
 8006cae:	eba6 0807 	sub.w	r8, r6, r7
 8006cb2:	608b      	str	r3, [r1, #8]
 8006cb4:	f1b8 0f00 	cmp.w	r8, #0
 8006cb8:	dde9      	ble.n	8006c8e <__sflush_r+0xae>
 8006cba:	6a21      	ldr	r1, [r4, #32]
 8006cbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006cbe:	4643      	mov	r3, r8
 8006cc0:	463a      	mov	r2, r7
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	47b0      	blx	r6
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	dc08      	bgt.n	8006cdc <__sflush_r+0xfc>
 8006cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cd2:	81a3      	strh	r3, [r4, #12]
 8006cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cdc:	4407      	add	r7, r0
 8006cde:	eba8 0800 	sub.w	r8, r8, r0
 8006ce2:	e7e7      	b.n	8006cb4 <__sflush_r+0xd4>
 8006ce4:	dfbffffe 	.word	0xdfbffffe

08006ce8 <_fflush_r>:
 8006ce8:	b538      	push	{r3, r4, r5, lr}
 8006cea:	690b      	ldr	r3, [r1, #16]
 8006cec:	4605      	mov	r5, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	b913      	cbnz	r3, 8006cf8 <_fflush_r+0x10>
 8006cf2:	2500      	movs	r5, #0
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}
 8006cf8:	b118      	cbz	r0, 8006d02 <_fflush_r+0x1a>
 8006cfa:	6a03      	ldr	r3, [r0, #32]
 8006cfc:	b90b      	cbnz	r3, 8006d02 <_fflush_r+0x1a>
 8006cfe:	f7ff f99f 	bl	8006040 <__sinit>
 8006d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0f3      	beq.n	8006cf2 <_fflush_r+0xa>
 8006d0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d0c:	07d0      	lsls	r0, r2, #31
 8006d0e:	d404      	bmi.n	8006d1a <_fflush_r+0x32>
 8006d10:	0599      	lsls	r1, r3, #22
 8006d12:	d402      	bmi.n	8006d1a <_fflush_r+0x32>
 8006d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d16:	f7ff fb8a 	bl	800642e <__retarget_lock_acquire_recursive>
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	f7ff ff5f 	bl	8006be0 <__sflush_r>
 8006d22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d24:	07da      	lsls	r2, r3, #31
 8006d26:	4605      	mov	r5, r0
 8006d28:	d4e4      	bmi.n	8006cf4 <_fflush_r+0xc>
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	059b      	lsls	r3, r3, #22
 8006d2e:	d4e1      	bmi.n	8006cf4 <_fflush_r+0xc>
 8006d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d32:	f7ff fb7d 	bl	8006430 <__retarget_lock_release_recursive>
 8006d36:	e7dd      	b.n	8006cf4 <_fflush_r+0xc>

08006d38 <__swhatbuf_r>:
 8006d38:	b570      	push	{r4, r5, r6, lr}
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d40:	2900      	cmp	r1, #0
 8006d42:	b096      	sub	sp, #88	@ 0x58
 8006d44:	4615      	mov	r5, r2
 8006d46:	461e      	mov	r6, r3
 8006d48:	da0d      	bge.n	8006d66 <__swhatbuf_r+0x2e>
 8006d4a:	89a3      	ldrh	r3, [r4, #12]
 8006d4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d50:	f04f 0100 	mov.w	r1, #0
 8006d54:	bf14      	ite	ne
 8006d56:	2340      	movne	r3, #64	@ 0x40
 8006d58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	6031      	str	r1, [r6, #0]
 8006d60:	602b      	str	r3, [r5, #0]
 8006d62:	b016      	add	sp, #88	@ 0x58
 8006d64:	bd70      	pop	{r4, r5, r6, pc}
 8006d66:	466a      	mov	r2, sp
 8006d68:	f000 f848 	bl	8006dfc <_fstat_r>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	dbec      	blt.n	8006d4a <__swhatbuf_r+0x12>
 8006d70:	9901      	ldr	r1, [sp, #4]
 8006d72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d7a:	4259      	negs	r1, r3
 8006d7c:	4159      	adcs	r1, r3
 8006d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d82:	e7eb      	b.n	8006d5c <__swhatbuf_r+0x24>

08006d84 <__smakebuf_r>:
 8006d84:	898b      	ldrh	r3, [r1, #12]
 8006d86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d88:	079d      	lsls	r5, r3, #30
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	d507      	bpl.n	8006da0 <__smakebuf_r+0x1c>
 8006d90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	6123      	str	r3, [r4, #16]
 8006d98:	2301      	movs	r3, #1
 8006d9a:	6163      	str	r3, [r4, #20]
 8006d9c:	b003      	add	sp, #12
 8006d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006da0:	ab01      	add	r3, sp, #4
 8006da2:	466a      	mov	r2, sp
 8006da4:	f7ff ffc8 	bl	8006d38 <__swhatbuf_r>
 8006da8:	9f00      	ldr	r7, [sp, #0]
 8006daa:	4605      	mov	r5, r0
 8006dac:	4639      	mov	r1, r7
 8006dae:	4630      	mov	r0, r6
 8006db0:	f7ff fbba 	bl	8006528 <_malloc_r>
 8006db4:	b948      	cbnz	r0, 8006dca <__smakebuf_r+0x46>
 8006db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dba:	059a      	lsls	r2, r3, #22
 8006dbc:	d4ee      	bmi.n	8006d9c <__smakebuf_r+0x18>
 8006dbe:	f023 0303 	bic.w	r3, r3, #3
 8006dc2:	f043 0302 	orr.w	r3, r3, #2
 8006dc6:	81a3      	strh	r3, [r4, #12]
 8006dc8:	e7e2      	b.n	8006d90 <__smakebuf_r+0xc>
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	6020      	str	r0, [r4, #0]
 8006dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dd2:	81a3      	strh	r3, [r4, #12]
 8006dd4:	9b01      	ldr	r3, [sp, #4]
 8006dd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006dda:	b15b      	cbz	r3, 8006df4 <__smakebuf_r+0x70>
 8006ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006de0:	4630      	mov	r0, r6
 8006de2:	f000 f81d 	bl	8006e20 <_isatty_r>
 8006de6:	b128      	cbz	r0, 8006df4 <__smakebuf_r+0x70>
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	f023 0303 	bic.w	r3, r3, #3
 8006dee:	f043 0301 	orr.w	r3, r3, #1
 8006df2:	81a3      	strh	r3, [r4, #12]
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	431d      	orrs	r5, r3
 8006df8:	81a5      	strh	r5, [r4, #12]
 8006dfa:	e7cf      	b.n	8006d9c <__smakebuf_r+0x18>

08006dfc <_fstat_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d07      	ldr	r5, [pc, #28]	@ (8006e1c <_fstat_r+0x20>)
 8006e00:	2300      	movs	r3, #0
 8006e02:	4604      	mov	r4, r0
 8006e04:	4608      	mov	r0, r1
 8006e06:	4611      	mov	r1, r2
 8006e08:	602b      	str	r3, [r5, #0]
 8006e0a:	f7f9 feda 	bl	8000bc2 <_fstat>
 8006e0e:	1c43      	adds	r3, r0, #1
 8006e10:	d102      	bne.n	8006e18 <_fstat_r+0x1c>
 8006e12:	682b      	ldr	r3, [r5, #0]
 8006e14:	b103      	cbz	r3, 8006e18 <_fstat_r+0x1c>
 8006e16:	6023      	str	r3, [r4, #0]
 8006e18:	bd38      	pop	{r3, r4, r5, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20004bc8 	.word	0x20004bc8

08006e20 <_isatty_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d06      	ldr	r5, [pc, #24]	@ (8006e3c <_isatty_r+0x1c>)
 8006e24:	2300      	movs	r3, #0
 8006e26:	4604      	mov	r4, r0
 8006e28:	4608      	mov	r0, r1
 8006e2a:	602b      	str	r3, [r5, #0]
 8006e2c:	f7f9 fed9 	bl	8000be2 <_isatty>
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d102      	bne.n	8006e3a <_isatty_r+0x1a>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	b103      	cbz	r3, 8006e3a <_isatty_r+0x1a>
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	20004bc8 	.word	0x20004bc8

08006e40 <_sbrk_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4d06      	ldr	r5, [pc, #24]	@ (8006e5c <_sbrk_r+0x1c>)
 8006e44:	2300      	movs	r3, #0
 8006e46:	4604      	mov	r4, r0
 8006e48:	4608      	mov	r0, r1
 8006e4a:	602b      	str	r3, [r5, #0]
 8006e4c:	f7f9 fee2 	bl	8000c14 <_sbrk>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d102      	bne.n	8006e5a <_sbrk_r+0x1a>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	b103      	cbz	r3, 8006e5a <_sbrk_r+0x1a>
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	20004bc8 	.word	0x20004bc8

08006e60 <_init>:
 8006e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e62:	bf00      	nop
 8006e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e66:	bc08      	pop	{r3}
 8006e68:	469e      	mov	lr, r3
 8006e6a:	4770      	bx	lr

08006e6c <_fini>:
 8006e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6e:	bf00      	nop
 8006e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e72:	bc08      	pop	{r3}
 8006e74:	469e      	mov	lr, r3
 8006e76:	4770      	bx	lr
